{"version":3,"file":"pages/api/chat/feedback.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,uHCaA,IAAMC,EAAaC,EAAAA,CAACA,CAACC,MAAM,CAAC,CAC3BC,eAAgBF,EAAAA,CAACA,CAACG,MAAM,GACxBC,UAAWJ,EAAAA,CAACA,CAACG,MAAM,GACnBE,KAAML,EAAAA,CAACA,CACLG,MAAM,GACNG,SAAS,CAAC,GAAOC,EAAEC,IAAI,IACvBC,QAAQ,GACVC,OAAQV,EAAAA,CAACA,CAACW,MAAM,GAAGC,GAAG,CAAC,IAAIC,GAAG,CAAC,GAAGJ,QAAQ,EAC3C,GAEe,eAAeK,EAC7BC,CAAgB,CAChBC,CAAmB,EAEnBC,QAAQC,GAAG,CAAC,CAAC,CAAC,EAAEH,EAAII,MAAM,CAAC,EAAE,EAAEJ,EAAIK,GAAG,CAAC,CAAC,EAExC,IAAMC,EAAgBN,EAAIO,OAAO,CAACC,GAAG,CAAC,iBACtC,GAAI,CAACF,EACJ,OAAO,IAAIG,SAAS,YAAa,CAAEC,OAAQ,GAAI,GAEhD,IAAMC,EAAML,EAAcM,KAAK,CAAC,IAAI,CAAC,EAAE,CAEvC,GACM,SADEZ,EAAII,MAAM,CACJ,CAEZ,IAAMS,EAAO,MAAMb,EAAIc,IAAI,GAErBC,EAAa/B,EAAWgC,SAAS,CAACH,GACxC,GAAI,CAACE,EAAWE,OAAO,CACtB,OAAO,IAAIR,SAAS,cAAe,CAAEC,OAAQ,GAAI,GAElD,GAAM,CAAEvB,eAAAA,CAAc,CAAEE,UAAAA,CAAS,CAAEM,OAAAA,CAAM,CAAEL,KAAAA,CAAI,CAAE,CAAGyB,EAAWG,IAAI,CAE7DC,EAAM,MAAMC,EACjB,CACCjC,eAAAA,EACAE,UAAAA,EACAgC,YAAaV,CACd,EACA,CAAEhB,OAAAA,EAAQL,KAAAA,CAAK,GAIhB,OAAO,IAAImB,SAFE,MAAMU,EAAIL,IAAI,GAED,CAAEJ,OAAQS,EAAIT,MAAM,EAC/C,CAEF,CAGA,eAAeU,EACd,CAAEjC,eAAAA,CAAc,CAAEE,UAAAA,CAAS,CAAEgC,YAAAA,CAAW,CAAE,CAC1C,CAAE1B,OAAAA,CAAM,CAAEL,KAAAA,CAAI,CAAE,EAEhB,IAAMiB,EAAU,IAAIe,QASpB,OARAf,EAAQgB,GAAG,CAAC,gBAAiB,CAAC,OAAO,EAAEF,EAAY,CAAC,EACpDd,EAAQgB,GAAG,CAAC,eAAgB,oBAOrBC,MAAMnB,IALGoB,IACf,CAAC,kBAAkB,EAAEtC,EAAe,UAAU,EAAEE,EAAU,SAAS,CAAC,CACpEqC,QAAQC,GAAG,CAACC,8BAA8B,EAG1BC,QAAQ,GAAI,CAC5BhB,KAAMiB,KAAKC,SAAS,CAAC,CAAEpC,OAAAA,EAAQL,KAAAA,CAAK,GACpCc,OAAQ,OACRG,QAAAA,CACD,EACD,CCpEuB,SAAAyB,EAAAC,CAAA,EACvB,MAAiB,GAAAC,EAAAC,CAAA,EAAO,CACxB,GAAAF,CAAA,CACAG,iBAA8BC,EAAAC,CAAA,CAC9BC,KAAA,qBACAC,QAAuB,GAAAC,EAAAC,EAAA,EAAc,qBAAuB3C,EAC5D,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/pages/api/chat/feedback.ts","webpack://_N_E/?5fbb"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { type NextRequest, type NextFetchEvent } from 'next/server'\nimport { z } from 'zod'\n\nexport const config = {\n\truntime: 'experimental-edge',\n}\n\n// POST body payload\nconst bodySchema = z.object({\n\tconversationId: z.string(),\n\tmessageId: z.string(),\n\ttext: z\n\t\t.string()\n\t\t.transform((e) => e.trim())\n\t\t.optional(),\n\trating: z.number().min(-1).max(1).optional(),\n})\n\nexport default async function edgehandler(\n\treq: NextRequest,\n\tevt: NextFetchEvent\n) {\n\tconsole.log(`[${req.method}] ${req.url}`)\n\n\tconst authorization = req.headers.get('authorization')\n\tif (!authorization) {\n\t\treturn new Response('Not found', { status: 404 })\n\t}\n\tconst jwt = authorization.split(' ')[1]\n\n\tswitch (req.method) {\n\t\tcase 'POST': {\n\t\t\t// read request body\n\t\t\tconst body = await req.json()\n\t\t\t// validate request body\n\t\t\tconst parsedBody = bodySchema.safeParse(body)\n\t\t\tif (!parsedBody.success) {\n\t\t\t\treturn new Response('Bad Request', { status: 400 })\n\t\t\t}\n\t\t\tconst { conversationId, messageId, rating, text } = parsedBody.data\n\n\t\t\tconst res = await createMessageFeedback(\n\t\t\t\t{\n\t\t\t\t\tconversationId,\n\t\t\t\t\tmessageId,\n\t\t\t\t\taccessToken: jwt,\n\t\t\t\t},\n\t\t\t\t{ rating, text }\n\t\t\t)\n\t\t\tconst data = await res.json()\n\n\t\t\treturn new Response(data, { status: res.status })\n\t\t}\n\t}\n}\n\n// POST /v1/conversations/:conversation_id/messages/:message_id/feedback\nasync function createMessageFeedback(\n\t{ conversationId, messageId, accessToken },\n\t{ rating, text }\n) {\n\tconst headers = new Headers()\n\theaders.set('Authorization', `Bearer ${accessToken}`)\n\theaders.set('Content-Type', 'application/json')\n\n\tconst url = new URL(\n\t\t`/v1/conversations/${conversationId}/messages/${messageId}/feedback`,\n\t\tprocess.env.EXPERIMENTAL_CHAT_API_BASE_URL\n\t)\n\n\treturn fetch(url.toString(), {\n\t\tbody: JSON.stringify({ rating, text }),\n\t\tmethod: 'POST',\n\t\theaders,\n\t})\n}\n","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/chat/feedback.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/chat/feedback\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/chat/feedback\",\n              handler: wrapApiHandler(\"/api/chat/feedback\", handler),\n          })\n        }\n    "],"names":["module","exports","require","bodySchema","z","object","conversationId","string","messageId","text","transform","e","trim","optional","rating","number","min","max","edgehandler","req","evt","console","log","method","url","authorization","headers","get","Response","status","jwt","split","body","json","parsedBody","safeParse","success","data","res","createMessageFeedback","accessToken","Headers","set","fetch","URL","process","env","EXPERIMENTAL_CHAT_API_BASE_URL","toString","JSON","stringify","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","handler","api_utils","fd"],"sourceRoot":""}