{"pageProps":{"metadata":{"title":"Nomad Ingress Nginx | Integrations","description":"Provides ingress capability to Nomad jobs using Nginx as reverse proxy and configured via service tags or meta values."},"product":{"name":"Nomad","slug":"nomad","algoliaConfig":{"indexName":"product_NOMAD","searchOnlyApiKey":"9bfec34ea54e56a11bd50d6bfedc5e71"},"analyticsConfig":{"includedDomains":"nomadproject.io www.nomadproject.io","segmentWriteKey":"qW11yxgipKMsKFKQUCpTVgQUYftYsJj0"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Nomad by HashiCorp","description":"Nomad is a highly available, distributed, data-center aware cluster and application scheduler designed to support the modern datacenter with support for long-running services, batch jobs, and much more.","image":"https://www.nomadproject.io/nomad-public/img/og-image.png","icon":[{"href":"/nomad-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.2.5","subnavItems":[{"text":"Overview","url":"/","type":"inbound"},{"text":"Enterprise","url":"https://www.hashicorp.com/products/nomad/","type":"outbound"},"divider",{"text":"Tutorials","url":"https://developer.hashicorp.com/nomad/tutorials","type":"outbound"},{"text":"Docs","url":"/docs","type":"inbound"},{"text":"API","url":"/api-docs","type":"inbound"},{"text":"Plugins","url":"/plugins","type":"inbound"},{"text":"Tools","url":"/tools","type":"inbound"},{"text":"Community","url":"/community","type":"inbound"}],"basePaths":["docs","api-docs","plugins","tools","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"entry-point","name":"Intro","path":"intro"},{"iconName":"api","name":"API","path":"api-docs"},{"iconName":"terminal-screen","name":"Tools","path":"tools"},{"iconName":"plug","name":"Plugins","path":"plugins"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Nomad Integrations."}},"integration":{"id":"ba1c209f-5ca3-4554-adf1-af6dd43ce46e","slug":"nomad-ingress-nginx","name":"Nomad Ingress Nginx","description":"Provides ingress capability to Nomad jobs using Nginx as reverse proxy and configured via service tags or meta values.","license_type":null,"license_url":null,"external_only":false,"external_url":"https://www.nginx.com/","tier":"community","repo_url":"https://github.com/hashicorp/nomad-pack-community-registry","subdirectory":"/packs/nomad_ingress_nginx","created_at":"2023-05-17T17:27:25.809Z","updated_at":"2023-07-12T18:05:08.403Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"nomad","name":"Nomad","created_at":"2022-11-09T22:56:29.799Z","updated_at":"2022-11-09T22:56:29.799Z"},"versions":["0.0.1"],"components":[],"flags":[],"integration_type":{"id":"e8835871-6a6a-4836-8797-505cbfbe426a","product_id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"pack","name":"Pack","plural_name":"Packs","description":"Packs are templated sets of resources that are meant to be deployed to Nomad together. Each pack defines parameters that can be customized by the end user.","created_at":"2023-05-02T17:31:29.062Z","updated_at":"2023-05-17T22:44:11.429Z"}},"activeRelease":{"id":"0064549d-b299-4508-bbe5-3dfbd040d15f","integration_id":"ba1c209f-5ca3-4554-adf1-af6dd43ce46e","version":"0.0.1","readme":"This pack deploys an Nginx reverse proxy that is automatically configured to\nhandle traffic ingress to allocations based on service meta values and tags.\n\nJobs can register themselves in the ingress by annotating their services either\nusing `tags` or `meta` values.\n\n```hcl\nservice {\n  name = \"webapp\"\n  port = \"http\"\n\n  tags = [\n    \"nomad_ingress_enabled=true\",\n    \"nomad_ingress_hostname=webapp.example.com\",\n  ]\n}\n```\n\n```hcl\nservice {\n  name = \"webapp\"\n  port = \"http\"\n\n  meta {\n    nomad_ingress_enabled  = true\n    nomad_ingress_hostname = \"webapp.example.com\"\n  }\n}\n```\n\n## Dependencies\n\nThis pack requires a client with Docker installed and a working Consul cluster.\n\n## Getting started\n\nStart a local Nomad and Consul agent. If you are not on Linux, refer to this\n[FAQ entry][nomad_docs_faq] so your containers can communicate properly.\n\nThe Nginx ingress can use hostnames to route requests to the appropriate\nallocations. When testing locally, you can add entries to your `/etc/hosts` file\nto simulate entries in a DNS.\n\nIn this example, you will use the [`fake-service`] sample app, so add an entry\nlike this to your `/etc/hosts` file:\n\n```\n<YOUR_IP> fake.example.com\n```\n\nIf you are on Linux you can set `<YOUR_IP>` to `127.0.0.1`, otherwise use the IP\naddress defined in your Consul agent `-bind` configuration from the previous\nstep.\n\nWhen you access `fake.example.com` your system will resolve this hostname to\nyour own IP address.\n\nRun the Nginx ingress pack:\n\n```shell-session\n$ nomad-pack run nomad_ingress_nginx\n```\n\nNext, copy this sample `fake-service` job into a file called\n`fake-service.nomad` and run it:\n\n```hcl\njob \"fake-service\" {\n  datacenters = [\"dc1\"]\n\n  group \"fake-service\" {\n    count = 3\n\n    network {\n      port \"http\" {}\n    }\n\n    service {\n      name = \"fake-service\"\n      port = \"http\"\n    }\n\n    task \"fake-service\" {\n      driver = \"docker\"\n\n      config {\n        image = \"nicholasjackson/fake-service:v0.22.7\"\n        ports = [\"http\"]\n      }\n\n      env {\n        LISTEN_ADDR = \"0.0.0.0:${NOMAD_PORT_http}\"\n      }\n    }\n  }\n}\n```\n\n```shell-session\n$ nomad run fake-service.nomad\n```\n\nWithout an ingress it's hard to access this application, since each allocation\nwill have its own IP and port. That's where the ingress comes handy.\n\n#### Hostname ingress\n\nUpdate the `fake-service` job to add some `meta` values to the service and run\nthe job again:\n\n```diff\njob \"fake_service\" {\n  # ...\n  group \"fake-service\" {\n    # ...\n    service {\n      name = \"fake-service\"\n      port = \"http\"\n\n+     meta {\n+       nomad_ingress_enabled  = true\n+       nomad_ingress_hostname = \"fake.example.com\"\n+     }\n    }\n    # ...\n  }\n}\n```\n\n```shell-session\n$ nomad run fake-service.nomad\n```\n\nOpen your browser and navigate to http://fake.example.com and verify that your\napp is reachable.\n\n#### Path ingress\n\nYou can also route traffic using a specifc URL path. Update the service of\n`fake-service` like this:\n\n```diff\njob \"fake_service\" {\n  # ...\n  group \"fake-service\" {\n    # ...\n    service {\n      name = \"fake-service\"\n      port = \"http\"\n\n      meta {\n        nomad_ingress_enabled  = true\n-       nomad_ingress_hostname = \"fake.example.com\"\n+       nomad_ingress_path     = \"/fake\"\n      }\n    }\n    # ...\n  }\n}\n```\n\nOpen your browser and navigate to `http://<YOUR_IP>/fake` and verify that your\napp is reachable using a path now.\n\n#### Port ingress\n\nAnother option is to access services using different ports. This requires\nreconfiguring the `nomad_ingress_nginx` pack instance deployed earlier to\ninclude additional ports:\n\n```shell-session\n$ nomad-pack run -var 'nginx_extra_ports=[{name: \"fake-service\", port: 8080, host_network: \"\"}]' nomad_ingress_nginx\n```\n\nUpdate the `fake-service` job so that it uses the new port:\n\n```diff\njob \"fake_service\" {\n  # ...\n  group \"fake-service\" {\n    # ...\n    service {\n      name = \"fake-service\"\n      port = \"http\"\n\n      meta {\n        nomad_ingress_enabled = true\n-       nomad_ingress_path    = \"/fake\"\n+       nomad_ingress_port    = \"8080\"\n      }\n    }\n    # ...\n  }\n}\n```\n\nOpen your browser and navigate to `http://<YOUR_IP>:8080` and verify that your\napp is reachable using the new port.\n\n## Variables\n\n- `datacenters` `(list(string): [\"dc1\"])` - A list of datacenters in the region\n  which are eligible for task placement.\n- `job_name` `(string: \"\")` - The name to use as the job name. Defaults to the\n  pack name.\n- `job_type` `(string: \"system\")` - The scheduler type to use for the job.\n- `namespace` `(string: \"default\")` - The namespace where the job will be\n  placed\n- `region` `(string: \"global\")` - The region where the job will be placed.\n- `http_port` `(number: 80)` - The Nomad client port that routes to the Nginx\n  ingress.\n- `http_port_host_network` `(string: \"\")` - The Nomad client host network where\n  the `http_port` will be allocated.\n- `nginx_count` `(number: 1)` - The number of instances of the Nginx ingress to\n  run. Only used if `job_type` is `service`\n- `nginx_extra_ports` `(list(Port): [])` - List of additional ports to\n  assign to the Nginx ingress.\n- `nginx_image` `(string: \"nginx:1.21\")` - The Docker image to use for the Nginx\n  ingress.\n- `nginx_resources` `(Resources: { cpu: 200, memory: 256 })` - The\n  resources to assign to the Nginx ingress task.\n\n#### Port\n\n- `name` `(string)` - The label for the port.\n- `port` `(number)` - The port number.\n- `host_network` `(string)` - The Nomad client host network to assign this port.\n\n#### Resources\n\n- `cpu` `(number)` - The CPU requirement in MHz.\n- `memory` `(number)` - The memory requirement in MB.\n\n## Service keys\n\nThese are the `meta` and `tags` that you can use when configuring a service to\nuse the Nginx ingress.\n\n- `nomad_ingress_enabled` - Set this to `true` to register the service in the\n  ingress.\n- `nomad_ingress_hostname` - The hostname to use to route traffic to this\n  service.\n- `nomad_ingress_path` - The URL path to use to route traffic to this service.\n- `nomad_ingress_port` - The port to use to route traffic to this service.\n- `nomad_ingress_allow` - A string of comma-separated IPs or IP CIDR ranges that\n  are allowed to access this service.\n- `nomad_ingress_deny` - A string of comma-separated IPs or IP CIDR ranges that\n  are denied from accessing this service.\n\n[`fake-service`]: https://github.com/nicholasjackson/fake-service\n[nomad_docs_faq]: https://www.nomadproject.io/docs/faq#q-how-to-connect-to-my-host-network-when-using-docker-desktop-windows-and-macos\n","created_at":"2023-05-17T22:19:30.841Z","updated_at":"2023-05-17T22:19:30.841Z","components":[]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Nomad","url":"/nomad"},{"title":"Integrations","url":"/nomad/integrations"},{"title":"Nomad Ingress Nginx","url":"/nomad/integrations/hashicorp/nomad-ingress-nginx","isCurrentPage":true}],"anchorLinks":[{"id":"dependencies","level":2,"title":"Dependencies"},{"id":"getting-started","level":2,"title":"Getting started"},{"id":"hostname-ingress","level":4,"title":"Hostname ingress"},{"id":"path-ingress","level":4,"title":"Path ingress"},{"id":"port-ingress","level":4,"title":"Port ingress"},{"id":"variables","level":2,"title":"Variables"},{"id":"port","level":4,"title":"Port"},{"id":"resources","level":4,"title":"Resources"},{"id":"service-keys","level":2,"title":"Service keys"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,N=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var r=(a,n,s)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[n]=s,e=(a,n)=>{for(var s in n||(n={}))o.call(n,s)&&r(a,s,n[s]);if(t)for(var s of t(n))i.call(n,s)&&r(a,s,n[s]);return a},l=(a,n)=>N(a,d(n));var m=(a,n)=>{var s={};for(var p in a)o.call(a,p)&&n.indexOf(p)<0&&(s[p]=a[p]);if(a!=null&&t)for(var p of t(a))n.indexOf(p)<0&&i.call(a,p)&&(s[p]=a[p]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var p=s,{components:a}=p,n=m(p,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This pack deploys an Nginx reverse proxy that is automatically configured to\nhandle traffic ingress to allocations based on service meta values and tags.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Jobs can register themselves in the ingress by annotating their services either\nusing `,mdx(\"inlineCode\",{parentName:\"p\"},\"tags\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"meta\"),\" values.\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"service\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"webapp\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"port\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http\"'),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"tags\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nomad_ingress_enabled=true\"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nomad_ingress_hostname=webapp.example.com\"'),\",\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"service\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"webapp\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"port\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http\"'),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"meta\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"nomad_ingress_enabled\"),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"nomad_ingress_hostname\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"webapp.example.com\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h2\",e({},{id:\"user-content-dependencies\",\"data-text-content\":\"Dependencies\",className:\"g-type-display-3\"}),\"Dependencies\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This pack requires a client with Docker installed and a working Consul cluster.\"),mdx(\"h2\",e({},{id:\"user-content-getting-started\",\"data-text-content\":\"Getting started\",className:\"g-type-display-3\"}),\"Getting started\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Start a local Nomad and Consul agent. If you are not on Linux, refer to this\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.nomadproject.io/docs/faq#q-how-to-connect-to-my-host-network-when-using-docker-desktop-windows-and-macos\"}),\"FAQ entry\"),\" so your containers can communicate properly.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The Nginx ingress can use hostnames to route requests to the appropriate\nallocations. When testing locally, you can add entries to your `,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/hosts\"),` file\nto simulate entries in a DNS.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In this example, you will use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/nicholasjackson/fake-service\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"fake-service\")),` sample app, so add an entry\nlike this to your `,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/hosts\"),\" file:\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"<YOUR_IP> fake.example.com\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"If you are on Linux you can set \",mdx(\"inlineCode\",{parentName:\"p\"},\"<YOUR_IP>\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"127.0.0.1\"),`, otherwise use the IP\naddress defined in your Consul agent `,mdx(\"inlineCode\",{parentName:\"p\"},\"-bind\"),` configuration from the previous\nstep.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"When you access \",mdx(\"inlineCode\",{parentName:\"p\"},\"fake.example.com\"),` your system will resolve this hostname to\nyour own IP address.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Run the Nginx ingress pack:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"nomad-pack run nomad_ingress_nginx\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Next, copy this sample \",mdx(\"inlineCode\",{parentName:\"p\"},\"fake-service\"),` job into a file called\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"fake-service.nomad\"),\" and run it:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"job \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fake-service\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"datacenters\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"dc1\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`,\"  group \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fake-service\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"count\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"3\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"network\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      port \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"service\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fake-service\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"port\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"    task \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fake-service\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"driver\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"docker\"'),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"config\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"image\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nicholasjackson/fake-service:v0.22.7\"'),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"ports\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"env\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"LISTEN_ADDR\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"0.0.0.0:',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),\"NOMAD_PORT_http\",mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"nomad run fake-service.nomad\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Without an ingress it's hard to access this application, since each allocation\nwill have its own IP and port. That's where the ingress comes handy.`),mdx(\"h4\",e({},{id:\"user-content-hostname-ingress\",\"data-text-content\":\"Hostname ingress\",className:\"g-type-display-5\"}),\"Hostname ingress\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Update the \",mdx(\"inlineCode\",{parentName:\"p\"},\"fake-service\"),\" job to add some \",mdx(\"inlineCode\",{parentName:\"p\"},\"meta\"),` values to the service and run\nthe job again:`),mdx(\"pre\",e({},{className:\"language-diff\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-diff\"}),'job \"fake_service\" {',`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),' group \"fake-service\" {')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   service {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     name = \"fake-service\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     port = \"http\"')),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     meta {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"       nomad_ingress_enabled  = true\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'       nomad_ingress_hostname = \"fake.example.com\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" }\")),`\n`,\"}\",`\n`)),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"nomad run fake-service.nomad\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Open your browser and navigate to \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://fake.example.com\"}),\"http://fake.example.com\"),` and verify that your\napp is reachable.`),mdx(\"h4\",e({},{id:\"user-content-path-ingress\",\"data-text-content\":\"Path ingress\",className:\"g-type-display-5\"}),\"Path ingress\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You can also route traffic using a specifc URL path. Update the service of\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"fake-service\"),\" like this:\"),mdx(\"pre\",e({},{className:\"language-diff\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-diff\"}),'job \"fake_service\" {',`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),' group \"fake-service\" {')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   service {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     name = \"fake-service\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     port = \"http\"')),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     meta {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"       nomad_ingress_enabled  = true\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token deleted-sign deleted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix deleted\"}),\"-\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'       nomad_ingress_hostname = \"fake.example.com\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'       nomad_ingress_path     = \"/fake\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" }\")),`\n`,\"}\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Open your browser and navigate to \",mdx(\"inlineCode\",{parentName:\"p\"},\"http://<YOUR_IP>/fake\"),` and verify that your\napp is reachable using a path now.`),mdx(\"h4\",e({},{id:\"user-content-port-ingress\",\"data-text-content\":\"Port ingress\",className:\"g-type-display-5\"}),\"Port ingress\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Another option is to access services using different ports. This requires\nreconfiguring the `,mdx(\"inlineCode\",{parentName:\"p\"},\"nomad_ingress_nginx\"),` pack instance deployed earlier to\ninclude additional ports:`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"nomad-pack run -var \",mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),`'nginx_extra_ports=[{name: \"fake-service\", port: 8080, host_network: \"\"}]'`),\" nomad_ingress_nginx\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Update the \",mdx(\"inlineCode\",{parentName:\"p\"},\"fake-service\"),\" job so that it uses the new port:\"),mdx(\"pre\",e({},{className:\"language-diff\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-diff\"}),'job \"fake_service\" {',`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),' group \"fake-service\" {')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   service {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     name = \"fake-service\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'     port = \"http\"')),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     meta {\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"       nomad_ingress_enabled = true\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token deleted-sign deleted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix deleted\"}),\"-\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'       nomad_ingress_path    = \"/fake\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token inserted-sign inserted\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix inserted\"}),\"+\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),'       nomad_ingress_port    = \"8080\"')),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"     }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   }\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\"   # ...\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token unchanged\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token prefix unchanged\"}),\" \"),mdx(\"span\",e({parentName:\"span\"},{className:\"token line\"}),\" }\")),`\n`,\"}\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Open your browser and navigate to \",mdx(\"inlineCode\",{parentName:\"p\"},\"http://<YOUR_IP>:8080\"),` and verify that your\napp is reachable using the new port.`),mdx(\"h2\",e({},{id:\"user-content-variables\",\"data-text-content\":\"Variables\",className:\"g-type-display-3\"}),\"Variables\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"datacenters\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(list(string): [\"dc1\"])'),` - A list of datacenters in the region\nwhich are eligible for task placement.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"job_name\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"\")'),` - The name to use as the job name. Defaults to the\npack name.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"job_type\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"system\")'),\" - The scheduler type to use for the job.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"namespace\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"default\")'),` - The namespace where the job will be\nplaced`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"region\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"global\")'),\" - The region where the job will be placed.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"http_port\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(number: 80)\"),` - The Nomad client port that routes to the Nginx\ningress.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"http_port_host_network\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"\")'),` - The Nomad client host network where\nthe `,mdx(\"inlineCode\",{parentName:\"li\"},\"http_port\"),\" will be allocated.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nginx_count\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(number: 1)\"),` - The number of instances of the Nginx ingress to\nrun. Only used if `,mdx(\"inlineCode\",{parentName:\"li\"},\"job_type\"),\" is \",mdx(\"inlineCode\",{parentName:\"li\"},\"service\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nginx_extra_ports\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(list(Port): [])\"),` - List of additional ports to\nassign to the Nginx ingress.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nginx_image\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},'(string: \"nginx:1.21\")'),` - The Docker image to use for the Nginx\ningress.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nginx_resources\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(Resources: { cpu: 200, memory: 256 })\"),` - The\nresources to assign to the Nginx ingress task.`)),mdx(\"h4\",e({},{id:\"user-content-port\",\"data-text-content\":\"Port\",className:\"g-type-display-5\"}),\"Port\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"name\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(string)\"),\" - The label for the port.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"port\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(number)\"),\" - The port number.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"host_network\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(string)\"),\" - The Nomad client host network to assign this port.\")),mdx(\"h4\",e({},{id:\"user-content-resources\",\"data-text-content\":\"Resources\",className:\"g-type-display-5\"}),\"Resources\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"cpu\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(number)\"),\" - The CPU requirement in MHz.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"memory\"),\" \",mdx(\"inlineCode\",{parentName:\"li\"},\"(number)\"),\" - The memory requirement in MB.\")),mdx(\"h2\",e({},{id:\"user-content-service-keys\",\"data-text-content\":\"Service keys\",className:\"g-type-display-3\"}),\"Service keys\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"These are the \",mdx(\"inlineCode\",{parentName:\"p\"},\"meta\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"tags\"),` that you can use when configuring a service to\nuse the Nginx ingress.`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_enabled\"),\" - Set this to \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),` to register the service in the\ningress.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_hostname\"),` - The hostname to use to route traffic to this\nservice.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_path\"),\" - The URL path to use to route traffic to this service.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_port\"),\" - The port to use to route traffic to this service.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_allow\"),` - A string of comma-separated IPs or IP CIDR ranges that\nare allowed to access this service.`),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"nomad_ingress_deny\"),` - A string of comma-separated IPs or IP CIDR ranges that\nare denied from accessing this service.`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}