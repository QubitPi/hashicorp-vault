{"pageProps":{"metadata":{"title":"Tart Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"f591f780-5b5c-4f79-aa07-c32ebd078263","slug":"tart","name":"Tart","description":"Create macOS and Linux VMs for Apple Silicon powered by Tart virtualization.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/cirruslabs/packer-plugin-tart","subdirectory":"/.web-docs","created_at":"2023-08-14T20:21:39.545Z","updated_at":"2023-11-29T08:53:46.041Z","hide_versions":false,"organization":{"id":"e9e1ca8c-65f1-4e0a-b3f2-e5848639db34","slug":"cirruslabs","created_at":"2023-08-14T20:21:39.429Z","updated_at":"2023-08-14T20:21:39.429Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.10.0","1.9.0","1.8.1","1.8.0","1.7.0","1.6.1","0.0.0"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"a24958a9-52e9-47bb-b3b2-a5cfbafcf2bd","integration_id":"f591f780-5b5c-4f79-aa07-c32ebd078263","version":"1.10.0","readme":"\nThe `tart` builder is used to create macOS and Linux VMs for Apple Silicon powered by [Tart virtualization](https://github.com/cirruslabs/tart).\n\nHere are some highlights of Tart:\n\n- Tart uses Apple's own `Virtualization.Framework` for [near-native performance](https://browser.geekbench.com/v5/cpu/compare/14966395?baseline=14966339).\n- Push/Pull virtual machines from any OCI-compatible container registry.\n- Built-in CI integration.\n- Use this Tart Packer Plugin to automate VM creation.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://developer.hashicorp.com/packer/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    gridscale = {\n      version = \">= 1.6.1\"\n      source  = \"github.com/cirruslabs/tart\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/cirruslabs/tart\n```\n\n### Components\n\n#### Builders\n\n- [tart](/packer/integrations/cirruslabs/tart/latest/components/builder/tart) - The builder is used to create macOS and Linux VMs for Apple Silicon powered by [Tart virtualization](https://github.com/cirruslabs/tart).\n\n### Getting Started\n\nHere is how you can install Tart, pull a remote macOS virtual machine and run it:\n\n```bash\nbrew install cirruslabs/cli/tart\ntart clone ghcr.io/cirruslabs/macos-ventura-vanilla:latest ventura-vanilla\ntart run ventura-vanilla\n```\n\n","created_at":"2024-03-11T13:12:47.895Z","updated_at":"2024-03-11T13:12:47.895Z","components":[{"id":"c256ef44-9da5-4dea-8cd4-d77152b82950","integration_release_id":"a24958a9-52e9-47bb-b3b2-a5cfbafcf2bd","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `tart`\n\nThe `tart` builder is used to create macOS and Linux VMs for Apple Silicon powered by [Tart virtualization](https://github.com/cirruslabs/tart).\n\nHere are some highlights of Tart:\n\n- Tart uses Apple's own `Virtualization.Framework` for [near-native performance](https://browser.geekbench.com/v5/cpu/compare/14966395?baseline=14966339).\n- Push/Pull virtual machines from any OCI-compatible container registry.\n- Built-in CI integration.\n- Use this Tart Packer Plugin to automate VM creation.\n\n## How to get started with Tart\n\nHere is how you can install Tart, pull a remote macOS virtual machine and run it:\n\n```bash\nbrew install cirruslabs/cli/tart\ntart clone ghcr.io/cirruslabs/macos-ventura-vanilla:latest ventura-vanilla\ntart run ventura-vanilla\n```\n\nBelow we'll go through available options of this Packer plugin.\n\n<!-- Builder Configuration Fields -->\n\n### Required Configuration\n\n- `vm_name` (string) - The name of the VM to create (only when `from_ipsw`, `from_iso` or `vm_base_name` are used) and run.\n\n### Optional Configuration\n\n- `allow_insecure` (boolean) — When cloning the image, connect to the OCI registry via an insecure HTTP protocol.\n- `pull_concurrency` (boolean) — Amount of layers to pull concurrently from an OCI registry when pulling the image. Default is 4 for Tart 2.0.0+.\n- `cpu_count` (number) - Amount of virtual CPUs to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `create_grace_time` (duration string | ex: \"1h5m2s\") — Time to wait after finishing the installation process. Can be used to work around the issue when Virtualization.Framework's installation process is still running in the background for some time after `tart create` had already finished.\n- `disk_size_gb` — Disk size in GB to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `display` (string) — VM display resolution in a format of `<width>x<height>` (e.g. `1200x800`) to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `from_ipsw` (string) - Location of an IPSW file to initialize a macOS virtual machine from. Can be either an absolute path to a file on disk, URL to fetch a remote file or `latest`. Mutually exclusive with `from_iso` and `vm_base_name`.\n- `from_iso` (list(string)) - Location of the ISO files to initialize a Linux virtual machine from. All values should represent an absolute path to a file on disk. Mutually exclusive with `from_ipsw` and `vm_base_name`.\n- `headless` (bool) - Whether to show graphics interface of a VM. Useful for debugging the `boot_command`.\n- `memory_gb` (number) - Amount of unified memory in GB to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `recovery` (bool) — Whether to boot the VM in recovery mode. Useful for disabling the System Integrity Protection automatically for the already created VMs.\n- `rosetta` (string) - Whether to enable Rosetta support of a Linux guest VM. Useful for running non-arm64 binaries in the guest VM. A common used value is `rosetta`, for further details and explanation run `tart run --help`.\n- `run_extra_args` (list(string)) - Extra arguments to pass to `tart run` command. For example, you can enable bridged networking by specifying `--net-bridged=en0`.\n- `ip_extra_args` (list(string)) - Extra arguments to pass to `tart ip` command. For example, you can use a different resolver in case of bridged network by specifying `--resolver=arp`.\n- `vm_base_name` (string) - The name of the VM to be used for the initial cloning. Can be either a local VM or a remote VM that will be pulled from a registry. Mutually exclusive with `from_ipsw` and `from_iso`.\n\n### SSH connection configuration\n\n- `ssh_username` (string) - Username to use for the communication over SSH to run provision steps.\n- `ssh_password` (string) - Password to use for the communication over SSH to run provision steps.\n\n## HTTP server configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n\t`wget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg`\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Boot configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nFor more examples of various boot commands, see [`example/` directory](https://github.com/cirruslabs/packer-plugin-tart/tree/main/example) and [macOS Packer Templates for Cirrus CI](https://github.com/cirruslabs/macos-image-templates) project on GitHub.\n\n### VNC configuration\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot command \"typed\" character for character over a VNC connection to\nthe machine, simulating a human actually typing the keyboard.\n\nKeystrokes are typed as separate key up/down events over VNC with a default\n100ms delay. The delay alleviates issues with latency and CPU contention.\nYou can tune this delay on a per-builder basis by specifying\n\"boot_key_interval\" in your Packer template.\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `disable_vnc` (bool) - Whether to create a VNC connection or not. A boot_command cannot be used\n  when this is true. Defaults to false.\n\n- `boot_key_interval` (duration string | ex: \"1h5m2s\") - Time in ms to wait between each key press\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n### Example Usage\n\nHere is a basic example of creating a macOS virtual machine:\n\n```hcl\nvariable \"macos_version\" {\n  type =  string\n  default = \"ventura\"\n}\n\nsource \"tart-cli\" \"tart\" {\n  vm_base_name = \"${var.macos_version}-vanilla\"\n  vm_name      = \"${var.macos_version}-base\"\n  cpu_count    = 4\n  memory_gb    = 8\n  disk_size_gb = 50\n  ssh_username = \"admin\"\n  ssh_password = \"admin\"\n  ssh_timeout  = \"120s\"\n}\n\nbuild {\n  sources = [\"source.tart-cli.tart\"]\n\n  provisioner \"shell\" {\n    inline = [\"echo 'Disabling spotlight indexing...'\", \"sudo mdutil -a -i off\"]\n  }\n\n  # more provisioners\n}\n```\n\nFor more advanced examples, please referer to [this repository](https://github.com/cirruslabs/macos-image-templates).\n","created_at":"2024-03-11T13:12:49.295Z","updated_at":"2024-03-11T13:12:49.295Z","name":"Tart","slug":"tart","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"component":{"id":"c256ef44-9da5-4dea-8cd4-d77152b82950","integration_release_id":"a24958a9-52e9-47bb-b3b2-a5cfbafcf2bd","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `tart`\n\nThe `tart` builder is used to create macOS and Linux VMs for Apple Silicon powered by [Tart virtualization](https://github.com/cirruslabs/tart).\n\nHere are some highlights of Tart:\n\n- Tart uses Apple's own `Virtualization.Framework` for [near-native performance](https://browser.geekbench.com/v5/cpu/compare/14966395?baseline=14966339).\n- Push/Pull virtual machines from any OCI-compatible container registry.\n- Built-in CI integration.\n- Use this Tart Packer Plugin to automate VM creation.\n\n## How to get started with Tart\n\nHere is how you can install Tart, pull a remote macOS virtual machine and run it:\n\n```bash\nbrew install cirruslabs/cli/tart\ntart clone ghcr.io/cirruslabs/macos-ventura-vanilla:latest ventura-vanilla\ntart run ventura-vanilla\n```\n\nBelow we'll go through available options of this Packer plugin.\n\n<!-- Builder Configuration Fields -->\n\n### Required Configuration\n\n- `vm_name` (string) - The name of the VM to create (only when `from_ipsw`, `from_iso` or `vm_base_name` are used) and run.\n\n### Optional Configuration\n\n- `allow_insecure` (boolean) — When cloning the image, connect to the OCI registry via an insecure HTTP protocol.\n- `pull_concurrency` (boolean) — Amount of layers to pull concurrently from an OCI registry when pulling the image. Default is 4 for Tart 2.0.0+.\n- `cpu_count` (number) - Amount of virtual CPUs to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `create_grace_time` (duration string | ex: \"1h5m2s\") — Time to wait after finishing the installation process. Can be used to work around the issue when Virtualization.Framework's installation process is still running in the background for some time after `tart create` had already finished.\n- `disk_size_gb` — Disk size in GB to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `display` (string) — VM display resolution in a format of `<width>x<height>` (e.g. `1200x800`) to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `from_ipsw` (string) - Location of an IPSW file to initialize a macOS virtual machine from. Can be either an absolute path to a file on disk, URL to fetch a remote file or `latest`. Mutually exclusive with `from_iso` and `vm_base_name`.\n- `from_iso` (list(string)) - Location of the ISO files to initialize a Linux virtual machine from. All values should represent an absolute path to a file on disk. Mutually exclusive with `from_ipsw` and `vm_base_name`.\n- `headless` (bool) - Whether to show graphics interface of a VM. Useful for debugging the `boot_command`.\n- `memory_gb` (number) - Amount of unified memory in GB to use for the new VM. Overrides `tart create` default value when using `from_ipsw` and `from_iso` and VM settings when using `vm_base_name`.\n- `recovery` (bool) — Whether to boot the VM in recovery mode. Useful for disabling the System Integrity Protection automatically for the already created VMs.\n- `rosetta` (string) - Whether to enable Rosetta support of a Linux guest VM. Useful for running non-arm64 binaries in the guest VM. A common used value is `rosetta`, for further details and explanation run `tart run --help`.\n- `run_extra_args` (list(string)) - Extra arguments to pass to `tart run` command. For example, you can enable bridged networking by specifying `--net-bridged=en0`.\n- `ip_extra_args` (list(string)) - Extra arguments to pass to `tart ip` command. For example, you can use a different resolver in case of bridged network by specifying `--resolver=arp`.\n- `vm_base_name` (string) - The name of the VM to be used for the initial cloning. Can be either a local VM or a remote VM that will be pulled from a registry. Mutually exclusive with `from_ipsw` and `from_iso`.\n\n### SSH connection configuration\n\n- `ssh_username` (string) - Username to use for the communication over SSH to run provision steps.\n- `ssh_password` (string) - Password to use for the communication over SSH to run provision steps.\n\n## HTTP server configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n\t`wget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg`\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Boot configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nFor more examples of various boot commands, see [`example/` directory](https://github.com/cirruslabs/packer-plugin-tart/tree/main/example) and [macOS Packer Templates for Cirrus CI](https://github.com/cirruslabs/macos-image-templates) project on GitHub.\n\n### VNC configuration\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot command \"typed\" character for character over a VNC connection to\nthe machine, simulating a human actually typing the keyboard.\n\nKeystrokes are typed as separate key up/down events over VNC with a default\n100ms delay. The delay alleviates issues with latency and CPU contention.\nYou can tune this delay on a per-builder basis by specifying\n\"boot_key_interval\" in your Packer template.\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `disable_vnc` (bool) - Whether to create a VNC connection or not. A boot_command cannot be used\n  when this is true. Defaults to false.\n\n- `boot_key_interval` (duration string | ex: \"1h5m2s\") - Time in ms to wait between each key press\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n### Example Usage\n\nHere is a basic example of creating a macOS virtual machine:\n\n```hcl\nvariable \"macos_version\" {\n  type =  string\n  default = \"ventura\"\n}\n\nsource \"tart-cli\" \"tart\" {\n  vm_base_name = \"${var.macos_version}-vanilla\"\n  vm_name      = \"${var.macos_version}-base\"\n  cpu_count    = 4\n  memory_gb    = 8\n  disk_size_gb = 50\n  ssh_username = \"admin\"\n  ssh_password = \"admin\"\n  ssh_timeout  = \"120s\"\n}\n\nbuild {\n  sources = [\"source.tart-cli.tart\"]\n\n  provisioner \"shell\" {\n    inline = [\"echo 'Disabling spotlight indexing...'\", \"sudo mdutil -a -i off\"]\n  }\n\n  # more provisioners\n}\n```\n\nFor more advanced examples, please referer to [this repository](https://github.com/cirruslabs/macos-image-templates).\n","created_at":"2024-03-11T13:12:49.295Z","updated_at":"2024-03-11T13:12:49.295Z","name":"Tart","slug":"tart","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"how-to-get-started-with-tart","level":2,"title":"How to get started with Tart"},{"id":"required-configuration","level":3,"title":"Required Configuration"},{"id":"optional-configuration","level":3,"title":"Optional Configuration"},{"id":"ssh-connection-configuration","level":3,"title":"SSH connection configuration"},{"id":"http-server-configuration","level":2,"title":"HTTP server configuration"},{"id":"optional:","level":3,"title":"Optional:"},{"id":"boot-configuration","level":3,"title":"Boot configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"vnc-configuration","level":3,"title":"VNC configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"example-usage","level":3,"title":"Example Usage"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var l=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))s.call(n,t)&&l(a,t,n[t]);if(o)for(var t of o(n))p.call(n,t)&&l(a,t,n[t]);return a},r=(a,n)=>d(a,N(n));var m=(a,n)=>{var t={};for(var i in a)s.call(a,i)&&n.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&o)for(var i of o(a))n.indexOf(i)<0&&p.call(a,i)&&(t[i]=a[i]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:a}=i,n=m(i,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"tart\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"tart\"),\" builder is used to create macOS and Linux VMs for Apple Silicon powered by \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cirruslabs/tart\"}),\"Tart virtualization\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Here are some highlights of Tart:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Tart uses Apple's own \",mdx(\"inlineCode\",{parentName:\"li\"},\"Virtualization.Framework\"),\" for \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://browser.geekbench.com/v5/cpu/compare/14966395?baseline=14966339\"}),\"near-native performance\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Push/Pull virtual machines from any OCI-compatible container registry.\"),mdx(\"li\",{parentName:\"ul\"},\"Built-in CI integration.\"),mdx(\"li\",{parentName:\"ul\"},\"Use this Tart Packer Plugin to automate VM creation.\")),mdx(\"h2\",e({},{id:\"user-content-how-to-get-started-with-tart\",\"data-text-content\":\"How to get started with Tart\",className:\"g-type-display-3\"}),\"How to get started with Tart\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Here is how you can install Tart, pull a remote macOS virtual machine and run it:\"),mdx(\"pre\",e({},{className:\"language-bash\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),\"brew \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"install\"),\" cirruslabs/cli/tart\",`\n`,\"tart clone ghcr.io/cirruslabs/macos-ventura-vanilla:latest ventura-vanilla\",`\n`,\"tart run ventura-vanilla\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Below we'll go through available options of this Packer plugin.\"),mdx(\"h3\",e({},{id:\"user-content-required-configuration\",\"data-text-content\":\"Required Configuration\",className:\"g-type-display-4\"}),\"Required Configuration\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"vm_name\"),\" (string) - The name of the VM to create (only when \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" or \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\" are used) and run.\")),mdx(\"h3\",e({},{id:\"user-content-optional-configuration\",\"data-text-content\":\"Optional Configuration\",className:\"g-type-display-4\"}),\"Optional Configuration\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"allow_insecure\"),\" (boolean) \\u2014 When cloning the image, connect to the OCI registry via an insecure HTTP protocol.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"pull_concurrency\"),\" (boolean) \\u2014 Amount of layers to pull concurrently from an OCI registry when pulling the image. Default is 4 for Tart 2.0.0+.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"cpu_count\"),\" (number) - Amount of virtual CPUs to use for the new VM. Overrides \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart create\"),\" default value when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" and VM settings when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"create_grace_time\"),` (duration string | ex: \"1h5m2s\") \\u2014 Time to wait after finishing the installation process. Can be used to work around the issue when Virtualization.Framework's installation process is still running in the background for some time after `,mdx(\"inlineCode\",{parentName:\"li\"},\"tart create\"),\" had already finished.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"disk_size_gb\"),\" \\u2014 Disk size in GB to use for the new VM. Overrides \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart create\"),\" default value when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" and VM settings when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"display\"),\" (string) \\u2014 VM display resolution in a format of \",mdx(\"inlineCode\",{parentName:\"li\"},\"<width>x<height>\"),\" (e.g. \",mdx(\"inlineCode\",{parentName:\"li\"},\"1200x800\"),\") to use for the new VM. Overrides \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart create\"),\" default value when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" and VM settings when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" (string) - Location of an IPSW file to initialize a macOS virtual machine from. Can be either an absolute path to a file on disk, URL to fetch a remote file or \",mdx(\"inlineCode\",{parentName:\"li\"},\"latest\"),\". Mutually exclusive with \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" (list(string)) - Location of the ISO files to initialize a Linux virtual machine from. All values should represent an absolute path to a file on disk. Mutually exclusive with \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"headless\"),\" (bool) - Whether to show graphics interface of a VM. Useful for debugging the \",mdx(\"inlineCode\",{parentName:\"li\"},\"boot_command\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"memory_gb\"),\" (number) - Amount of unified memory in GB to use for the new VM. Overrides \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart create\"),\" default value when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\" and VM settings when using \",mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"recovery\"),\" (bool) \\u2014 Whether to boot the VM in recovery mode. Useful for disabling the System Integrity Protection automatically for the already created VMs.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"rosetta\"),\" (string) - Whether to enable Rosetta support of a Linux guest VM. Useful for running non-arm64 binaries in the guest VM. A common used value is \",mdx(\"inlineCode\",{parentName:\"li\"},\"rosetta\"),\", for further details and explanation run \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart run --help\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"run_extra_args\"),\" (list(string)) - Extra arguments to pass to \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart run\"),\" command. For example, you can enable bridged networking by specifying \",mdx(\"inlineCode\",{parentName:\"li\"},\"--net-bridged=en0\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ip_extra_args\"),\" (list(string)) - Extra arguments to pass to \",mdx(\"inlineCode\",{parentName:\"li\"},\"tart ip\"),\" command. For example, you can use a different resolver in case of bridged network by specifying \",mdx(\"inlineCode\",{parentName:\"li\"},\"--resolver=arp\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"vm_base_name\"),\" (string) - The name of the VM to be used for the initial cloning. Can be either a local VM or a remote VM that will be pulled from a registry. Mutually exclusive with \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_ipsw\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"from_iso\"),\".\")),mdx(\"h3\",e({},{id:\"user-content-ssh-connection-configuration\",\"data-text-content\":\"SSH connection configuration\",className:\"g-type-display-4\"}),\"SSH connection configuration\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ssh_username\"),\" (string) - Username to use for the communication over SSH to run provision steps.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ssh_password\"),\" (string) - Password to use for the communication over SSH to run provision steps.\")),mdx(\"h2\",e({},{id:\"user-content-http-server-configuration\",\"data-text-content\":\"HTTP server configuration\",className:\"g-type-display-3\"}),\"HTTP server configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Packer will create an http server serving \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Example usage from a builder:\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"`wget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg`\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` (string) - Path to a directory to serve using an HTTP server. The files in this\ndirectory will be available over HTTP that will be requestable from the\nvirtual machine. This is useful for hosting kickstart files and so on.\nBy default this is an empty string, which means no HTTP server will be\nstarted. The address and port of the HTTP server will be available as\nvariables in `,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),\". This is covered in more detail below.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),\" (map\",\"[string]\",\"string) - Key/Values to serve using an HTTP server. \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),` works like and\nconflicts with `,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),`. The keys represent the paths and the\nvalues contents, the keys must start with a slash, ex: `,mdx(\"inlineCode\",{parentName:\"p\"},\"/path/to/file\"),`.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),` is useful for hosting kickstart files and so on. By\ndefault this is empty, which means no HTTP server will be started. The\naddress and port of the HTTP server will be available as variables in\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),`. This is covered in more detail below.\nExample:`),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"http_content\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"/a/b\"'),\"     \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" file(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http/b\"'),\")\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"/foo/bar\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" templatefile(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"path\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"root\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'/preseed.cfg\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"packages\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nginx\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\")\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_port_min\"),` (int) - These are the minimum and maximum port to use for the HTTP server\nstarted to serve the `,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),`. Because Packer often runs in\nparallel, Packer will choose a randomly available port in this range to\nrun the HTTP server. If you want to force the HTTP server to be on one\nport, make this minimum and maximum port the same. By default the values\nare `,mdx(\"inlineCode\",{parentName:\"p\"},\"8000\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"9000\"),\", respectively.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_port_max\"),\" (int) - HTTP Port Max\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_bind_address\"),` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\nit will work with any network interface.`))),mdx(\"h3\",e({},{id:\"user-content-boot-configuration\",\"data-text-content\":\"Boot configuration\",className:\"g-type-display-4\"}),\"Boot configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The boot configuration is very important: \",mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`There are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<bs>\"),\" - Backspace\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<del>\"),\" - Delete\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<enter> <return>\"),' - Simulates an actual \"enter\" or \"return\" keypress.')),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<esc>\"),\" - Simulates pressing the escape key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<tab>\"),\" - Simulates pressing the tab key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<f1> - <f12>\"),\" - Simulates pressing a function key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<up> <down> <left> <right>\"),\" - Simulates pressing an arrow key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<spacebar>\"),\" - Simulates pressing the spacebar.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<insert>\"),\" - Simulates pressing the insert key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<home> <end>\"),\" - Simulates pressing the home and end keys.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<pageUp> <pageDown>\"),` - Simulates pressing the page up and page down\nkeys.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<menu>\"),\" - Simulates pressing the Menu key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftAlt> <rightAlt>\"),\" - Simulates pressing the alt key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftCtrl> <rightCtrl>\"),\" - Simulates pressing the ctrl key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftShift> <rightShift>\"),\" - Simulates pressing the shift key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftSuper> <rightSuper>\"),\" - Simulates pressing the \\u2318 or Windows key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<wait> <wait5> <wait10>\"),` - Adds a 1, 5 or 10 second pause before\nsending any additional keys. This is useful if you have to generally\nwait for the UI to update before typing more.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<waitXX>\"),` - Add an arbitrary pause before sending any additional keys.\nThe format of `,mdx(\"inlineCode\",{parentName:\"p\"},\"XX\"),` is a sequence of positive decimal numbers, each with\noptional fraction and a unit suffix, such as `,mdx(\"inlineCode\",{parentName:\"p\"},\"300ms\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"1.5h\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"2h45m\"),`.\nValid time units are `,mdx(\"inlineCode\",{parentName:\"p\"},\"ns\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"us\"),\" (or \",mdx(\"inlineCode\",{parentName:\"p\"},\"\\xB5s\"),\"), \",mdx(\"inlineCode\",{parentName:\"p\"},\"ms\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"s\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"m\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"h\"),`. For\nexample `,mdx(\"inlineCode\",{parentName:\"p\"},\"<wait10m>\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"<wait1m20s>\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<XXXOn> <XXXOff>\"),` - Any printable keyboard character, and of these\n\"special\" expressions, with the exception of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"<wait>\"),` types, can\nalso be toggled on or off. For example, to simulate ctrl+c, use\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"<leftCtrlOn>c<leftCtrlOff>\"),`. Be sure to release them, otherwise they\nwill be held down until the machine reboots. To hold the `,mdx(\"inlineCode\",{parentName:\"p\"},\"c\"),` key down,\nyou would use `,mdx(\"inlineCode\",{parentName:\"p\"},\"<cOn>\"),\". Likewise, \",mdx(\"inlineCode\",{parentName:\"p\"},\"<cOff>\"),\" to release.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .HTTPIP }} {{ .HTTPPort }}\"),` - The IP and port, respectively of an\nHTTP server that is started serving the directory specified by the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),\" configuration parameter. If \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` isn't\nspecified, these will be blank!`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .Name }}\"),\" - The name of the VM.\"))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Example boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<tab><wait>\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<tab><wait>\"'),\",\",`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The example shown below is a working boot command used to start an Ubuntu\n12.04 installer:`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<esc><esc><enter><wait>\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"/install/vmlinuz noapic \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hostname={{ .Name }} \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fb=false debconf/frontend=noninteractive \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/variant=USA console-setup/ask_detect=false \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"initrd=/install/initrd.gz -- <enter>\"'),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<esc><esc><enter><wait>\"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"/install/vmlinuz noapic \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hostname={{ .Name }} \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fb=false debconf/frontend=noninteractive \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/variant=USA console-setup/ask_detect=false \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"initrd=/install/initrd.gz -- <enter>\"'),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`For more examples of various boot commands, see the sample projects from our\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://packer.io/community-tools#templates\"}),\"community templates page\"),\".\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_keygroup_interval\"),` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\nshould be a duration. Examples are `,mdx(\"inlineCode\",{parentName:\"p\"},\"5s\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"1m30s\"),` which will cause\nPacker to wait five seconds and one minute 30 seconds, respectively. If\nthis isn't specified, a sensible default value is picked depending on\nthe builder type.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_wait\"),` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),`. The value of this should be a duration. Examples are\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5s\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"1m30s\"),` which will cause Packer to wait five seconds and one\nminute 30 seconds, respectively. If this isn't specified, the default is\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"10s\"),` or 10 seconds. To set boot_wait to 0s, use a negative number, such\nas \"-1s\"`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),` ([]string) - This is an array of commands to type when the virtual machine is first\nbooted. The goal of these commands should be to type just enough to\ninitialize the operating system installer. Special keys can be typed as\nwell, and are covered in the section below on the boot command. If this\nis not specified, it is assumed the installer will start itself.`))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"For more examples of various boot commands, see \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cirruslabs/packer-plugin-tart/tree/main/example\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"example/\"),\" directory\"),\" and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cirruslabs/macos-image-templates\"}),\"macOS Packer Templates for Cirrus CI\"),\" project on GitHub.\"),mdx(\"h3\",e({},{id:\"user-content-vnc-configuration\",\"data-text-content\":\"VNC configuration\",className:\"g-type-display-4\"}),\"VNC configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The boot command \"typed\" character for character over a VNC connection to\nthe machine, simulating a human actually typing the keyboard.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Keystrokes are typed as separate key up/down events over VNC with a default\n100ms delay. The delay alleviates issues with latency and CPU contention.\nYou can tune this delay on a per-builder basis by specifying\n\"boot_key_interval\" in your Packer template.`),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disable_vnc\"),` (bool) - Whether to create a VNC connection or not. A boot_command cannot be used\nwhen this is true. Defaults to false.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_key_interval\"),' (duration string | ex: \"1h5m2s\") - Time in ms to wait between each key press'))),mdx(\"h3\",e({},{id:\"user-content-example-usage\",\"data-text-content\":\"Example Usage\",className:\"g-type-display-4\"}),\"Example Usage\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Here is a basic example of creating a macOS virtual machine:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"variable\",mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),' \"macos_version\" ')),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"type\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\"  string\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"default\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ventura\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"tart-cli\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"tart\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vm_base_name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"var\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"macos_version\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'-vanilla\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vm_name\"),\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"var\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"macos_version\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'-base\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cpu_count\"),\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"4\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"memory_gb\"),\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"8\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"disk_size_gb\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"50\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"ssh_username\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"admin\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"ssh_password\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"admin\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"ssh_timeout\"),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"120s\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"source.tart-cli.tart\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"provisioner\",mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),' \"shell\" ')),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"inline\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),`\"echo 'Disabling spotlight indexing...'\"`),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"sudo mdutil -a -i off\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# more provisioners\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"For more advanced examples, please referer to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cirruslabs/macos-image-templates\"}),\"this repository\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"Tart","url":"/packer/integrations/cirruslabs/tart","isCurrentPage":false},{"title":"v1.10.0","url":"/packer/integrations/cirruslabs/tart/v1.10.0","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"Tart","url":"/packer/integrations/cirruslabs/tart/latest/components/builder/tart","isCurrentPage":true}]},"__N_SSG":true}