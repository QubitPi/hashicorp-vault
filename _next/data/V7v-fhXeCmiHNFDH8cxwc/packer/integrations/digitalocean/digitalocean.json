{"pageProps":{"metadata":{"title":"DigitalOcean | Integrations","description":"The DigitalOcean plugin can be used with HashiCorp Packer to create custom images for DigitalOcean."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"f661023a-3ac8-11ee-91e1-4230a3cb9c94","slug":"digitalocean","name":"DigitalOcean","description":"The DigitalOcean plugin can be used with HashiCorp Packer to create custom images for DigitalOcean.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"partner","repo_url":"https://github.com/digitalocean/packer-plugin-digitalocean","subdirectory":"/.web-docs","created_at":"2023-08-14T20:21:40.170Z","updated_at":"2024-02-12T18:47:00.159Z","hide_versions":false,"organization":{"id":"3ea122eb-28e6-4f33-be53-676acfa7a972","slug":"digitalocean","created_at":"2023-08-14T20:21:39.977Z","updated_at":"2023-08-14T20:21:39.977Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.3.0","1.2.2","0.0.0"],"components":[{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"},{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"9d983409-ff85-40c0-9eda-4e811138830a","integration_id":"f661023a-3ac8-11ee-91e1-4230a3cb9c94","version":"1.3.0","readme":"The [DigitalOcean](https://www.digitalocean.com/) Packer plugin provides a builder for building images in\nDigitalOcean, and a post-processor for importing already-existing images into\nDigitalOcean.\n\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    digitalocean = {\n      version = \">= 1.0.4\"\n      source  = \"github.com/digitalocean/digitalocean\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/digitalocean/digitalocean\n```\n\n### Components\n\n#### Builders\n\n- [digitalocean](/packer/integrations/digitalocean/digitalocean/latest/components/builder/digitalocean) - The builder takes a source image, runs any provisioning necessary on the image after launching it, then snapshots it into a reusable image. This reusable image can then be used as the foundation of new servers that are launched within DigitalOcean.\n\n#### Data Sources\n\n- [digitalocean-image](/packer/integrations/digitalocean/digitalocean/latest/components/datasource/image) - The DigitalOcean image data source is used look up the ID of an existing DigitalOcean image for use as a builder source.\n\n#### Post-processors\n\n- [digitalocean-import](/packer/integrations/digitalocean/digitalocean/latest/components/post-processor/import) -processor](/docs/post-processors/digitalocean-import.mdx) - The digitalocean-import post-processor is used to import images to DigitalOcean\n","created_at":"2024-02-13T19:20:45.499Z","updated_at":"2024-02-13T19:20:45.499Z","components":[{"id":"f3702250-04fb-45a5-93d5-eb6bb5a726e6","integration_release_id":"9d983409-ff85-40c0-9eda-4e811138830a","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `digitalocean`\nArtifact BuilderId: `pearkes.digitalocean`\n\nThe `digitalocean` Packer builder is able to create new images for use with\n[DigitalOcean](https://www.digitalocean.com). The builder takes a source image,\nruns any provisioning necessary on the image after launching it, then snapshots\nit into a reusable image. This reusable image can then be used as the\nfoundation of new servers that are launched within DigitalOcean.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/digitalocean/config.go; DO NOT EDIT MANUALLY -->\n\n- `api_token` (string) - The client TOKEN to use to access your account. It\n  can also be specified via environment variable DIGITALOCEAN_TOKEN, DIGITALOCEAN_ACCESS_TOKEN, or DIGITALOCEAN_API_TOKEN if\n  set. DIGITALOCEAN_API_TOKEN will be deprecated in a future release in favor of DIGITALOCEAN_TOKEN or DIGITALOCEAN_ACCESS_TOKEN.\n\n- `region` (string) - The name (or slug) of the region to launch the droplet\n  in. Consequently, this is the region where the snapshot will be available.\n  See\n  https://docs.digitalocean.com/reference/api/api-reference/#operation/list_all_regions\n  for the accepted region names/slugs.\n\n- `size` (string) - The name (or slug) of the droplet size to use. See\n  https://docs.digitalocean.com/reference/api/api-reference/#operation/list_all_sizes\n  for the accepted size names/slugs.\n\n- `image` (string) - The name (or slug) of the base image to use. This is the\n  image that will be used to launch a new droplet and provision it. See\n  https://docs.digitalocean.com/reference/api/api-reference/#operation/get_images_list\n  for details on how to get a list of the accepted image names/slugs.\n\n<!-- End of code generated from the comments of the Config struct in builder/digitalocean/config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/digitalocean/config.go; DO NOT EDIT MANUALLY -->\n\n- `api_url` (string) - Non standard api endpoint URL. Set this if you are\n  using a DigitalOcean API compatible service. It can also be specified via\n  environment variable DIGITALOCEAN_API_URL.\n\n- `http_retry_max` (\\*int) - The maximum number of retries for requests that fail with a 429 or 500-level error.\n  The default value is 5. Set to 0 to disable reties.\n\n- `http_retry_wait_max` (\\*float64) - The maximum wait time (in seconds) between failed API requests. Default: 30.0\n\n- `http_retry_wait_min` (\\*float64) - The minimum wait time (in seconds) between failed API requests. Default: 1.0\n\n- `private_networking` (bool) - Set to true to enable private networking\n  for the droplet being created. This defaults to false, or not enabled.\n\n- `monitoring` (bool) - Set to true to enable monitoring for the droplet\n  being created. This defaults to false, or not enabled.\n\n- `droplet_agent` (\\*bool) - A boolean indicating whether to install the DigitalOcean agent used for\n  providing access to the Droplet web console in the control panel. By\n  default, the agent is installed on new Droplets but installation errors\n  (i.e. OS not supported) are ignored. To prevent it from being installed,\n  set to false. To make installation errors fatal, explicitly set it to true.\n\n- `ipv6` (bool) - Set to true to enable ipv6 for the droplet being\n  created. This defaults to false, or not enabled.\n\n- `snapshot_name` (string) - The name of the resulting snapshot that will\n  appear in your account. Defaults to `packer-{{timestamp}}` (see\n  configuration templates for more info).\n\n- `snapshot_regions` ([]string) - Additional regions that resulting snapshot should be distributed to.\n\n- `wait_snapshot_transfer` (\\*bool) - When true, Packer will block until all snapshot transfers have been completed\n  and report errors. When false, Packer will initiate the snapshot transfers\n  and exit successfully without waiting for completion. Defaults to true.\n\n- `transfer_timeout` (duration string | ex: \"1h5m2s\") - How long to wait for a snapshot to be transferred to an additional region\n  before timing out. The default transfer timeout is \"30m\" (valid time units\n  include `s` for seconds, `m` for minutes, and `h` for hours).\n\n- `state_timeout` (duration string | ex: \"1h5m2s\") - The time to wait, as a duration string, for a\n  droplet to enter a desired state (such as \"active\") before timing out. The\n  default state timeout is \"6m\".\n\n- `snapshot_timeout` (duration string | ex: \"1h5m2s\") - How long to wait for the Droplet snapshot to complete before timing out.\n  The default snapshot timeout is \"60m\" (valid time units include `s` for\n  seconds, `m` for minutes, and `h` for hours).\n\n- `droplet_name` (string) - The name assigned to the droplet. DigitalOcean\n  sets the hostname of the machine to this value.\n\n- `user_data` (string) - User data to launch with the Droplet. Packer will\n  not automatically wait for a user script to finish before shutting down the\n  instance this must be handled in a provisioner.\n\n- `user_data_file` (string) - Path to a file that will be used for the user\n  data when launching the Droplet.\n\n- `tags` ([]string) - Tags to apply to the droplet when it is created\n\n- `vpc_uuid` (string) - UUID of the VPC which the droplet will be created in. Before using this,\n  private_networking should be enabled.\n\n- `connect_with_private_ip` (bool) - Wheter the communicators should use private IP or not (public IP in that case).\n  If the droplet is or going to be accessible only from the local network because\n  it is at behind a firewall, then communicators should use the private IP\n  instead of the public IP. Before using this, private_networking should be enabled.\n\n- `ssh_key_id` (int) - The ID of an existing SSH key on the DigitalOcean account. This should be\n  used in conjunction with `ssh_private_key_file`.\n\n<!-- End of code generated from the comments of the Config struct in builder/digitalocean/config.go; -->\n\n\n## Basic Example\n\nHere is a basic example. It is completely valid as soon as you enter your own\naccess tokens:\n\n**HCL2**\n\n```hcl\nsource \"digitalocean\" \"example\" {\n  api_token    = \"YOUR API KEY\"\n  image        = \"ubuntu-22-04-x64\"\n  region       = \"nyc3\"\n  size         = \"s-1vcpu-1gb\"\n  ssh_username = \"root\"\n}\n\nbuild {\n  sources = [\"source.digitalocean.example\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"type\": \"digitalocean\",\n  \"api_token\": \"YOUR API KEY\",\n  \"image\": \"ubuntu-22-04-x64\",\n  \"region\": \"nyc3\",\n  \"size\": \"s-1vcpu-1gb\",\n  \"ssh_username\": \"root\"\n}\n```\n\n\n### Communicator Config\n\nIn addition to the builder options, a\n[communicator](/docs/templates/legacy_json_templates/communicator) can be configured for this builder.\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n","created_at":"2024-02-13T19:20:47.235Z","updated_at":"2024-02-13T19:20:47.235Z","name":"DigitalOcean","slug":"digitalocean","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"5923313d-f9f5-406d-906f-54f2de062a90","integration_release_id":"9d983409-ff85-40c0-9eda-4e811138830a","component_id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","readme":null,"created_at":"2024-02-13T19:20:46.791Z","updated_at":"2024-02-13T19:20:46.791Z","name":"DigitalOcean Image","slug":"image","component":{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.255Z","updated_at":"2022-11-09T22:56:31.255Z"},"variable_groups":[]},{"id":"cef4fa29-988e-49ce-9803-ed03c676378e","integration_release_id":"9d983409-ff85-40c0-9eda-4e811138830a","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":null,"created_at":"2024-02-13T19:20:47.593Z","updated_at":"2024-02-13T19:20:47.593Z","name":"DigitalOcean Import","slug":"import","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"DigitalOcean","url":"/packer/integrations/digitalocean/digitalocean","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builders","level":4,"title":"Builders"},{"id":"data-sources","level":4,"title":"Data Sources"},{"id":"post-processors","level":4,"title":"Post-processors"}],"serializedREADME":{"compiledSource":"var d=Object.defineProperty,m=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var c=(e,n,t)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,a=(e,n)=>{for(var t in n||(n={}))i.call(n,t)&&c(e,t,n[t]);if(o)for(var t of o(n))p.call(n,t)&&c(e,t,n[t]);return e},r=(e,n)=>m(e,u(n));var l=(e,n)=>{var t={};for(var s in e)i.call(e,s)&&n.indexOf(s)<0&&(t[s]=e[s]);if(e!=null&&o)for(var s of o(e))n.indexOf(s)<0&&p.call(e,s)&&(t[s]=e[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:e}=s,n=l(s,[\"components\"]);return mdx(MDXLayout,r(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"The \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.digitalocean.com/\"}),\"DigitalOcean\"),` Packer plugin provides a builder for building images in\nDigitalOcean, and a post-processor for importing already-existing images into\nDigitalOcean.`),mdx(\"h3\",a({},{id:\"user-content-installation\",\"data-text-content\":\"Installation\",className:\"g-type-display-4\"}),\"Installation\"),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"To install this plugin, copy and paste this code into your Packer configuration, then run \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.packer.io/docs/commands/init\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"packer init\")),\".\"),mdx(\"pre\",a({},{className:\"language-hcl\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"packer\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"required_plugins\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",a({parentName:\"code\"},{className:\"token property\"}),\"digitalocean\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",a({parentName:\"code\"},{className:\"token property\"}),\"version\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\">= 1.0.4\"'),`\n`,\"      \",mdx(\"span\",a({parentName:\"code\"},{className:\"token property\"}),\"source\"),\"  \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"github.com/digitalocean/digitalocean\"'),`\n`,\"    \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"Alternatively, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"packer plugins install\"),\" to manage installation of this plugin.\"),mdx(\"pre\",a({},{className:\"language-sh\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-sh\"}),\"$ packer plugins install github.com/digitalocean/digitalocean\",`\n`)),mdx(\"h3\",a({},{id:\"user-content-components\",\"data-text-content\":\"Components\",className:\"g-type-display-4\"}),\"Components\"),mdx(\"h4\",a({},{id:\"user-content-builders\",\"data-text-content\":\"Builders\",className:\"g-type-display-5\"}),\"Builders\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"/packer/integrations/digitalocean/digitalocean/latest/components/builder/digitalocean\"}),\"digitalocean\"),\" - The builder takes a source image, runs any provisioning necessary on the image after launching it, then snapshots it into a reusable image. This reusable image can then be used as the foundation of new servers that are launched within DigitalOcean.\")),mdx(\"h4\",a({},{id:\"user-content-data-sources\",\"data-text-content\":\"Data Sources\",className:\"g-type-display-5\"}),\"Data Sources\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"/packer/integrations/digitalocean/digitalocean/latest/components/datasource/image\"}),\"digitalocean-image\"),\" - The DigitalOcean image data source is used look up the ID of an existing DigitalOcean image for use as a builder source.\")),mdx(\"h4\",a({},{id:\"user-content-post-processors\",\"data-text-content\":\"Post-processors\",className:\"g-type-display-5\"}),\"Post-processors\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"/packer/integrations/digitalocean/digitalocean/latest/components/post-processor/import\"}),\"digitalocean-import\"),\" -processor](/docs/post-processors/digitalocean-import.mdx) - The digitalocean-import post-processor is used to import images to DigitalOcean\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}