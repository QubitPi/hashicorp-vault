{"pageProps":{"metadata":{"title":"HashiCups Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"1cfc8fc9-3dc8-4d95-ae98-44857f2ed187","slug":"hashicups","name":"HashiCups","description":"The HashiCups plugin is a reference plugin for learning how to use HashiCorp Packer.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"official","repo_url":"https://github.com/hashicorp/packer-plugin-hashicups","subdirectory":"/.web-docs","created_at":"2023-06-15T19:02:49.206Z","updated_at":"2023-08-08T17:01:07.181Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.1","0.0.1"],"components":[{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources"},{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","slug":"provisioner","name":"Provisioner","plural_name":"Provisioners"},{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"}],"flags":[],"integration_type":null},"activeRelease":{"id":"62bdab97-f840-49d3-aa7d-f83b77db7039","integration_id":"1cfc8fc9-3dc8-4d95-ae98-44857f2ed187","version":"1.0.1","readme":"The HashiCups plugin is part of the [Packer](https://learn.hashicorp.com/packer) Learn collection.\nThe plugin interacts with the [HashiCorp Demo App API](https://github.com/hashicorp-demoapp/product-api-go) called HashiCups.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    hashicups = {\n      source  = \"github.com/hashicorp/hashicups\"\n      version = \"~> 1\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/hashicorp/hashicups\n```\n\n### Components\n\n#### Builders\n\n- [Order builder](/packer/integrations/hashicorp/hashicups/latest/components/builder/order) - The order builder is used to create custom HashiCups order.\n\n#### Provisioners\n\n- [Toppings provisioner](/packer/integrations/hashicorp/hashicups/latest/components/provisioner/toppings) - The toppings provisioner is used to add toppings to your order coffee(s).\n\n#### Post-processors\n\n- [Receipt post-processor](/packer/integrations/hashicorp/hashicups/latest/components/post-processor/receipt) - The receipt post-processor is used to\n  print the receipt of your order.\n\n#### Data Sources\n\n- [Coffees data source](/packer/integrations/hashicorp/hashicups/latest/components/data-source/coffees) - The coffees data source is used to\n  fetch all the coffees ids existent in the HashiCups menu.\n\n- [Ingredients data source](/packer/integrations/hashicorp/hashicups/latest/components/data-source/ingredients) - The ingredients data source is used to\n  fetch the ingredients ids for an existent coffee in the HashiCups menu.\n\n### The HashiCups menu and orders\n\nGet the available coffees:\n```shell\n$ curl -v localhost:19090/coffees | jq\n```\n\nThe following api call requires authorization.\n\nFirst, sign-in with previously created account:\n```shell\n$ curl -X POST localhost:19090/signin -d '{\"username\":\"education\", \"password\":\"test123\"}'\n```\n\nThen, export the returned JWT token to `HASHICUPS_TOKEN`:\n```shell\n$ export HASHICUPS_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MTU5ODcxNzgsInVzZXJfaWQiOjEsInVzZXJuYW1lIjoiZWR1Y2F0aW9uIn0.VJQXoxror-_ZUoNHtsG6GJ-bJCOvjU5kMZtXhSzBtP0\n```\nWith that, you can perform authorized calls.\n\nGet the ingredients for a coffee:\n\n````shell\n$ curl -X GET  -H \"Authorization: ${HASHICUPS_TOKEN}\" localhost:19090/coffees/1/ingredients | jq\n````\n\nGet the created orders:\n```shell\n$ curl -X GET  -H \"Authorization: ${HASHICUPS_TOKEN}\" localhost:19090/orders | jq\n```\n","created_at":"2023-07-26T17:48:35.867Z","updated_at":"2023-07-27T15:40:02.970Z","components":[{"id":"9751ec25-acf6-4e42-9da3-435bc8624a84","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","readme":"Type: `hashicups-coffees`\n\nThe coffees data source is used to fetch all the coffees ids existent in the HashiCups menu.\n\n## Required\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `username` (string) - The username signed up to the Product API.\n\n- `password` (string) - The password for the username signed up to the Product API.\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n## Optional\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `host` (string) - The Product API host URL. Defaults to `localhost:19090`\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n## OutPut\n\n- `map` (map[string]string) - A map of coffee name to coffee id.\n\n## Example Usage\n\n\n```hcl\ndata \"hashicups-coffees\" \"coffees\" {\n  username = \"education\"\n  password = \"test123\"\n}\n\nlocals {\n  vagrante_espresso = data.hashicups-coffees.coffees.map[\"Vagrante espresso\"]\n}\n\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n  item {\n    coffee {\n      id = local.vagrante_espresso\n      name = \"my custom vagrante\"\n      ingredient {\n        id = 1\n        quantity = 50\n      }\n    }\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n}\n```\n","created_at":"2023-07-26T17:48:36.623Z","updated_at":"2023-07-26T17:48:36.623Z","name":"Coffees","slug":"coffees","component":{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.255Z","updated_at":"2022-11-09T22:56:31.255Z"},"variable_groups":[]},{"id":"0ff5d343-ed15-43d3-82bb-90c78f3f69bd","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","readme":"Type: `hashicups-ingredients`\n\nThe ingredients data source is used to fetch the ingredients ids for an existent coffee in the HashiCups menu.\n\n## Required\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `username` (string) - The username signed up to the Product API.\n\n- `password` (string) - The password for the username signed up to the Product API.\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n- `coffee` (string) - The coffee id you would like to get the ingredient from. The ID should exist in the HashiCups menu.\n\n## Optional\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `host` (string) - The Product API host URL. Defaults to `localhost:19090`\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n## OutPut\n\n- `map` (map[string]string) - A map of ingredient name to ingredient id.\n\n## Example Usage\n\n```hcl\ndata \"hashicups-ingredients\" \"packer-ingredients\" {\n  username = \"education\"\n  password = \"test123\"\n  coffee = \"Packer Spiced Latte\"\n}\n\nlocals {\n  semi_skimmed_milk = data.hashicups-ingredients.packer-ingredients.map[\"Semi Skimmed Milk\"]\n}\n\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n item {\n    coffee {\n      id = 1\n      name = \"my custom packer spiced latter\"\n      ingredient {\n        id = local.semi_skimmed_milk\n        quantity = 200\n      }\n    }\n    quantity = 2\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n}\n```\n","created_at":"2023-07-26T17:48:36.877Z","updated_at":"2023-07-26T17:48:36.877Z","name":"Ingredients","slug":"ingredients","component":{"id":"4d1ac7a7-f708-453c-9663-16fa8b3e2e11","slug":"data-source","name":"Data Source","plural_name":"Data Sources","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.255Z","updated_at":"2022-11-09T22:56:31.255Z"},"variable_groups":[]},{"id":"82c05acf-0fda-4a33-8e52-d7be414955be","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `hashicups-order`\n\nThe order builder is used to create used to create custom HashiCups order. A custom order is when you want to change\nan ingredient quantity from one of the original coffees from the HashiCups menu. See [Example Usage](#example-usage) to\nunderstand better how it works.\n\n## Required\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `username` (string) - The username signed up to the Product API.\n\n- `password` (string) - The password for the username signed up to the Product API.\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n- `item` ([]OrderItem) - An item you would like to order. See the [order item configuration](#order-item-configuration).\n\n## Optional\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `host` (string) - The Product API host URL. Defaults to `localhost:19090`\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n## Order item configuration\n\n### Required\n\n- `coffee` ([]Coffee) - The item's coffee. See the [coffee configuration](#coffee-configuration).\n\n\n### Optional\n\n- `quantity` (int) - How many of the item you would like to order. Defaults to `1`.\n\n## Coffee configuration\n\n### Required\n\n- `id` (string) - The id of the coffee you would like to customize. The ID should exist in the HashiCups menu.\n- `name` (string) - The name of your customization. Should be different from the original coffee's name.\n- `ingredient` ([]Ingredient) - The ingredients you'd like to change the quantity of.\nSee the [ingredient configuration](#ingredient-configuration).\n\n## Ingredient configuration\n\n### Required\n\n- `id` (string) - The id of the coffee ingredient you would like to customize. The ID should exist in the HashiCups menu.\n- `quantity` (int) - The new quantity amount you'd like your coffee to have from the ingredient.\n\n\n### Example Usage\n\nIn the HashiCups menu you can find a Packer Spiced Latter (id 1) with **40ml** of espresso (id 1) and **300ml** of semi skimmed milk (id 2).\nLet's pretend you want to customized it to have **50ml** of espresso and **200ml** of semi skimmed milk instead. Also, you would like\nto order two of that.\nYour packer configuration will be:\n\n```hcl\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n  item {\n    coffee {\n      id = 1\n      name = \"My Custom Packer Spiced Latter\"\n      ingredient {\n        id = 1\n        quantity = 50\n      }\n      ingredient {\n        id = 2\n        quantity = 200\n      }\n    }\n    quantity = 2\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n}\n```\n","created_at":"2023-07-26T17:48:37.095Z","updated_at":"2023-07-26T17:48:37.095Z","name":"Order","slug":"order","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"1d093648-6345-41ed-bdd2-d30d7a70a4ac","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","readme":"Type: `hashicups-toppings`\n\nThe toppings provisioner is used to add toppings to your order coffee(s).\n\n## Required\n\n- `toppings` ([]string) - Any toppings you would like to pour on top of the ordered coffees.\n\n## Example Usage\n\n\n```hcl\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n  item {\n    coffee {\n      id = 1\n      name = \"My Custom Packer Spiced Latter\"\n      ingredient {\n        id = 1\n        quantity = 50\n      }\n    }\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n\n  provisioner \"hashicups-toppings\" {\n    toppings = [\"cinnamon\", \"marshmallow\", \"chocolate\", \"sprinkles\"]\n  }\n}\n```\n","created_at":"2023-07-26T17:48:37.317Z","updated_at":"2023-07-26T17:48:37.317Z","name":"Toppings","slug":"toppings","component":{"id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","slug":"provisioner","name":"Provisioner","plural_name":"Provisioners","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.054Z","updated_at":"2022-11-09T22:56:31.054Z"},"variable_groups":[]},{"id":"d116469f-7564-4bd9-8f17-37b4d8a86e65","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":"Type: `hashicups-receipt`\n\nThe receipt post-processor is used to print the receipt of your order.\n\n## Optional\n\n- `filename` (string) - The receipt file name. Should not include the extension. Defaults to `receipt`.\n- `format` (string) - The receipt format. Should be `pdf` or `txt`. Defaults to `pdf`.\n\n## Example Usage\n\n```hcl\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n  item {\n    coffee {\n      id = 1\n      name = \"My Custom Packer Spiced Latter\"\n      ingredient {\n        id = 1\n        quantity = 50\n      }\n    }\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n\n  post-processor \"hashicups-receipt\" {\n    format = \"pdf\"\n  }\n}\n```\n","created_at":"2023-07-26T17:48:37.597Z","updated_at":"2023-07-26T17:48:37.597Z","name":"Receipt","slug":"receipt","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]}]},"component":{"id":"82c05acf-0fda-4a33-8e52-d7be414955be","integration_release_id":"62bdab97-f840-49d3-aa7d-f83b77db7039","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `hashicups-order`\n\nThe order builder is used to create used to create custom HashiCups order. A custom order is when you want to change\nan ingredient quantity from one of the original coffees from the HashiCups menu. See [Example Usage](#example-usage) to\nunderstand better how it works.\n\n## Required\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `username` (string) - The username signed up to the Product API.\n\n- `password` (string) - The password for the username signed up to the Product API.\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n- `item` ([]OrderItem) - An item you would like to order. See the [order item configuration](#order-item-configuration).\n\n## Optional\n\n<!-- Code generated from the comments of the AuthConfig struct in common/auth.go; DO NOT EDIT MANUALLY -->\n\n- `host` (string) - The Product API host URL. Defaults to `localhost:19090`\n\n<!-- End of code generated from the comments of the AuthConfig struct in common/auth.go; -->\n\n\n## Order item configuration\n\n### Required\n\n- `coffee` ([]Coffee) - The item's coffee. See the [coffee configuration](#coffee-configuration).\n\n\n### Optional\n\n- `quantity` (int) - How many of the item you would like to order. Defaults to `1`.\n\n## Coffee configuration\n\n### Required\n\n- `id` (string) - The id of the coffee you would like to customize. The ID should exist in the HashiCups menu.\n- `name` (string) - The name of your customization. Should be different from the original coffee's name.\n- `ingredient` ([]Ingredient) - The ingredients you'd like to change the quantity of.\nSee the [ingredient configuration](#ingredient-configuration).\n\n## Ingredient configuration\n\n### Required\n\n- `id` (string) - The id of the coffee ingredient you would like to customize. The ID should exist in the HashiCups menu.\n- `quantity` (int) - The new quantity amount you'd like your coffee to have from the ingredient.\n\n\n### Example Usage\n\nIn the HashiCups menu you can find a Packer Spiced Latter (id 1) with **40ml** of espresso (id 1) and **300ml** of semi skimmed milk (id 2).\nLet's pretend you want to customized it to have **50ml** of espresso and **200ml** of semi skimmed milk instead. Also, you would like\nto order two of that.\nYour packer configuration will be:\n\n```hcl\nsource \"hashicups-order\" \"my-custom-order\" {\n  username = \"education\"\n  password = \"test123\"\n\n  item {\n    coffee {\n      id = 1\n      name = \"My Custom Packer Spiced Latter\"\n      ingredient {\n        id = 1\n        quantity = 50\n      }\n      ingredient {\n        id = 2\n        quantity = 200\n      }\n    }\n    quantity = 2\n  }\n}\n\nbuild {\n  sources = [\"sources.hashicups-order.my-custom-order\"]\n}\n```\n","created_at":"2023-07-26T17:48:37.095Z","updated_at":"2023-07-26T17:48:37.095Z","name":"Order","slug":"order","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"required","level":2,"title":"Required"},{"id":"optional","level":2,"title":"Optional"},{"id":"order-item-configuration","level":2,"title":"Order item configuration"},{"id":"required","level":3,"title":"Required"},{"id":"optional","level":3,"title":"Optional"},{"id":"coffee-configuration","level":2,"title":"Coffee configuration"},{"id":"required","level":3,"title":"Required"},{"id":"ingredient-configuration","level":2,"title":"Ingredient configuration"},{"id":"required","level":3,"title":"Required"},{"id":"example-usage","level":3,"title":"Example Usage"}],"serializedREADME":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?m(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&r(a,t,n[t]);if(s)for(var t of s(n))i.call(n,t)&&r(a,t,n[t]);return a},c=(a,n)=>d(a,u(n));var l=(a,n)=>{var t={};for(var o in a)p.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&s)for(var o of s(a))n.indexOf(o)<0&&i.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=l(o,[\"components\"]);return mdx(MDXLayout,c(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"hashicups-order\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The order builder is used to create used to create custom HashiCups order. A custom order is when you want to change\nan ingredient quantity from one of the original coffees from the HashiCups menu. See `,mdx(\"a\",e({parentName:\"p\"},{href:\"#example-usage\"}),\"Example Usage\"),` to\nunderstand better how it works.`),mdx(\"h2\",e({},{id:\"user-content-required\",\"data-text-content\":\"Required\",className:\"g-type-display-3\"}),\"Required\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"username\"),\" (string) - The username signed up to the Product API.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"password\"),\" (string) - The password for the username signed up to the Product API.\"))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"item\"),\" ([]OrderItem) - An item you would like to order. See the \",mdx(\"a\",e({parentName:\"li\"},{href:\"#order-item-configuration\"}),\"order item configuration\"),\".\")),mdx(\"h2\",e({},{id:\"user-content-optional\",\"data-text-content\":\"Optional\",className:\"g-type-display-3\"}),\"Optional\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"host\"),\" (string) - The Product API host URL. Defaults to \",mdx(\"inlineCode\",{parentName:\"li\"},\"localhost:19090\"))),mdx(\"h2\",e({},{id:\"user-content-order-item-configuration\",\"data-text-content\":\"Order item configuration\",className:\"g-type-display-3\"}),\"Order item configuration\"),mdx(\"h3\",e({},{id:\"user-content-required\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"coffee\"),\" ([]Coffee) - The item's coffee. See the \",mdx(\"a\",e({parentName:\"li\"},{href:\"#coffee-configuration\"}),\"coffee configuration\"),\".\")),mdx(\"h3\",e({},{id:\"user-content-optional\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"quantity\"),\" (int) - How many of the item you would like to order. Defaults to \",mdx(\"inlineCode\",{parentName:\"li\"},\"1\"),\".\")),mdx(\"h2\",e({},{id:\"user-content-coffee-configuration\",\"data-text-content\":\"Coffee configuration\",className:\"g-type-display-3\"}),\"Coffee configuration\"),mdx(\"h3\",e({},{id:\"user-content-required\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" (string) - The id of the coffee you would like to customize. The ID should exist in the HashiCups menu.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"name\"),\" (string) - The name of your customization. Should be different from the original coffee's name.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ingredient\"),` ([]Ingredient) - The ingredients you'd like to change the quantity of.\nSee the `,mdx(\"a\",e({parentName:\"li\"},{href:\"#ingredient-configuration\"}),\"ingredient configuration\"),\".\")),mdx(\"h2\",e({},{id:\"user-content-ingredient-configuration\",\"data-text-content\":\"Ingredient configuration\",className:\"g-type-display-3\"}),\"Ingredient configuration\"),mdx(\"h3\",e({},{id:\"user-content-required\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"id\"),\" (string) - The id of the coffee ingredient you would like to customize. The ID should exist in the HashiCups menu.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"quantity\"),\" (int) - The new quantity amount you'd like your coffee to have from the ingredient.\")),mdx(\"h3\",e({},{id:\"user-content-example-usage\",\"data-text-content\":\"Example Usage\",className:\"g-type-display-4\"}),\"Example Usage\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In the HashiCups menu you can find a Packer Spiced Latter (id 1) with \",mdx(\"strong\",{parentName:\"p\"},\"40ml\"),\" of espresso (id 1) and \",mdx(\"strong\",{parentName:\"p\"},\"300ml\"),` of semi skimmed milk (id 2).\nLet's pretend you want to customized it to have `,mdx(\"strong\",{parentName:\"p\"},\"50ml\"),\" of espresso and \",mdx(\"strong\",{parentName:\"p\"},\"200ml\"),` of semi skimmed milk instead. Also, you would like\nto order two of that.\nYour packer configuration will be:`),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hashicups-order\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"my-custom-order\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"username\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"education\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"password\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"test123\"'),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"item\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"coffee\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"id\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"My Custom Packer Spiced Latter\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"ingredient\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"id\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"quantity\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"50\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"ingredient\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"id\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"quantity\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"200\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"quantity\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"2\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"sources.hashicups-order.my-custom-order\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"HashiCups","url":"/packer/integrations/hashicorp/hashicups","isCurrentPage":false},{"title":"v1.0.1","url":"/packer/integrations/hashicorp/hashicups/v1.0.1","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"Order","url":"/packer/integrations/hashicorp/hashicups/latest/components/builder/order","isCurrentPage":true}]},"__N_SSG":true}