{"pageProps":{"metadata":{"title":"HyperOne | Integrations","description":"The HyperOne plugin can be used with HashiCorp Packer to create custom images on HyperOne."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"a22ad273-74d5-4351-aa16-f0006cf703ff","slug":"hyperone","name":"HyperOne","description":"The HyperOne plugin can be used with HashiCorp Packer to create custom images on HyperOne.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/hashicorp/packer-plugin-hyperone","subdirectory":"/.web-docs","created_at":"2023-06-15T19:02:50.652Z","updated_at":"2023-08-08T17:01:08.709Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.1"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[{"id":"f4e58404-7575-4876-bdb6-407697b6e335","slug":"archived","name":"Archived","description":"This integration is no longer maintained","created_at":"2022-11-09T22:56:30.570Z","updated_at":"2022-11-09T22:56:30.570Z"}],"integration_type":null},"activeRelease":{"id":"670157e8-d59c-4779-b9af-7ca888ff684d","integration_id":"a22ad273-74d5-4351-aa16-f0006cf703ff","version":"1.0.1","readme":"The HyperOne Plugin is able to create new images on the HyperOne platform.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    hyperone = {\n      source  = \"github.com/hashicorp/hyperone\"\n      version = \"~> 1\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/hyperone\n```\n\n### Components\n\n#### Builders\n\n- [hyperone](/packer/integrations/hashicorp/hyperone/latest/components/builder/hyperone) - The hyperone builder takes a source image, runs any\nprovisioning necessary on the image after launching it, then creates a reusable image.\n\n### Authentication\n\nHyperOne supports several authentication methods, which are all supported by\nthis builder.\n\n#### User session\n\nIf using user session, set the `token` field to your authentication token.\nThe `project` field is required when using this method.\n\n```json\n{\n  \"token\": \"YOUR TOKEN\",\n  \"project\": \"YOUR_PROJECT\"\n}\n```\n\n#### User session by SSH key\n\nIf you've added an SSH key as a credential to your user account and the\nprivate key is added to the ssh-agent on your local machine, you can\nauthenticate by setting just the platform login (your e-mail address):\n\n```json\n{\n  \"token_login\": \"your.user@example.com\"\n}\n```\n\n#### h1 CLI\n\nIf you're using [h1-cli](https://github.com/hyperonecom/h1-cli) on your local\nmachine, HyperOne builder can use your credentials saved in a config file.\n\nAll you have to do is login within the tool:\n\n```shell-session\n$ h1 login --username your.user@example.com\n```\n\nYou don't have to set `token` or `project` fields at all using this method.\n\n#### Service account\n\nUsing `h1`, you can create a new token associated with chosen project.\n\n```shell-session\n$ h1 project token add --name packer-builder --project PROJECT_ID\n```\n\nSet the `token` field to the generated token or save it in the `HYPERONE_TOKEN`\nenvironment variable. You don't have to set the `project` option using this\nmethod.\n\n```json\n{\n  \"token\": \"YOUR TOKEN\"\n}\n```\n","created_at":"2023-06-15T20:34:51.176Z","updated_at":"2023-08-30T22:36:33.316Z","components":[{"id":"7851f36d-f2e0-446e-a593-66a2465d37b2","integration_release_id":"670157e8-d59c-4779-b9af-7ca888ff684d","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `hyperone`\nArtifact BuilderId: `hyperone.builder`\n\nThe `hyperone` Packer builder is able to create new images on the [HyperOne\nplatform](http://www.hyperone.com/). The builder takes a source image, runs\nany provisioning necessary on the image after launching it, then creates a\nreusable image.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n- `disk_size` (float) - Size of the created disk, in GiB.\n\n- `project` (string) - The id or name of the project. This field is required\n  only if using session tokens. It should be skipped when using service\n  account authentication.\n\n- `source_image` (string) - ID or name of the image to launch server from.\n\n- `token` (string) - The authentication token used to access your account.\n  This can be either a session token or a service account token.\n  If not defined, the builder will attempt to find it in the following order:\n\n  - In `HYPERONE_TOKEN` environment variable.\n  - In `~/.h1-cli/conf.json` config file used by [h1-cli](https://github.com/hyperonecom/h1-cli).\n  - By using SSH authentication if `token_login` variable has been set.\n\n- `vm_type` (string) - ID or name of the type this server should be created with.\n\n### Optional:\n\n- `api_url` (string) - Custom API endpoint URL, compatible with HyperOne.\n  It can also be specified via environment variable `HYPERONE_API_URL`.\n\n- `disk_name` (string) - The name of the created disk.\n\n- `disk_type` (string) - The type of the created disk. Defaults to `ssd`.\n\n- `image_description` (string) - The description of the resulting image.\n\n- `image_name` (string) - The name of the resulting image. Defaults to\n  `packer-{{timestamp}}`\n  (see [configuration templates](/packer/docs/templates/legacy_json_templates/engine) for more info).\n\n- `image_service` (string) - The service of the resulting image.\n\n- `image_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created image.\n\n- `network` (string) - The ID of the network to attach to the created server.\n\n- `private_ip` (string) - The ID of the private IP within chosen `network`\n  that should be assigned to the created server.\n\n- `public_ip` (string) - The ID of the public IP that should be assigned to\n  the created server. If `network` is chosen, the public IP will be associated\n  with server's private IP.\n\n- `public_netadp_service` (string) - Custom service of public network adapter.\n  Can be useful when using custom `api_url`. Defaults to `public`.\n\n- `ssh_keys` (array of strings) - List of SSH keys by name or id to be added\n  to the server on launch.\n\n- `state_timeout` (string) - Timeout for waiting on the API to complete\n  a request. Defaults to 5m.\n\n- `token_login` (string) - Login (an e-mail) on HyperOne platform. Set this\n  if you want to fetch the token by SSH authentication.\n\n- `user_data` (string) - User data to launch with the server. Packer will not\n  automatically wait for a user script to finish before shutting down the\n  instance, this must be handled in a provisioner.\n\n- `vm_name` (string) - The name of the created server.\n\n- `vm_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created server.\n\n## Chroot disk\n\n### Required:\n\n- `chroot_disk` (bool) - Set to `true` to enable chroot disk build.\n\n- `pre_mount_commands` (array of strings) - A series of commands to execute\n  before mounting the chroot. This should include any partitioning and\n  filesystem creation commands. The path to the device is provided by\n  `{{.Device}}`.\n\n### Optional:\n\n- `chroot_command_wrapper` (string) - How to run shell commands. This defaults\n  to `{{.Command}}`. This may be useful to set if you want to set\n  environment variables or run commands with `sudo`.\n\n- `chroot_copy_files` (array of strings) - Paths to files on the running VM\n  that will be copied into the chroot environment before provisioning.\n  Defaults to `/etc/resolv.conf` so that DNS lookups work.\n\n- `chroot_device` (string) - The path of chroot device. Defaults an attempt is\n  made to identify it based on the attach location.\n\n- `chroot_disk_size` (float) - The size of the chroot disk in GiB. Defaults\n  to `disk_size`.\n\n- `chroot_disk_type` (string) - The type of the chroot disk. Defaults to\n  `disk_type`.\n\n- `chroot_mount_path` (string) - The path on which the device will be mounted.\n\n- `chroot_mounts` (array of strings) - A list of devices to mount into the\n  chroot environment. This is a list of 3-element tuples, in order:\n\n  - The filesystem type. If this is \"bind\", then Packer will properly bind the\n    filesystem to another mount point.\n\n  - The source device.\n\n  - The mount directory.\n\n- `mount_options` (array of tuples) - Options to supply the `mount` command\n  when mounting devices. Each option will be prefixed with `-o` and supplied\n  to the `mount` command.\n\n- `mount_partition` (string) - The partition number containing the / partition.\n  By default this is the first partition of the volume (for example, sdb1).\n\n- `post_mount_commands` (array of strings) - As `pre_mount_commands`, but the\n  commands are executed after mounting the root device and before the extra\n  mount and copy steps. The device and mount path are provided by\n  `{{.Device}}` and `{{.MountPath}}`.\n\n## Basic Example\n\nHere is a basic example. It is completely valid as soon as you enter your own\ntoken.\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10\n}\n```\n\n## Chroot Example\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10,\n  \"chroot_disk\": true,\n  \"pre_mount_commands\": [\n    \"apt-get update\",\n    \"apt-get install debootstrap\",\n    \"debootstrap --arch amd64 bionic {{.MountPath}}\"\n  ]\n}\n```\n\n## HCL Example\n\n```hcl\nvariable \"token\" {\n  type = string\n}\n\nvariable \"project\" {\n  type = string\n}\n\nsource \"hyperone\" \"new-syntax\" {\n  token = var.token\n  project = var.project\n  source_image = \"debian\"\n  disk_size = 10\n  vm_type = \"a1.nano\"\n  image_name = \"packerbats-hcl-{{timestamp}}\"\n  image_tags = {\n      key=\"value\"\n  }\n}\n\nbuild {\n  sources = [\n    \"source.hyperone.new-syntax\"\n  ]\n\n  provisioner \"shell\" {\n    inline = [\n      \"apt-get update\",\n      \"apt-get upgrade -y\"\n    ]\n  }\n}\n```\n","created_at":"2023-06-15T20:34:51.996Z","updated_at":"2023-07-27T14:54:39.443Z","name":"HyperOne","slug":"hyperone","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"HyperOne","url":"/packer/integrations/hashicorp/hyperone","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builders","level":4,"title":"Builders"},{"id":"authentication","level":3,"title":"Authentication"},{"id":"user-session","level":4,"title":"User session"},{"id":"user-session-by-ssh-key","level":4,"title":"User session by SSH key"},{"id":"h1-cli","level":4,"title":"h1 CLI"},{"id":"service-account","level":4,"title":"Service account"}],"serializedREADME":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable;var r=(a,n,s)=>n in a?m(a,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[n]=s,e=(a,n)=>{for(var s in n||(n={}))p.call(n,s)&&r(a,s,n[s]);if(o)for(var s of o(n))c.call(n,s)&&r(a,s,n[s]);return a},l=(a,n)=>d(a,N(n));var i=(a,n)=>{var s={};for(var t in a)p.call(a,t)&&n.indexOf(t)<0&&(s[t]=a[t]);if(a!=null&&o)for(var t of o(a))n.indexOf(t)<0&&c.call(a,t)&&(s[t]=a[t]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var t=s,{components:a}=t,n=i(t,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The HyperOne Plugin is able to create new images on the HyperOne platform.\"),mdx(\"h3\",e({},{id:\"user-content-installation\",\"data-text-content\":\"Installation\",className:\"g-type-display-4\"}),\"Installation\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"To install this plugin, copy and paste this code into your Packer configuration, then run \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.packer.io/docs/commands/init\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"packer init\")),\".\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"packer\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"required_plugins\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"hyperone\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source\"),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"github.com/hashicorp/hyperone\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"version\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"~> 1\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Alternatively, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"packer plugins install\"),\" to manage installation of this plugin.\"),mdx(\"pre\",e({},{className:\"language-sh\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),\"packer plugins install github.com/hashicorp/hyperone\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-components\",\"data-text-content\":\"Components\",className:\"g-type-display-4\"}),\"Components\"),mdx(\"h4\",e({},{id:\"user-content-builders\",\"data-text-content\":\"Builders\",className:\"g-type-display-5\"}),\"Builders\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"/packer/integrations/hashicorp/hyperone/latest/components/builder/hyperone\"}),\"hyperone\"),` - The hyperone builder takes a source image, runs any\nprovisioning necessary on the image after launching it, then creates a reusable image.`)),mdx(\"h3\",e({},{id:\"user-content-authentication\",\"data-text-content\":\"Authentication\",className:\"g-type-display-4\"}),\"Authentication\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`HyperOne supports several authentication methods, which are all supported by\nthis builder.`),mdx(\"h4\",e({},{id:\"user-content-user-session\",\"data-text-content\":\"User session\",className:\"g-type-display-5\"}),\"User session\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"If using user session, set the \",mdx(\"inlineCode\",{parentName:\"p\"},\"token\"),` field to your authentication token.\nThe `,mdx(\"inlineCode\",{parentName:\"p\"},\"project\"),\" field is required when using this method.\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"token\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"YOUR TOKEN\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"project\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"YOUR_PROJECT\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h4\",e({},{id:\"user-content-user-session-by-ssh-key\",\"data-text-content\":\"User session by SSH key\",className:\"g-type-display-5\"}),\"User session by SSH key\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`If you've added an SSH key as a credential to your user account and the\nprivate key is added to the ssh-agent on your local machine, you can\nauthenticate by setting just the platform login (your e-mail address):`),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"token_login\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"your.user@example.com\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h4\",e({},{id:\"user-content-h1-cli\",\"data-text-content\":\"h1 CLI\",className:\"g-type-display-5\"}),\"h1 CLI\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"If you're using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/hyperonecom/h1-cli\"}),\"h1-cli\"),` on your local\nmachine, HyperOne builder can use your credentials saved in a config file.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"All you have to do is login within the tool:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"h1 login --username your.user@example.com\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"You don't have to set \",mdx(\"inlineCode\",{parentName:\"p\"},\"token\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"project\"),\" fields at all using this method.\"),mdx(\"h4\",e({},{id:\"user-content-service-account\",\"data-text-content\":\"Service account\",className:\"g-type-display-5\"}),\"Service account\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Using \",mdx(\"inlineCode\",{parentName:\"p\"},\"h1\"),\", you can create a new token associated with chosen project.\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"h1 project token \",mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"add\"),\" --name packer-builder --project PROJECT_ID\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Set the \",mdx(\"inlineCode\",{parentName:\"p\"},\"token\"),\" field to the generated token or save it in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"HYPERONE_TOKEN\"),`\nenvironment variable. You don't have to set the `,mdx(\"inlineCode\",{parentName:\"p\"},\"project\"),` option using this\nmethod.`),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"token\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"YOUR TOKEN\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}