{"pageProps":{"metadata":{"title":"Triton Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"7b6fced5-1f0c-45b8-a0a8-757d3486b63e","slug":"triton","name":"Triton","description":"The Triton Packer builder is able to create new images for use with Triton.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/hashicorp/packer-plugin-triton","subdirectory":"/.web-docs","created_at":"2023-06-15T19:03:06.676Z","updated_at":"2023-08-08T17:01:18.908Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.2"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[{"id":"f4e58404-7575-4876-bdb6-407697b6e335","slug":"archived","name":"Archived","description":"This integration is no longer maintained","created_at":"2022-11-09T22:56:30.570Z","updated_at":"2022-11-09T22:56:30.570Z"}],"integration_type":null},"activeRelease":{"id":"605bdbdd-d774-4a2b-bb72-804069aa1f9c","integration_id":"7b6fced5-1f0c-45b8-a0a8-757d3486b63e","version":"1.0.2","readme":"The Triton Packer builder is able to create new images for use with Triton.\nThese images can be used with both the [Joyent public cloud](https://www.joyent.com/) (which is powered by Triton) as well as with private [Triton](https://github.com/joyent/triton) installations.\n\nThis builder uses the Triton Cloud API to create these images. Triton also\nsupports the Docker API however this builder does not. If you want to create\nDocker images on Triton you should use the Packer Docker builder.\n\n### Installation\nTo install this plugin add this code into your Packer configuration and run [packer init](/packer/docs/commands/init)\n\n```hcl\npacker {\n  required_plugins {\n    triton = {\n      version = \"~> 1\"\n      source  = \"github.com/hashicorp/triton\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/triton\n```\n\n### Components\n\n#### Builders\n\n- [triton](/packer/integrations/hashicorp/triton/latest/components/builder/triton) - The Triton Packer builder is\n  able to create new images for use with Triton.\n","created_at":"2023-06-15T20:55:19.053Z","updated_at":"2023-08-29T15:15:34.096Z","components":[{"id":"f73f5206-c6d3-4c67-a305-167f0f1dd35b","integration_release_id":"605bdbdd-d774-4a2b-bb72-804069aa1f9c","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `triton`\nArtifact BuilderId: `joyent.triton`\n\nThe `triton` Packer builder is able to create new images for use with Triton.\nThese images can be used with both the [Joyent public\ncloud](https://www.joyent.com/) (which is powered by Triton) as well with\nprivate [Triton](https://github.com/joyent/triton) installations.\n\nThis builder uses the Triton Cloud API to create these images. Triton also\nsupports the Docker API however this builder does _not_. If you want to create\nDocker images on Triton you should use the Packer Docker builder.\n\nThe builder creates and launches a temporary VM based on a specified source\nimage, runs any provisioning necessary, uses the Triton \"VM to image\"\nfunctionality to create a reusable image and finally destroys the temporary VM.\nThis reusable image can then be used to launch new machines.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n~> **Private installations of Triton must have custom images enabled!** To\nuse the Triton builder with a private/on-prem installation of Joyent's Triton\nsoftware, you'll need an operator to manually [enable custom\nimages](https://docs.joyent.com/private-cloud/install/image-management) after\ninstalling Triton. This is not a requirement for Joyent's public cloud offering\nof Triton.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder. In addition to the options defined there, a private key file\ncan also be supplied to override the typical auto-generated key:\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n### Required:\n\n- `triton_account` (string) - The username of the Triton account to use when\n  using the Triton Cloud API.\n\n- `triton_key_id` (string) - The fingerprint of the public key of the SSH key\n  pair to use for authentication with the Triton Cloud API. If\n  `triton_key_material` is not set, it is assumed that the SSH agent has the\n  private key corresponding to this key ID loaded.\n\n- `source_machine_image` (string) - The UUID of the image to base the new\n  image on. Triton supports multiple types of images, called 'brands' in\n  Triton / Joyent lingo, for contains and VM's. See the chapter [Containers\n  and virtual machines](https://docs.joyent.com/public-cloud/instances) in\n  the Joyent Triton documentation for detailed information. The following\n  brands are currently supported by this builder:`joyent` and`kvm`. The\n  choice of base image automatically decides the brand. On the Joyent public\n  cloud a valid `source_machine_image` could for example be\n  `70e3ae72-96b6-11e6-9056-9737fd4d0764` for version 16.3.1 of the 64bit\n  SmartOS base image (a 'joyent' brand image). `source_machine_image_filter`\n  can be used to populate this UUID.\n\n- `source_machine_package` (string) - The Triton package to use while\n  building the image. Does not affect (and does not have to be the same) as\n  the package which will be used for a VM instance running this image. On the\n  Joyent public cloud this could for example be `g3-standard-0.5-smartos`.\n\n- `image_name` (string) - The name the finished image in Triton will be\n  assigned. Maximum 512 characters but should in practice be much shorter\n  (think between 5 and 20 characters). For example `postgresql-95-server` for\n  an image used as a PostgreSQL 9.5 server.\n\n- `image_version` (string) - The version string for this image. Maximum 128\n  characters. Any string will do but a format of `Major.Minor.Patch` is\n  strongly advised by Joyent. See [Semantic Versioning](http://semver.org/)\n  for more information on the `Major.Minor.Patch` versioning format.\n\n### Optional:\n\n- `triton_url` (string) - The URL of the Triton cloud API to use. If omitted\n  it will default to the `us-sw-1` region of the Joyent Public cloud. If you\n  are using your own private Triton installation you will have to supply the\n  URL of the cloud API of your own Triton installation.\n\n- `triton_key_material` (string) - Path to the file in which the private key\n  of `triton_key_id` is stored. For example `/home/soandso/.ssh/id_rsa`. If\n  this is not specified, the SSH agent is used to sign requests with the\n  `triton_key_id` specified.\n\n- `triton_user` (string) - The username of a user who has access to your\n  Triton account.\n\n- `insecure_skip_tls_verify` - (bool) This allows skipping TLS verification\n  of the Triton endpoint. It is useful when connecting to a temporary Triton\n  installation such as Cloud-On-A-Laptop which does not generally use a\n  certificate signed by a trusted root CA. The default is `false`.\n\n- `source_machine_firewall_enabled` (boolean) - Whether or not the firewall\n  of the VM used to create an image of is enabled. The Triton firewall only\n  filters inbound traffic to the VM. All outbound traffic is always allowed.\n  Currently this builder does not provide an interface to add specific\n  firewall rules. Unless you have a global rule defined in Triton which\n  allows SSH traffic enabling the firewall will interfere with the SSH\n  provisioner. The default is `false`.\n\n- `source_machine_metadata` (object of key/value strings) - Triton metadata\n  applied to the VM used to create the image. Metadata can be used to pass\n  configuration information to the VM without the need for networking. See\n  [Using the metadata\n  API](https://docs.joyent.com/private-cloud/instances/using-mdata) in the\n  Joyent documentation for more information. This can for example be used to\n  set the `user-script` metadata key to have Triton start a user supplied\n  script after the VM has booted.\n\n- `source_machine_name` (string) - Name of the VM used for building the\n  image. Does not affect (and does not have to be the same) as the name for a\n  VM instance running this image. Maximum 512 characters but should in\n  practice be much shorter (think between 5 and 20 characters). For example\n  `mysql-64-server-image-builder`. When omitted defaults to\n  `packer-builder-[image_name]`.\n\n- `source_machine_networks` (array of strings) - The UUID's of Triton\n  networks added to the source machine used for creating the image. For\n  example if any of the provisioners which are run need Internet access you\n  will need to add the UUID's of the appropriate networks here. If this is\n  not specified, instances will be placed into the default Triton public and\n  internal networks.\n\n- `source_machine_tags` (object of key/value strings) - Tags applied to the\n  VM used to create the image.\n\n- `image_acls` (array of strings) - The UUID's of the users which will have\n  access to this image. When omitted only the owner (the Triton user whose\n  credentials are used) will have access to the image.\n\n- `image_description` (string) - Description of the image. Maximum 512\n  characters.\n\n- `image_eula_url` (string) - URL of the End User License Agreement (EULA)\n  for the image. Maximum 128 characters.\n\n- `image_homepage` (string) - URL of the homepage where users can find\n  information about the image. Maximum 128 characters.\n\n- `image_tags` (object of key/value strings) - Tag applied to the image.\n\n- `source_machine_image_filter` (object) - Filters used to populate the\n  `source_machine_image` field. Example:\n\n  ```hcl\n  source_machine_image_filter = {\n    most_recent = \"true\"\n    name        = \"ubuntu-16.04\"\n    type        = \"lx-dataset\"\n  }\n  ```\n\n## Basic Example\n\nBelow is a minimal example to create an image on the Joyent public cloud:\n\n**HCL2**\n\n```hcl\nsource \"triton\" \"example\" {\n  image_name    = \"my_new_image\"\n  image_version = \"1.0.0\"\n  source_machine_image_filter = {\n    most_recent = \"true\"\n    name        = \"ubuntu-16.04\"\n    type        = \"lx-dataset\"\n  }\n  source_machine_name    = \"image-builder\"\n  source_machine_package = \"g4-highcpu-128M\"\n  ssh_username           = \"root\"\n  triton_account         = \"triton_username\"\n  triton_key_id          = \"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\"\n}\n\nbuild {\n  sources = [\"source.triton.example\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"triton\",\n\n      \"triton_account\": \"triton_username\",\n      \"triton_key_id\": \"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\",\n\n      \"source_machine_name\": \"image-builder\",\n      \"source_machine_package\": \"g4-highcpu-128M\",\n      \"source_machine_image_filter\": {\n        \"name\": \"ubuntu-16.04\",\n        \"type\": \"lx-dataset\",\n        \"most_recent\": \"true\"\n      },\n\n      \"ssh_username\": \"root\",\n\n      \"image_name\": \"my_new_image\",\n      \"image_version\": \"1.0.0\"\n    }\n  ]\n}\n```\n\nIn the above example the SSH key used for `triton_key_material` (connecting to\nthe Cloud API) and the `ssh_private_key_file` (connecting to the VM once it has\nstarted) are the same. This is because Triton automatically configures the root\nusers to be able to login via SSH with the same key used to create the VM via\nthe Cloud API. In more advanced scenarios for example when using a\n`source_machine_image` one might use different credentials.\n\nAvailable `triton_key_id`, `source_machine_package`, `source_machine_image`,\nand `source_machine_networks` can be found by using the following [Triton\nCLI](https://docs.joyent.com/public-cloud/api-access/cloudapi) commands:\n`triton key list`, `triton package list`, `triton image list`, and\n`triton network list` respectively.\n","created_at":"2023-06-15T20:55:20.297Z","updated_at":"2023-07-22T10:57:52.318Z","name":"Triton","slug":"triton","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"component":{"id":"f73f5206-c6d3-4c67-a305-167f0f1dd35b","integration_release_id":"605bdbdd-d774-4a2b-bb72-804069aa1f9c","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `triton`\nArtifact BuilderId: `joyent.triton`\n\nThe `triton` Packer builder is able to create new images for use with Triton.\nThese images can be used with both the [Joyent public\ncloud](https://www.joyent.com/) (which is powered by Triton) as well with\nprivate [Triton](https://github.com/joyent/triton) installations.\n\nThis builder uses the Triton Cloud API to create these images. Triton also\nsupports the Docker API however this builder does _not_. If you want to create\nDocker images on Triton you should use the Packer Docker builder.\n\nThe builder creates and launches a temporary VM based on a specified source\nimage, runs any provisioning necessary, uses the Triton \"VM to image\"\nfunctionality to create a reusable image and finally destroys the temporary VM.\nThis reusable image can then be used to launch new machines.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n~> **Private installations of Triton must have custom images enabled!** To\nuse the Triton builder with a private/on-prem installation of Joyent's Triton\nsoftware, you'll need an operator to manually [enable custom\nimages](https://docs.joyent.com/private-cloud/install/image-management) after\ninstalling Triton. This is not a requirement for Joyent's public cloud offering\nof Triton.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder. In addition to the options defined there, a private key file\ncan also be supplied to override the typical auto-generated key:\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n### Required:\n\n- `triton_account` (string) - The username of the Triton account to use when\n  using the Triton Cloud API.\n\n- `triton_key_id` (string) - The fingerprint of the public key of the SSH key\n  pair to use for authentication with the Triton Cloud API. If\n  `triton_key_material` is not set, it is assumed that the SSH agent has the\n  private key corresponding to this key ID loaded.\n\n- `source_machine_image` (string) - The UUID of the image to base the new\n  image on. Triton supports multiple types of images, called 'brands' in\n  Triton / Joyent lingo, for contains and VM's. See the chapter [Containers\n  and virtual machines](https://docs.joyent.com/public-cloud/instances) in\n  the Joyent Triton documentation for detailed information. The following\n  brands are currently supported by this builder:`joyent` and`kvm`. The\n  choice of base image automatically decides the brand. On the Joyent public\n  cloud a valid `source_machine_image` could for example be\n  `70e3ae72-96b6-11e6-9056-9737fd4d0764` for version 16.3.1 of the 64bit\n  SmartOS base image (a 'joyent' brand image). `source_machine_image_filter`\n  can be used to populate this UUID.\n\n- `source_machine_package` (string) - The Triton package to use while\n  building the image. Does not affect (and does not have to be the same) as\n  the package which will be used for a VM instance running this image. On the\n  Joyent public cloud this could for example be `g3-standard-0.5-smartos`.\n\n- `image_name` (string) - The name the finished image in Triton will be\n  assigned. Maximum 512 characters but should in practice be much shorter\n  (think between 5 and 20 characters). For example `postgresql-95-server` for\n  an image used as a PostgreSQL 9.5 server.\n\n- `image_version` (string) - The version string for this image. Maximum 128\n  characters. Any string will do but a format of `Major.Minor.Patch` is\n  strongly advised by Joyent. See [Semantic Versioning](http://semver.org/)\n  for more information on the `Major.Minor.Patch` versioning format.\n\n### Optional:\n\n- `triton_url` (string) - The URL of the Triton cloud API to use. If omitted\n  it will default to the `us-sw-1` region of the Joyent Public cloud. If you\n  are using your own private Triton installation you will have to supply the\n  URL of the cloud API of your own Triton installation.\n\n- `triton_key_material` (string) - Path to the file in which the private key\n  of `triton_key_id` is stored. For example `/home/soandso/.ssh/id_rsa`. If\n  this is not specified, the SSH agent is used to sign requests with the\n  `triton_key_id` specified.\n\n- `triton_user` (string) - The username of a user who has access to your\n  Triton account.\n\n- `insecure_skip_tls_verify` - (bool) This allows skipping TLS verification\n  of the Triton endpoint. It is useful when connecting to a temporary Triton\n  installation such as Cloud-On-A-Laptop which does not generally use a\n  certificate signed by a trusted root CA. The default is `false`.\n\n- `source_machine_firewall_enabled` (boolean) - Whether or not the firewall\n  of the VM used to create an image of is enabled. The Triton firewall only\n  filters inbound traffic to the VM. All outbound traffic is always allowed.\n  Currently this builder does not provide an interface to add specific\n  firewall rules. Unless you have a global rule defined in Triton which\n  allows SSH traffic enabling the firewall will interfere with the SSH\n  provisioner. The default is `false`.\n\n- `source_machine_metadata` (object of key/value strings) - Triton metadata\n  applied to the VM used to create the image. Metadata can be used to pass\n  configuration information to the VM without the need for networking. See\n  [Using the metadata\n  API](https://docs.joyent.com/private-cloud/instances/using-mdata) in the\n  Joyent documentation for more information. This can for example be used to\n  set the `user-script` metadata key to have Triton start a user supplied\n  script after the VM has booted.\n\n- `source_machine_name` (string) - Name of the VM used for building the\n  image. Does not affect (and does not have to be the same) as the name for a\n  VM instance running this image. Maximum 512 characters but should in\n  practice be much shorter (think between 5 and 20 characters). For example\n  `mysql-64-server-image-builder`. When omitted defaults to\n  `packer-builder-[image_name]`.\n\n- `source_machine_networks` (array of strings) - The UUID's of Triton\n  networks added to the source machine used for creating the image. For\n  example if any of the provisioners which are run need Internet access you\n  will need to add the UUID's of the appropriate networks here. If this is\n  not specified, instances will be placed into the default Triton public and\n  internal networks.\n\n- `source_machine_tags` (object of key/value strings) - Tags applied to the\n  VM used to create the image.\n\n- `image_acls` (array of strings) - The UUID's of the users which will have\n  access to this image. When omitted only the owner (the Triton user whose\n  credentials are used) will have access to the image.\n\n- `image_description` (string) - Description of the image. Maximum 512\n  characters.\n\n- `image_eula_url` (string) - URL of the End User License Agreement (EULA)\n  for the image. Maximum 128 characters.\n\n- `image_homepage` (string) - URL of the homepage where users can find\n  information about the image. Maximum 128 characters.\n\n- `image_tags` (object of key/value strings) - Tag applied to the image.\n\n- `source_machine_image_filter` (object) - Filters used to populate the\n  `source_machine_image` field. Example:\n\n  ```hcl\n  source_machine_image_filter = {\n    most_recent = \"true\"\n    name        = \"ubuntu-16.04\"\n    type        = \"lx-dataset\"\n  }\n  ```\n\n## Basic Example\n\nBelow is a minimal example to create an image on the Joyent public cloud:\n\n**HCL2**\n\n```hcl\nsource \"triton\" \"example\" {\n  image_name    = \"my_new_image\"\n  image_version = \"1.0.0\"\n  source_machine_image_filter = {\n    most_recent = \"true\"\n    name        = \"ubuntu-16.04\"\n    type        = \"lx-dataset\"\n  }\n  source_machine_name    = \"image-builder\"\n  source_machine_package = \"g4-highcpu-128M\"\n  ssh_username           = \"root\"\n  triton_account         = \"triton_username\"\n  triton_key_id          = \"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\"\n}\n\nbuild {\n  sources = [\"source.triton.example\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"triton\",\n\n      \"triton_account\": \"triton_username\",\n      \"triton_key_id\": \"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\",\n\n      \"source_machine_name\": \"image-builder\",\n      \"source_machine_package\": \"g4-highcpu-128M\",\n      \"source_machine_image_filter\": {\n        \"name\": \"ubuntu-16.04\",\n        \"type\": \"lx-dataset\",\n        \"most_recent\": \"true\"\n      },\n\n      \"ssh_username\": \"root\",\n\n      \"image_name\": \"my_new_image\",\n      \"image_version\": \"1.0.0\"\n    }\n  ]\n}\n```\n\nIn the above example the SSH key used for `triton_key_material` (connecting to\nthe Cloud API) and the `ssh_private_key_file` (connecting to the VM once it has\nstarted) are the same. This is because Triton automatically configures the root\nusers to be able to login via SSH with the same key used to create the VM via\nthe Cloud API. In more advanced scenarios for example when using a\n`source_machine_image` one might use different credentials.\n\nAvailable `triton_key_id`, `source_machine_package`, `source_machine_image`,\nand `source_machine_networks` can be found by using the following [Triton\nCLI](https://docs.joyent.com/public-cloud/api-access/cloudapi) commands:\n`triton key list`, `triton package list`, `triton image list`, and\n`triton network list` respectively.\n","created_at":"2023-06-15T20:55:20.297Z","updated_at":"2023-07-22T10:57:52.318Z","name":"Triton","slug":"triton","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"configuration-reference","level":2,"title":"Configuration Reference"},{"id":"required:","level":3,"title":"Required:"},{"id":"optional:","level":3,"title":"Optional:"},{"id":"basic-example","level":2,"title":"Basic Example"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))i.call(n,t)&&r(a,t,n[t]);if(s)for(var t of s(n))p.call(n,t)&&r(a,t,n[t]);return a},l=(a,n)=>d(a,N(n));var m=(a,n)=>{var t={};for(var o in a)i.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&s)for(var o of s(a))n.indexOf(o)<0&&p.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=m(o,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton\"),`\nArtifact BuilderId: `,mdx(\"inlineCode\",{parentName:\"p\"},\"joyent.triton\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton\"),` Packer builder is able to create new images for use with Triton.\nThese images can be used with both the `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.joyent.com/\"}),`Joyent public\ncloud`),` (which is powered by Triton) as well with\nprivate `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/joyent/triton\"}),\"Triton\"),\" installations.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This builder uses the Triton Cloud API to create these images. Triton also\nsupports the Docker API however this builder does `,mdx(\"em\",{parentName:\"p\"},\"not\"),`. If you want to create\nDocker images on Triton you should use the Packer Docker builder.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The builder creates and launches a temporary VM based on a specified source\nimage, runs any provisioning necessary, uses the Triton \"VM to image\"\nfunctionality to create a reusable image and finally destroys the temporary VM.\nThis reusable image can then be used to launch new machines.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The builder does \",mdx(\"em\",{parentName:\"p\"},\"not\"),` manage images. Once it creates an image, it is up to you\nto use it or delete it.`),mdx(\"div\",e({},{className:\"alert alert-warning g-type-body\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),\"\",mdx(\"strong\",{parentName:\"p\"},\"Private installations of Triton must have custom images enabled!\"),` To\nuse the Triton builder with a private/on-prem installation of Joyent's Triton\nsoftware, you'll need an operator to manually `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.joyent.com/private-cloud/install/image-management\"}),`enable custom\nimages`),` after\ninstalling Triton. This is not a requirement for Joyent's public cloud offering\nof Triton.`)),mdx(\"h2\",e({},{id:\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",className:\"g-type-display-3\"}),\"Configuration Reference\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`There are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`In addition to the options listed here, a\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/communicator\"}),\"communicator\"),` can be configured for this\nbuilder. In addition to the options defined there, a private key file\ncan also be supplied to override the typical auto-generated key:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ssh_private_key_file\"),` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\nThe `,mdx(\"inlineCode\",{parentName:\"li\"},\"~\"),` can be used in path and will be expanded to the home directory\nof current user.`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ssh_agent_auth\"),` (bool) - If true, the local SSH agent will be used to authenticate connections to\nthe source instance. No temporary keypair will be created, and the\nvalues of `,mdx(\"a\",e({parentName:\"li\"},{href:\"#ssh_password\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"ssh_password\")),` and\n`,mdx(\"a\",e({parentName:\"li\"},{href:\"#ssh_private_key_file\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"ssh_private_key_file\")),` will be ignored. The\nenvironment variable `,mdx(\"inlineCode\",{parentName:\"li\"},\"SSH_AUTH_SOCK\"),` must be set for this option to work\nproperly.`)),mdx(\"h3\",e({},{id:\"user-content-required:\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"triton_account\"),` (string) - The username of the Triton account to use when\nusing the Triton Cloud API.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_id\"),` (string) - The fingerprint of the public key of the SSH key\npair to use for authentication with the Triton Cloud API. If\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_material\"),` is not set, it is assumed that the SSH agent has the\nprivate key corresponding to this key ID loaded.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image\"),` (string) - The UUID of the image to base the new\nimage on. Triton supports multiple types of images, called 'brands' in\nTriton / Joyent lingo, for contains and VM's. See the chapter `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.joyent.com/public-cloud/instances\"}),`Containers\nand virtual machines`),` in\nthe Joyent Triton documentation for detailed information. The following\nbrands are currently supported by this builder:`,mdx(\"inlineCode\",{parentName:\"p\"},\"joyent\"),\" and\",mdx(\"inlineCode\",{parentName:\"p\"},\"kvm\"),`. The\nchoice of base image automatically decides the brand. On the Joyent public\ncloud a valid `,mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image\"),` could for example be\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"70e3ae72-96b6-11e6-9056-9737fd4d0764\"),` for version 16.3.1 of the 64bit\nSmartOS base image (a 'joyent' brand image). `,mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image_filter\"),`\ncan be used to populate this UUID.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_package\"),` (string) - The Triton package to use while\nbuilding the image. Does not affect (and does not have to be the same) as\nthe package which will be used for a VM instance running this image. On the\nJoyent public cloud this could for example be `,mdx(\"inlineCode\",{parentName:\"p\"},\"g3-standard-0.5-smartos\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_name\"),` (string) - The name the finished image in Triton will be\nassigned. Maximum 512 characters but should in practice be much shorter\n(think between 5 and 20 characters). For example `,mdx(\"inlineCode\",{parentName:\"p\"},\"postgresql-95-server\"),` for\nan image used as a PostgreSQL 9.5 server.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_version\"),` (string) - The version string for this image. Maximum 128\ncharacters. Any string will do but a format of `,mdx(\"inlineCode\",{parentName:\"p\"},\"Major.Minor.Patch\"),` is\nstrongly advised by Joyent. See `,mdx(\"a\",e({parentName:\"p\"},{href:\"http://semver.org/\"}),\"Semantic Versioning\"),`\nfor more information on the `,mdx(\"inlineCode\",{parentName:\"p\"},\"Major.Minor.Patch\"),\" versioning format.\"))),mdx(\"h3\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"triton_url\"),` (string) - The URL of the Triton cloud API to use. If omitted\nit will default to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"us-sw-1\"),` region of the Joyent Public cloud. If you\nare using your own private Triton installation you will have to supply the\nURL of the cloud API of your own Triton installation.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_material\"),` (string) - Path to the file in which the private key\nof `,mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_id\"),\" is stored. For example \",mdx(\"inlineCode\",{parentName:\"p\"},\"/home/soandso/.ssh/id_rsa\"),`. If\nthis is not specified, the SSH agent is used to sign requests with the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_id\"),\" specified.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"triton_user\"),` (string) - The username of a user who has access to your\nTriton account.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"insecure_skip_tls_verify\"),` - (bool) This allows skipping TLS verification\nof the Triton endpoint. It is useful when connecting to a temporary Triton\ninstallation such as Cloud-On-A-Laptop which does not generally use a\ncertificate signed by a trusted root CA. The default is `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_firewall_enabled\"),` (boolean) - Whether or not the firewall\nof the VM used to create an image of is enabled. The Triton firewall only\nfilters inbound traffic to the VM. All outbound traffic is always allowed.\nCurrently this builder does not provide an interface to add specific\nfirewall rules. Unless you have a global rule defined in Triton which\nallows SSH traffic enabling the firewall will interfere with the SSH\nprovisioner. The default is `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_metadata\"),` (object of key/value strings) - Triton metadata\napplied to the VM used to create the image. Metadata can be used to pass\nconfiguration information to the VM without the need for networking. See\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.joyent.com/private-cloud/instances/using-mdata\"}),`Using the metadata\nAPI`),` in the\nJoyent documentation for more information. This can for example be used to\nset the `,mdx(\"inlineCode\",{parentName:\"p\"},\"user-script\"),` metadata key to have Triton start a user supplied\nscript after the VM has booted.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_name\"),` (string) - Name of the VM used for building the\nimage. Does not affect (and does not have to be the same) as the name for a\nVM instance running this image. Maximum 512 characters but should in\npractice be much shorter (think between 5 and 20 characters). For example\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"mysql-64-server-image-builder\"),`. When omitted defaults to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"packer-builder-[image_name]\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_networks\"),` (array of strings) - The UUID's of Triton\nnetworks added to the source machine used for creating the image. For\nexample if any of the provisioners which are run need Internet access you\nwill need to add the UUID's of the appropriate networks here. If this is\nnot specified, instances will be placed into the default Triton public and\ninternal networks.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_tags\"),` (object of key/value strings) - Tags applied to the\nVM used to create the image.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_acls\"),` (array of strings) - The UUID's of the users which will have\naccess to this image. When omitted only the owner (the Triton user whose\ncredentials are used) will have access to the image.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_description\"),` (string) - Description of the image. Maximum 512\ncharacters.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_eula_url\"),` (string) - URL of the End User License Agreement (EULA)\nfor the image. Maximum 128 characters.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_homepage\"),` (string) - URL of the homepage where users can find\ninformation about the image. Maximum 128 characters.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_tags\"),\" (object of key/value strings) - Tag applied to the image.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image_filter\"),` (object) - Filters used to populate the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image\"),\" field. Example:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_machine_image_filter\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"most_recent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ubuntu-16.04\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"type\"),\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"lx-dataset\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)))),mdx(\"h2\",e({},{id:\"user-content-basic-example\",\"data-text-content\":\"Basic Example\",className:\"g-type-display-3\"}),\"Basic Example\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Below is a minimal example to create an image on the Joyent public cloud:\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"HCL2\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"triton\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"example\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"image_name\"),\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"my_new_image\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"image_version\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1.0.0\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_machine_image_filter\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"most_recent\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"name\"),\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ubuntu-16.04\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"type\"),\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"lx-dataset\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_machine_name\"),\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"image-builder\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_machine_package\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"g4-highcpu-128M\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"ssh_username\"),\"           \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"root\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"triton_account\"),\"         \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"triton_username\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"triton_key_id\"),\"          \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"source.triton.example\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"JSON\")),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"builders\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"triton\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"triton_account\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"triton_username\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"triton_key_id\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"6b:95:03:3d:d3:6e:52:69:01:96:1a:46:4a:8d:c1:7e\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_machine_name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"image-builder\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_machine_package\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"g4-highcpu-128M\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_machine_image_filter\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ubuntu-16.04\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"lx-dataset\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"most_recent\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"ssh_username\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"root\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"image_name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"my_new_image\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"image_version\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1.0.0\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In the above example the SSH key used for \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_material\"),` (connecting to\nthe Cloud API) and the `,mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_private_key_file\"),` (connecting to the VM once it has\nstarted) are the same. This is because Triton automatically configures the root\nusers to be able to login via SSH with the same key used to create the VM via\nthe Cloud API. In more advanced scenarios for example when using a\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image\"),\" one might use different credentials.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Available \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton_key_id\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_package\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_image\"),`,\nand `,mdx(\"inlineCode\",{parentName:\"p\"},\"source_machine_networks\"),\" can be found by using the following \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.joyent.com/public-cloud/api-access/cloudapi\"}),`Triton\nCLI`),` commands:\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"triton key list\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton package list\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"triton image list\"),`, and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"triton network list\"),\" respectively.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"Triton","url":"/packer/integrations/hashicorp/triton","isCurrentPage":false},{"title":"v1.0.2","url":"/packer/integrations/hashicorp/triton/v1.0.2","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"Triton","url":"/packer/integrations/hashicorp/triton/latest/components/builder/triton","isCurrentPage":true}]},"__N_SSG":true}