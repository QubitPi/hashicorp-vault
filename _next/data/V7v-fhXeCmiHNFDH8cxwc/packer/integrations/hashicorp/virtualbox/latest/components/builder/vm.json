{"pageProps":{"metadata":{"title":"VirtualBox Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"44b3367d-f9eb-4596-bc2d-60381f3324b4","slug":"virtualbox","name":"VirtualBox","description":"The VirtualBox plugin creates VirtualBox virtual machines and export them to an OVA or OVF format.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"official","repo_url":"https://github.com/hashicorp/packer-plugin-virtualbox","subdirectory":"/.web-docs","created_at":"2023-06-15T19:03:09.412Z","updated_at":"2023-08-08T17:01:20.404Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.5","1.0.4"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"dafef175-f8be-498d-99e6-cb629d756ed1","integration_id":"44b3367d-f9eb-4596-bc2d-60381f3324b4","version":"1.0.5","readme":"\nThe VirtualBox plugin is able to create\n[VirtualBox](https://www.virtualbox.org) virtual machines and export them in\nthe OVA or OVF format.\n\n### Installation\nTo install this plugin add this code into your Packer configuration and run [packer init](/packer/docs/commands/init)\n\n```hcl\npacker {\n    required_plugins {\n        virtualbox = {\n          version = \"~> 1\"\n          source  = \"github.com/hashicorp/virtualbox\"\n        }\n    }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/hashicorp/virtualbox\n```\n\n### Components\n\nThe plugin comes with multiple builders able to create VirtualBox\nmachines, depending on the strategy you want to use to build the image. \nThe following VirtualBox builders are supported:\n\n#### Builders\n- [virtualbox-iso](/packer/integrations/hashicorp/virtualbox/latest/components/builder/iso) - Starts from an ISO\n  file, creates a brand new VirtualBox VM, installs an OS, provisions\n  software within the OS, then exports that machine to create an image. This\n  is best for people who want to start from scratch.\n\n- [virtualbox-ovf](/packer/integrations/hashicorp/virtualbox/latest/components/builder/ovf) - This builder imports\n  an existing OVF/OVA file, runs provisioners on top of that VM, and exports\n  that machine to create an image. This is best if you have an existing\n  VirtualBox VM export you want to use as the source. As an additional\n  benefit, you can feed the artifact of this builder back into itself to\n  iterate on a machine.\n\n- [virtualbox-vm](/packer/integrations/hashicorp/virtualbox/latest/components/builder/vm) - This builder uses an\n  existing VM to run defined provisioners on top of that VM, and optionally\n  creates a snapshot to save the changes applied from the provisioners. In\n  addition the builder is able to export that machine to create an image. The\n  builder is able to attach to a defined snapshot as a starting point, which\n  could be defined statically or dynamically via a variable.\n","created_at":"2023-08-03T20:03:34.320Z","updated_at":"2023-08-29T15:25:38.665Z","components":[{"id":"f972a7a3-4223-4fd4-862f-425856f643ca","integration_release_id":"dafef175-f8be-498d-99e6-cb629d756ed1","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `virtualbox-iso`\nArtifact BuilderId: `mitchellh.virtualbox`\n\nThe VirtualBox Packer builder is able to create\n[VirtualBox](https://www.virtualbox.org/) virtual machines and export them in\nthe OVF format, starting from an ISO image.\n\nThe builder builds a virtual machine by creating a new virtual machine from\nscratch, booting it, installing an OS, provisioning software within the OS, then\nshutting it down. The result of the VirtualBox builder is a directory containing\nall the files necessary to run the virtual machine portably.\n\n## Basic Example\n\nHere is a basic example. This example is not functional. It will start the OS\ninstaller but then fail because we don't provide the preseed file for Ubuntu to\nself-install. Still, the example serves to show the basic configuration:\n\n**JSON**\n\n```json\n{\n  \"type\": \"virtualbox-iso\",\n  \"guest_os_type\": \"Ubuntu_64\",\n  \"iso_url\": \"http://releases.ubuntu.com/12.04/ubuntu-12.04.5-server-amd64.iso\",\n  \"iso_checksum\": \"md5:769474248a3897f4865817446f9a4a53\",\n  \"ssh_username\": \"packer\",\n  \"ssh_password\": \"packer\",\n  \"shutdown_command\": \"echo 'packer' | sudo -S shutdown -P now\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-iso\" \"basic-example\" {\n  guest_os_type = \"Ubuntu_64\"\n  iso_url = \"http://releases.ubuntu.com/12.04/ubuntu-12.04.5-server-amd64.iso\"\n  iso_checksum = \"md5:769474248a3897f4865817446f9a4a53\"\n  ssh_username = \"packer\"\n  ssh_password = \"packer\"\n  shutdown_command = \"echo 'packer' | sudo -S shutdown -P now\"\n}\n\nbuild {\n  sources = [\"sources.virtualbox-iso.basic-example\"]\n}\n```\n\n\nIt is important to add a `shutdown_command`. By default Packer halts the virtual\nmachine and the file system may not be sync'd. Thus, changes made in a\nprovisioner might not be saved.\n\n## VirtualBox-ISO Builder Configuration Reference\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [ISO](#iso-configuration),\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[Export](#export-configuration),\n[Boot](#boot-configuration),\n[Shutdown](#shutdown-configuration),\n[Run](#run-configuration),\n[Communicator](#communicator-configuration)\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/iso/builder.go; DO NOT EDIT MANUALLY -->\n\n- `chipset` (string) - The chipset to be used: PIIX3 or ICH9.\n  When set to piix3, the firmare is PIIX3. This is the default.\n  When set to ich9, the firmare is ICH9.\n\n- `firmware` (string) - The firmware to be used: BIOS or EFI.\n  When set to bios, the firmare is BIOS. This is the default.\n  When set to efi, the firmare is EFI.\n\n- `nested_virt` (boolean) - Nested virtualization: false or true.\n  When set to true, nested virtualisation (VT-x/AMD-V) is enabled.\n  When set to false, nested virtualisation is disabled. This is the default.\n\n- `rtc_time_base` (string) - RTC time base: UTC or local.\n  When set to \"UTC\", the RTC is set as UTC time.\n  When set to \"local\", the RTC is set as local time. This is the default.\n\n- `disk_size` (uint) - The size, in megabytes, of the hard disk to create for the VM. By\n  default, this is 40000 (about 40 GB).\n\n- `nic_type` (string) - The NIC type to be used for the network interfaces.\n  When set to 82540EM, the NICs are Intel PRO/1000 MT Desktop (82540EM). This is the default.\n  When set to 82543GC, the NICs are Intel PRO/1000 T Server (82543GC).\n  When set to 82545EM, the NICs are Intel PRO/1000 MT Server (82545EM).\n  When set to Am79C970A, the NICs are AMD PCNet-PCI II network card (Am79C970A).\n  When set to Am79C973, the NICs are AMD PCNet-FAST III network card (Am79C973).\n  When set to Am79C960, the NICs are AMD PCnet-ISA/NE2100 (Am79C960).\n  When set to virtio, the NICs are VirtIO.\n\n- `audio_controller` (string) - The audio controller type to be used.\n  When set to ac97, the audio controller is ICH AC97. This is the default.\n  When set to hda, the audio controller is Intel HD Audio.\n  When set to sb16, the audio controller is SoundBlaster 16.\n\n- `gfx_controller` (string) - The graphics controller type to be used.\n  When set to vboxvga, the graphics controller is VirtualBox VGA. This is the default.\n  When set to vboxsvga, the graphics controller is VirtualBox SVGA.\n  When set to vmsvga, the graphics controller is VMware SVGA.\n  When set to none, the graphics controller is disabled.\n\n- `gfx_vram_size` (uint) - The VRAM size to be used. By default, this is 4 MiB.\n\n- `gfx_accelerate_3d` (bool) - 3D acceleration: true or false.\n  When set to true, 3D acceleration is enabled.\n  When set to false, 3D acceleration is disabled. This is the default.\n\n- `gfx_efi_resolution` (string) - Screen resolution in EFI mode: WIDTHxHEIGHT.\n  When set to WIDTHxHEIGHT, it provides the given width and height as screen resolution\n  to EFI, for example 1920x1080 for Full-HD resolution. By default, no screen resolution\n  is set. Note, that this option only affects EFI boot, not the (default) BIOS boot.\n\n- `guest_os_type` (string) - The guest OS type being installed. By default this is other, but you can\n  get dramatic performance improvements by setting this to the proper\n  value. To view all available values for this run VBoxManage list\n  ostypes. Setting the correct value hints to VirtualBox how to optimize\n  the virtual hardware to work best with that operating system.\n\n- `hard_drive_discard` (bool) - When this value is set to true, a VDI image will be shrunk in response\n  to the trim command from the guest OS. The size of the cleared area must\n  be at least 1MB. Also set hard_drive_nonrotational to true to enable\n  TRIM support.\n\n- `hard_drive_interface` (string) - The type of controller that the primary hard drive is attached to,\n  defaults to ide. When set to sata, the drive is attached to an AHCI SATA\n  controller. When set to scsi, the drive is attached to an LsiLogic SCSI\n  controller. When set to pcie, the drive is attached to an NVMe\n  controller. When set to virtio, the drive is attached to a VirtIO\n  controller. Please note that when you use \"pcie\", you'll need to have\n  Virtualbox 6, install an [extension\n  pack](https://www.virtualbox.org/wiki/Downloads#VirtualBox6.0.14OracleVMVirtualBoxExtensionPack)\n  and you will need to enable EFI mode for nvme to work, ex:\n  \n  In JSON:\n  ```json\n   \"vboxmanage\": [\n        [ \"modifyvm\", \"{{.Name}}\", \"--firmware\", \"EFI\" ],\n   ]\n  ```\n  \n  In HCL2:\n  ```hcl\n   vboxmanage = [\n        [ \"modifyvm\", \"{{.Name}}\", \"--firmware\", \"EFI\" ],\n   ]\n  ```\n\n- `sata_port_count` (int) - The number of ports available on any SATA controller created, defaults\n  to 1. VirtualBox supports up to 30 ports on a maximum of 1 SATA\n  controller. Increasing this value can be useful if you want to attach\n  additional drives.\n\n- `nvme_port_count` (int) - The number of ports available on any NVMe controller created, defaults\n  to 1. VirtualBox supports up to 255 ports on a maximum of 1 NVMe\n  controller. Increasing this value can be useful if you want to attach\n  additional drives.\n\n- `hard_drive_nonrotational` (bool) - Forces some guests (i.e. Windows 7+) to treat disks as SSDs and stops\n  them from performing disk fragmentation. Also set hard_drive_discard to\n  true to enable TRIM support.\n\n- `iso_interface` (string) - The type of controller that the ISO is attached to, defaults to ide.\n  When set to sata, the drive is attached to an AHCI SATA controller.\n  When set to virtio, the drive is attached to a VirtIO controller.\n\n- `disk_additional_size` ([]uint) - Additional disks to create. Uses `vm_name` as the disk name template and\n  appends `-#` where `#` is the position in the array. `#` starts at 1 since 0\n  is the default disk. Each value represents the disk image size in MiB.\n  Each additional disk uses the same disk parameters as the default disk.\n  Unset by default.\n\n- `keep_registered` (bool) - Set this to true if you would like to keep the VM registered with\n  virtualbox. Defaults to false.\n\n- `skip_export` (bool) - Defaults to false. When enabled, Packer will not export the VM. Useful\n  if the build output is not the resultant image, but created inside the\n  VM.\n\n- `vm_name` (string) - This is the name of the OVF file for the new virtual machine, without\n  the file extension. By default this is packer-BUILDNAME, where\n  \"BUILDNAME\" is the name of the build.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/iso/builder.go; -->\n\n\n<!-- Code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; DO NOT EDIT MANUALLY -->\n\n- `virtualbox_version_file` (\\*string) - The path within the virtual machine to\n  upload a file that contains the VirtualBox version that was used to create\n  the machine. This information can be useful for provisioning. By default\n  this is .vbox_version, which will generally be upload it into the\n  home directory. Set to an empty string to skip uploading this file, which\n  can be useful when using the none communicator.\n\n<!-- End of code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxBundleConfig struct in builder/virtualbox/common/vboxbundle_config.go; DO NOT EDIT MANUALLY -->\n\n- `bundle_iso` (bool) - Defaults to false. When enabled, Packer includes\n  any attached ISO disc devices into the final virtual machine. Useful for\n  some live distributions that require installation media to continue to be\n  attached after installation.\n\n<!-- End of code generated from the comments of the VBoxBundleConfig struct in builder/virtualbox/common/vboxbundle_config.go; -->\n\n\n<!-- Code generated from the comments of the GuestAdditionsConfig struct in builder/virtualbox/common/guest_additions_config.go; DO NOT EDIT MANUALLY -->\n\n- `guest_additions_mode` (string) - The method by which guest additions are\n  made available to the guest for installation. Valid options are `upload`,\n  `attach`, or `disable`. If the mode is `attach` the guest additions ISO will\n  be attached as a CD device to the virtual machine. If the mode is `upload`\n  the guest additions ISO will be uploaded to the path specified by\n  `guest_additions_path`. The default value is `upload`. If `disable` is used,\n  guest additions won't be downloaded, either.\n\n- `guest_additions_interface` (string) - The interface type to use to mount guest additions when\n  guest_additions_mode is set to attach. Will default to the value set in\n  iso_interface, if iso_interface is set. Will default to \"ide\", if\n  iso_interface is not set. Options are \"ide\" and \"sata\".\n\n- `guest_additions_path` (string) - The path on the guest virtual machine\n   where the VirtualBox guest additions ISO will be uploaded. By default this\n   is `VBoxGuestAdditions.iso` which should upload into the login directory of\n   the user. This is a [configuration\n   template](/packer/docs/templates/legacy_json_templates/engine) where the `Version`\n   variable is replaced with the VirtualBox version.\n\n- `guest_additions_sha256` (string) - The SHA256 checksum of the guest\n   additions ISO that will be uploaded to the guest VM. By default the\n   checksums will be downloaded from the VirtualBox website, so this only needs\n   to be set if you want to be explicit about the checksum.\n\n- `guest_additions_url` (string) - The URL of the guest additions ISO\n   to upload. This can also be a file URL if the ISO is at a local path. By\n   default, the VirtualBox builder will attempt to find the guest additions ISO\n   on the local file system. If it is not available locally, the builder will\n   download the proper guest additions ISO from the internet.\n\n<!-- End of code generated from the comments of the GuestAdditionsConfig struct in builder/virtualbox/common/guest_additions_config.go; -->\n\n\n### ISO Configuration\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\nBy default, Packer will symlink, download or copy image files to the Packer\ncache into a \"`hash($iso_url+$iso_checksum).$iso_target_extension`\" file.\nPacker uses [hashicorp/go-getter](https://github.com/hashicorp/go-getter) in\nfile mode in order to perform a download.\n\ngo-getter supports the following protocols:\n\n* Local files\n* Git\n* Mercurial\n* HTTP\n* Amazon S3\n\nExamples:\ngo-getter can guess the checksum type based on `iso_checksum` length, and it is\nalso possible to specify the checksum type.\n\nIn JSON:\n\n```json\n\n\t\"iso_checksum\": \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file://./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\nIn HCL2:\n\n```hcl\n\n\tiso_checksum = \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file://./shasums.txt\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:./shasums.txt\",\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n#### Required:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_checksum` (string) - The checksum for the ISO file or virtual hard drive file. The type of\n  the checksum is specified within the checksum field as a prefix, ex:\n  \"md5:{$checksum}\". The type of the checksum can also be omitted and\n  Packer will try to infer it based on string length. Valid values are\n  \"none\", \"{$checksum}\", \"md5:{$checksum}\", \"sha1:{$checksum}\",\n  \"sha256:{$checksum}\", \"sha512:{$checksum}\" or \"file:{$path}\". Here is a\n  list of valid checksum values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `iso_url` (string) - A URL to the ISO containing the installation image or virtual hard drive\n  (VHD or VHDX) file to clone.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_urls` ([]string) - Multiple URLs for the ISO to download. Packer will try these in order.\n  If anything goes wrong attempting to download or while downloading a\n  single URL, it will move on to the next. All URLs must point to the same\n  file (same checksum). By default this is empty and `iso_url` is used.\n  Only one of `iso_url` or `iso_urls` can be specified.\n\n- `iso_target_path` (string) - The path where the iso should be saved after download. By default will\n  go in the packer cache, with a hash of the original filename and\n  checksum as its name.\n\n- `iso_target_extension` (string) - The extension of the iso file after download. This defaults to `iso`.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either ovf or ova, this specifies the output format\n  of the exported virtual machine. This defaults to ovf.\n\n- `export_opts` ([]string) - Additional options to pass to the [VBoxManage\n  export](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export).\n  This can be useful for passing product information to include in the\n  resulting appliance file. Packer JSON configuration file example:\n  \n  In JSON:\n  ```json\n  {\n    \"type\": \"virtualbox-iso\",\n    \"export_opts\":\n    [\n      \"--manifest\",\n      \"--vsys\", \"0\",\n      \"--description\", \"{{user `vm_description`}}\",\n      \"--version\", \"{{user `vm_version`}}\"\n    ],\n    \"format\": \"ova\",\n  }\n  ```\n  \n  In HCL2:\n  ```hcl\n  \tsource \"virtualbox-iso\" \"basic-example\" {\n  \t\texport_opts = [\n  \t          \"--manifest\",\n  \t          \"--vsys\", \"0\",\n  \t          \"--description\", \"${var.vm_description}\",\n  \t          \"--version\", \"${var.vm_version}\"\n  \t   \t]\n  \t\tformat = \"ova\"\n   }\n  ```\n  \n  A VirtualBox [VM\n  description](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf)\n  may contain arbitrary strings; the GUI interprets HTML formatting. However,\n  the JSON format does not allow arbitrary newlines within a value. Add a\n  multi-line description by preparing the string in the shell before the\n  packer call like this (shell `>` continuation character snipped for easier\n  copy & paste):\n  \n  ```shell\n  vm_description='some\n  multiline\n  description'\n  \n  vm_version='0.2.0'\n  \n  packer build \\\n      -var \"vm_description=${vm_description}\" \\\n      -var \"vm_version=${vm_version}\"         \\\n      \"packer_conf.json\"\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path to the directory where the\n  resulting virtual machine will be created. This may be relative or absolute.\n  If relative, the path is relative to the working directory when packer\n  is executed. This directory must not exist or be empty prior to running\n  the builder. By default this is output-BUILDNAME where \"BUILDNAME\" is the\n  name of the build.\n\n- `output_filename` (string) - This is the base name of the file (excluding the file extension) where\n  the resulting virtual machine will be created. By default this is the\n  `vm_name`.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; -->\n\n\n### Run configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VirtualBox virtual\n  machines by launching a GUI that shows the console of the machine\n  being built. When this value is set to true, the machine will start\n  without a console.\n\n- `vrdp_bind_address` (string) - The IP address that should be\n  binded to for VRDP. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vrdp_port_min` (int) - The minimum and maximum port\n  to use for VRDP access to the virtual machine. Packer uses a randomly chosen\n  port in this range that appears available. By default this is 5900 to\n  6000. The minimum and maximum ports are inclusive.\n\n- `vrdp_port_max` (int) - VRDP Port Max\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; -->\n\n\n### Shutdown configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Hardware configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; DO NOT EDIT MANUALLY -->\n\n- `cpus` (int) - The number of cpus to use for building the VM.\n  Defaults to 1.\n\n- `memory` (int) - The amount of memory to use for building the VM\n  in megabytes. Defaults to 512 megabytes.\n\n- `sound` (string) - Defaults to none. The type of audio device to use for\n  sound when building the VM. Some of the options that are available are\n  dsound, oss, alsa, pulse, coreaudio, null.\n\n- `usb` (bool) - Specifies whether or not to enable the USB bus when\n  building the VM. Defaults to false.\n\n<!-- End of code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; -->\n\n\n### VBox Manage configuration\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\nIn order to perform extra customization of the virtual machine, a template can\ndefine extra calls to `VBoxManage` to perform.\n[VBoxManage](https://www.virtualbox.org/manual/ch09.html) is the command-line\ninterface to VirtualBox where you can completely control VirtualBox. It can be\nused to do things such as set RAM, CPUs, etc.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; DO NOT EDIT MANUALLY -->\n\n- `host_port_min` (int) - The minimum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. By default this is 2222.\n\n- `host_port_max` (int) - The maximum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. Because Packer often runs in parallel,\n  Packer will choose a randomly available port in this range to use as the\n  host port. By default this is 4444.\n\n- `skip_nat_mapping` (bool) - Defaults to false. When enabled, Packer\n  does not setup forwarded port mapping for communicator (SSH or WinRM) requests and uses ssh_port or winrm_port\n  on the host to communicate to the virtual machine.\n\n<!-- End of code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n### Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nPlease note that for the Virtuabox builder, the IP address of the HTTP server\nPacker launches for you to access files like the preseed file in the example\nabove (`{{ .HTTPIP }}`) is hardcoded to 10.0.2.2. If you change the network\nof your VM you must guarantee that you can still access this HTTP server.\n\nThe boot command is sent to the VM through the `VBoxManage` utility in as few\ninvocations as possible. We send each character in groups of 25, with a default\ndelay of 100ms between groups. The delay alleviates issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"virtualbox-iso\",\n      \"boot_keygroup_interval\": \"500ms\"\n      ...\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-iso\" \"basic-example\" {\n  boot_keygroup_interval = \"500ms\"\n  # ...\n}\n```\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n### SSH key pair automation\n\nThe VirtualBox builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate an ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n\n## Guest Additions\n\nPacker will automatically download the proper guest additions for the version of\nVirtualBox that is running and upload those guest additions into the virtual\nmachine so that provisioners can easily install them.\n\nPacker downloads the guest additions from the official VirtualBox website, and\nverifies the file with the official checksums released by VirtualBox.\n\nAfter the virtual machine is up and the operating system is installed, Packer\nuploads the guest additions into the virtual machine. The path where they are\nuploaded is controllable by `guest_additions_path`, and defaults to\n\"VBoxGuestAdditions.iso\". Without an absolute path, it is uploaded to the home\ndirectory of the SSH user.\n\n## Creating an EFI enabled VM\n\nIf you want to create an EFI enabled VM, make sure you set the `iso_interface`\nto \"sata\". Otherwise your attached drive will not be bootable. Example:\n\n**JSON**\n\n```json\n\"iso_interface\": \"sata\",\n\"vboxmanage\": [\n  [ \"modifyvm\", \"{{.Name}}\", \"--firmware\", \"EFI\" ]\n]\n```\n\n**HCL2**\n\n```hcl\niso_interface = \"sata\"\nvboxmanage = [\n  [ \"modifyvm\", \"{{.Name}}\", \"--firmware\", \"EFI\" ]\n]\n```\n","created_at":"2023-08-03T20:03:35.182Z","updated_at":"2023-08-29T15:25:39.813Z","name":"VirtualBox ISO","slug":"iso","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"e812f1d2-2fa2-43db-adf8-0c16a38c476b","integration_release_id":"dafef175-f8be-498d-99e6-cb629d756ed1","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `virtualbox-ovf`\nArtifact BuilderId: `mitchellh.virtualbox`\n\nThis VirtualBox Packer builder is able to create\n[VirtualBox](https://www.virtualbox.org/) virtual machines and export them in\nthe OVF format, starting from an existing OVF/OVA (exported virtual machine\nimage).\n\nWhen exporting from VirtualBox make sure to choose OVF Version 2, since Version\n1 is not compatible and will generate errors like this:\n\n```shell-session\n==> virtualbox-ovf: Progress state: VBOX_E_FILE_ERROR\n==> virtualbox-ovf: VBoxManage: error: Appliance read failed\n==> virtualbox-ovf: VBoxManage: error: Error reading \"source.ova\": element \"Section\" has no \"type\" attribute, line 21\n==> virtualbox-ovf: VBoxManage: error: Details: code VBOX_E_FILE_ERROR (0x80bb0004), component Appliance, interface IAppliance\n==> virtualbox-ovf: VBoxManage: error: Context: \"int handleImportAppliance(HandlerArg*)\" at line 304 of file VBoxManageAppliance.cpp\n```\n\nThe builder builds a virtual machine by importing an existing OVF or OVA file.\nIt then boots this image, runs provisioners on this new VM, and exports that VM\nto create the image. The imported machine is deleted prior to finishing the\nbuild.\n\n## Basic Example\n\nHere is a basic example. This example is functional if you have an OVF matching\nthe settings here.\n\n**JSON**\n\n```json\n{\n  \"type\": \"virtualbox-ovf\",\n  \"source_path\": \"source.ovf\",\n  \"ssh_username\": \"packer\",\n  \"ssh_password\": \"packer\",\n  \"shutdown_command\": \"echo 'packer' | sudo -S shutdown -P now\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-ovf\" \"basic-example\" {\n  source_path = \"source.ovf\"\n  ssh_username = \"packer\"\n  ssh_password = \"packer\"\n  shutdown_command = \"echo 'packer' | sudo -S shutdown -P now\"\n}\n\nbuild {\n  sources = [\"sources.virtualbox-ovf.basic-example\"]\n}\n```\n\n\nIt is important to add a `shutdown_command`. By default Packer halts the virtual\nmachine and the file system may not be sync'd. Thus, changes made in a\nprovisioner might not be saved.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [ISO](#iso-configuration),\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[Export](#export-configuration),\n[Boot](#boot-configuration),\n[Shutdown](#shutdown-configuration),\n[Run](#run-configuration),\n[Communicator](#communicator-configuration)\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/ovf/config.go; DO NOT EDIT MANUALLY -->\n\n- `checksum` (string) - The checksum for the source_path file. The type of the checksum is\n  specified within the checksum field as a prefix, ex: \"md5:{$checksum}\".\n  The type of the checksum can also be omitted and Packer will try to\n  infer it based on string length. Valid values are \"none\", \"{$checksum}\",\n  \"md5:{$checksum}\", \"sha1:{$checksum}\", \"sha256:{$checksum}\",\n  \"sha512:{$checksum}\" or \"file:{$path}\". Here is a list of valid checksum\n  values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `source_path` (string) - The filepath or URL to an OVF or OVA file that acts as the\n  source of this build.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/ovf/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/ovf/config.go; DO NOT EDIT MANUALLY -->\n\n- `import_flags` ([]string) - Additional flags to pass to\n  VBoxManage import. This can be used to add additional command-line flags\n  such as --eula-accept to accept a EULA in the OVF.\n\n- `import_opts` (string) - Additional options to pass to the\n  VBoxManage import. This can be useful for passing keepallmacs or\n  keepnatmacs options for existing ovf images.\n\n- `target_path` (string) - The path where the OVA should be saved\n  after download. By default, it will go in the packer cache, with a hash of\n  the original filename as its name.\n\n- `vm_name` (string) - This is the name of the OVF file for the new virtual\n  machine, without the file extension. By default this is packer-BUILDNAME,\n  where \"BUILDNAME\" is the name of the build.\n\n- `keep_registered` (bool) - Set this to true if you would like to keep\n  the VM registered with virtualbox. Defaults to false.\n\n- `skip_export` (bool) - Defaults to false. When enabled, Packer will\n  not export the VM. Useful if the build output is not the resultant image,\n  but created inside the VM.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/ovf/config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; DO NOT EDIT MANUALLY -->\n\n- `virtualbox_version_file` (\\*string) - The path within the virtual machine to\n  upload a file that contains the VirtualBox version that was used to create\n  the machine. This information can be useful for provisioning. By default\n  this is .vbox_version, which will generally be upload it into the\n  home directory. Set to an empty string to skip uploading this file, which\n  can be useful when using the none communicator.\n\n<!-- End of code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; -->\n\n\n<!-- Code generated from the comments of the GuestAdditionsConfig struct in builder/virtualbox/common/guest_additions_config.go; DO NOT EDIT MANUALLY -->\n\n- `guest_additions_mode` (string) - The method by which guest additions are\n  made available to the guest for installation. Valid options are `upload`,\n  `attach`, or `disable`. If the mode is `attach` the guest additions ISO will\n  be attached as a CD device to the virtual machine. If the mode is `upload`\n  the guest additions ISO will be uploaded to the path specified by\n  `guest_additions_path`. The default value is `upload`. If `disable` is used,\n  guest additions won't be downloaded, either.\n\n- `guest_additions_interface` (string) - The interface type to use to mount guest additions when\n  guest_additions_mode is set to attach. Will default to the value set in\n  iso_interface, if iso_interface is set. Will default to \"ide\", if\n  iso_interface is not set. Options are \"ide\" and \"sata\".\n\n- `guest_additions_path` (string) - The path on the guest virtual machine\n   where the VirtualBox guest additions ISO will be uploaded. By default this\n   is `VBoxGuestAdditions.iso` which should upload into the login directory of\n   the user. This is a [configuration\n   template](/packer/docs/templates/legacy_json_templates/engine) where the `Version`\n   variable is replaced with the VirtualBox version.\n\n- `guest_additions_sha256` (string) - The SHA256 checksum of the guest\n   additions ISO that will be uploaded to the guest VM. By default the\n   checksums will be downloaded from the VirtualBox website, so this only needs\n   to be set if you want to be explicit about the checksum.\n\n- `guest_additions_url` (string) - The URL of the guest additions ISO\n   to upload. This can also be a file URL if the ISO is at a local path. By\n   default, the VirtualBox builder will attempt to find the guest additions ISO\n   on the local file system. If it is not available locally, the builder will\n   download the proper guest additions ISO from the internet.\n\n<!-- End of code generated from the comments of the GuestAdditionsConfig struct in builder/virtualbox/common/guest_additions_config.go; -->\n\n\n### VBoxManage configuration\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either ovf or ova, this specifies the output format\n  of the exported virtual machine. This defaults to ovf.\n\n- `export_opts` ([]string) - Additional options to pass to the [VBoxManage\n  export](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export).\n  This can be useful for passing product information to include in the\n  resulting appliance file. Packer JSON configuration file example:\n  \n  In JSON:\n  ```json\n  {\n    \"type\": \"virtualbox-iso\",\n    \"export_opts\":\n    [\n      \"--manifest\",\n      \"--vsys\", \"0\",\n      \"--description\", \"{{user `vm_description`}}\",\n      \"--version\", \"{{user `vm_version`}}\"\n    ],\n    \"format\": \"ova\",\n  }\n  ```\n  \n  In HCL2:\n  ```hcl\n  \tsource \"virtualbox-iso\" \"basic-example\" {\n  \t\texport_opts = [\n  \t          \"--manifest\",\n  \t          \"--vsys\", \"0\",\n  \t          \"--description\", \"${var.vm_description}\",\n  \t          \"--version\", \"${var.vm_version}\"\n  \t   \t]\n  \t\tformat = \"ova\"\n   }\n  ```\n  \n  A VirtualBox [VM\n  description](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf)\n  may contain arbitrary strings; the GUI interprets HTML formatting. However,\n  the JSON format does not allow arbitrary newlines within a value. Add a\n  multi-line description by preparing the string in the shell before the\n  packer call like this (shell `>` continuation character snipped for easier\n  copy & paste):\n  \n  ```shell\n  vm_description='some\n  multiline\n  description'\n  \n  vm_version='0.2.0'\n  \n  packer build \\\n      -var \"vm_description=${vm_description}\" \\\n      -var \"vm_version=${vm_version}\"         \\\n      \"packer_conf.json\"\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path to the directory where the\n  resulting virtual machine will be created. This may be relative or absolute.\n  If relative, the path is relative to the working directory when packer\n  is executed. This directory must not exist or be empty prior to running\n  the builder. By default this is output-BUILDNAME where \"BUILDNAME\" is the\n  name of the build.\n\n- `output_filename` (string) - This is the base name of the file (excluding the file extension) where\n  the resulting virtual machine will be created. By default this is the\n  `vm_name`.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; -->\n\n\n### Run configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VirtualBox virtual\n  machines by launching a GUI that shows the console of the machine\n  being built. When this value is set to true, the machine will start\n  without a console.\n\n- `vrdp_bind_address` (string) - The IP address that should be\n  binded to for VRDP. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vrdp_port_min` (int) - The minimum and maximum port\n  to use for VRDP access to the virtual machine. Packer uses a randomly chosen\n  port in this range that appears available. By default this is 5900 to\n  6000. The minimum and maximum ports are inclusive.\n\n- `vrdp_port_max` (int) - VRDP Port Max\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; -->\n\n\n### Shutdown configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; DO NOT EDIT MANUALLY -->\n\n- `host_port_min` (int) - The minimum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. By default this is 2222.\n\n- `host_port_max` (int) - The maximum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. Because Packer often runs in parallel,\n  Packer will choose a randomly available port in this range to use as the\n  host port. By default this is 4444.\n\n- `skip_nat_mapping` (bool) - Defaults to false. When enabled, Packer\n  does not setup forwarded port mapping for communicator (SSH or WinRM) requests and uses ssh_port or winrm_port\n  on the host to communicate to the virtual machine.\n\n<!-- End of code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n- `ssh_keypair_name` (string) - If specified, this is the key that will be used for SSH with the\n  machine. The key must match a key pair name loaded up into the remote.\n  By default, this is blank, and Packer will generate a temporary keypair\n  unless [`ssh_password`](#ssh_password) is used.\n  [`ssh_private_key_file`](#ssh_private_key_file) or\n  [`ssh_agent_auth`](#ssh_agent_auth) must be specified when\n  [`ssh_keypair_name`](#ssh_keypair_name) is utilized.\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n### Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nPlease note that for the Virtuabox builder, the IP address of the HTTP server\nPacker launches for you to access files like the preseed file in the example\nabove (`{{ .HTTPIP }}`) is hardcoded to 10.0.2.2. If you change the network\nof your VM you must guarantee that you can still access this HTTP server.\n\nThe boot command is sent to the VM through the `VBoxManage` utility in as few\ninvocations as possible. We send each character in groups of 25, with a default\ndelay of 100ms between groups. The delay alleviates issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"virtualbox-ovf\",\n      \"boot_keygroup_interval\": \"500ms\"\n      ...\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-ovf\" \"basic-example\" {\n  boot_keygroup_interval = \"500ms\"\n  # ...\n}\n```\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n### SSH key pair automation\n\nThe VirtualBox builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n\n## Guest Additions\n\nPacker will automatically download the proper guest additions for the version of\nVirtualBox that is running and upload those guest additions into the virtual\nmachine so that provisioners can easily install them.\n\nPacker downloads the guest additions from the official VirtualBox website, and\nverifies the file with the official checksums released by VirtualBox.\n\nAfter the virtual machine is up and the operating system is installed, Packer\nuploads the guest additions into the virtual machine. The path where they are\nuploaded is controllable by `guest_additions_path`, and defaults to\n\"VBoxGuestAdditions.iso\". Without an absolute path, it is uploaded to the home\ndirectory of the SSH user.\n\n## VBoxManage Commands\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\nIn order to perform extra customization of the virtual machine, a template can\ndefine extra calls to `VBoxManage` to perform.\n[VBoxManage](https://www.virtualbox.org/manual/ch09.html) is the command-line\ninterface to VirtualBox where you can completely control VirtualBox. It can be\nused to do things such as set RAM, CPUs, etc.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n","created_at":"2023-08-03T20:03:35.549Z","updated_at":"2023-08-29T15:25:40.206Z","name":"VirtualBox OVF/OVA","slug":"ovf","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"89c4a330-32c3-4cbd-843d-2173d1853a3d","integration_release_id":"dafef175-f8be-498d-99e6-cb629d756ed1","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `virtualbox-vm`\nArtifact BuilderId: `mitchellh.virtualbox`\n\nThe VirtualBox Packer builder is able to create\n[VirtualBox](https://www.virtualbox.org/) virtual machines snapshots and\n(optionally) export them in the OVF format, starting from an **existing**\nvirtual machine.\n\nThe builder builds a virtual machine snapshot by using an existing virtual\nmachine, booting it, provisioning software within the OS, then shutting it down.\nThe result of the VirtualBox builder is a new snapshot persisting all changes\nfrom the applied provisioners.\n\n## Basic Example\n\nHere is a basic example. which serves to show the basic configuration:\n\n**JSON**\n\n```json\n{\n  \"type\": \"virtualbox-vm\",\n  \"communicator\": \"winrm\",\n  \"headless\": \"{{user `headless`}}\",\n  \"winrm_username\": \"vagrant\",\n  \"winrm_password\": \"vagrant\",\n  \"winrm_timeout\": \"2h\",\n  \"shutdown_command\": \"shutdown /s /t 10 /f /d p:4:1 /c \\\"Packer Shutdown\\\"\",\n  \"guest_additions_mode\": \"disable\",\n  \"output_directory\": \"./builds-vm\",\n  \"vm_name\": \"target-vm\",\n  \"attach_snapshot\": \"Snapshot\",\n  \"target_snapshot\": \"Target-Snapshot\",\n  \"force_delete_snapshot\": \"true\",\n  \"keep_registered\": \"false\",\n  \"skip_export\": \"false\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-vm\" \"basic-example\" {\n  communicator = \"winrm\"\n  headless = \"{{user `headless`}}\"\n  winrm_username = \"vagrant\"\n  winrm_password = \"vagrant\"\n  winrm_timeout = \"2h\"\n  shutdown_command = \"shutdown /s /t 10 /f /d p:4:1 /c \\\"Packer Shutdown\\\"\"\n  guest_additions_mode = \"disable\"\n  output_directory = \"./builds-vm\"\n  vm_name = \"target-vm\"\n  attach_snapshot = \"Snapshot\"\n  target_snapshot = \"Target-Snapshot\"\n  force_delete_snapshot = true\n  keep_registered = false\n  skip_export = false\n}\n\nbuild {\n  sources = [\"sources.virtualbox-vm.basic-example\"]\n}\n```\n\n\nIt is important to add a `shutdown_command`. By default Packer halts the virtual\nmachine and the file system may not be sync'd. Thus, changes made in a\nprovisioner might not be saved.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [ISO](#iso-configuration),\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[CD](#CD-configuration),\n[Export](#export-configuration),\n[Boot](#boot-configuration),\n[Shutdown](#shutdown-configuration),\n[Run](#run-configuration),\n[Communicator](#communicator-configuration)\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; DO NOT EDIT MANUALLY -->\n\n- `vm_name` (string) - This is the name of the virtual machine to which the\n   builder shall attach.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; DO NOT EDIT MANUALLY -->\n\n- `attach_snapshot` (string) - Default to `null/empty`. The name of an\n   **existing** snapshot to which the builder shall attach the VM before\n   starting it. If no snapshot is specified the builder will simply start the\n   VM from it's current state i.e. snapshot.\n\n- `target_snapshot` (string) - Default to `null/empty`. The name of the\n    snapshot which shall be created after all provisioners has been run by the\n    builder. If no target snapshot is specified and `keep_registered` is set to\n    `false` the builder will revert to the snapshot to which the VM was attached\n    before the builder has been executed, which will revert all changes applied\n    by the provisioners. This is handy if only an export shall be created and no\n    further snapshot is required.\n\n- `force_delete_snapshot` (bool) - Defaults to `false`. If set to `true`,\n    overwrite an existing `target_snapshot`. Otherwise the builder will yield an\n    error if the specified target snapshot already exists.\n\n- `keep_registered` (bool) - Set this to `true` if you would like to keep\n    the VM attached to the snapshot specified by `attach_snapshot`. Otherwise\n    the builder will reset the VM to the snapshot to which the VM was attached\n    before the builder started. Defaults to `false`.\n\n- `skip_export` (bool) - Defaults to `false`. When enabled, Packer will\n    not export the VM. Useful if the builder should be applied again on the created\n    target snapshot.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; DO NOT EDIT MANUALLY -->\n\n- `virtualbox_version_file` (\\*string) - The path within the virtual machine to\n  upload a file that contains the VirtualBox version that was used to create\n  the machine. This information can be useful for provisioning. By default\n  this is .vbox_version, which will generally be upload it into the\n  home directory. Set to an empty string to skip uploading this file, which\n  can be useful when using the none communicator.\n\n<!-- End of code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either ovf or ova, this specifies the output format\n  of the exported virtual machine. This defaults to ovf.\n\n- `export_opts` ([]string) - Additional options to pass to the [VBoxManage\n  export](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export).\n  This can be useful for passing product information to include in the\n  resulting appliance file. Packer JSON configuration file example:\n  \n  In JSON:\n  ```json\n  {\n    \"type\": \"virtualbox-iso\",\n    \"export_opts\":\n    [\n      \"--manifest\",\n      \"--vsys\", \"0\",\n      \"--description\", \"{{user `vm_description`}}\",\n      \"--version\", \"{{user `vm_version`}}\"\n    ],\n    \"format\": \"ova\",\n  }\n  ```\n  \n  In HCL2:\n  ```hcl\n  \tsource \"virtualbox-iso\" \"basic-example\" {\n  \t\texport_opts = [\n  \t          \"--manifest\",\n  \t          \"--vsys\", \"0\",\n  \t          \"--description\", \"${var.vm_description}\",\n  \t          \"--version\", \"${var.vm_version}\"\n  \t   \t]\n  \t\tformat = \"ova\"\n   }\n  ```\n  \n  A VirtualBox [VM\n  description](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf)\n  may contain arbitrary strings; the GUI interprets HTML formatting. However,\n  the JSON format does not allow arbitrary newlines within a value. Add a\n  multi-line description by preparing the string in the shell before the\n  packer call like this (shell `>` continuation character snipped for easier\n  copy & paste):\n  \n  ```shell\n  vm_description='some\n  multiline\n  description'\n  \n  vm_version='0.2.0'\n  \n  packer build \\\n      -var \"vm_description=${vm_description}\" \\\n      -var \"vm_version=${vm_version}\"         \\\n      \"packer_conf.json\"\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path to the directory where the\n  resulting virtual machine will be created. This may be relative or absolute.\n  If relative, the path is relative to the working directory when packer\n  is executed. This directory must not exist or be empty prior to running\n  the builder. By default this is output-BUILDNAME where \"BUILDNAME\" is the\n  name of the build.\n\n- `output_filename` (string) - This is the base name of the file (excluding the file extension) where\n  the resulting virtual machine will be created. By default this is the\n  `vm_name`.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; -->\n\n\n### Run configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VirtualBox virtual\n  machines by launching a GUI that shows the console of the machine\n  being built. When this value is set to true, the machine will start\n  without a console.\n\n- `vrdp_bind_address` (string) - The IP address that should be\n  binded to for VRDP. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vrdp_port_min` (int) - The minimum and maximum port\n  to use for VRDP access to the virtual machine. Packer uses a randomly chosen\n  port in this range that appears available. By default this is 5900 to\n  6000. The minimum and maximum ports are inclusive.\n\n- `vrdp_port_max` (int) - VRDP Port Max\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; -->\n\n\n### Shutdown configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Hardware configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; DO NOT EDIT MANUALLY -->\n\n- `cpus` (int) - The number of cpus to use for building the VM.\n  Defaults to 1.\n\n- `memory` (int) - The amount of memory to use for building the VM\n  in megabytes. Defaults to 512 megabytes.\n\n- `sound` (string) - Defaults to none. The type of audio device to use for\n  sound when building the VM. Some of the options that are available are\n  dsound, oss, alsa, pulse, coreaudio, null.\n\n- `usb` (bool) - Specifies whether or not to enable the USB bus when\n  building the VM. Defaults to false.\n\n<!-- End of code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; -->\n\n\n### VBox Manage configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; DO NOT EDIT MANUALLY -->\n\n- `host_port_min` (int) - The minimum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. By default this is 2222.\n\n- `host_port_max` (int) - The maximum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. Because Packer often runs in parallel,\n  Packer will choose a randomly available port in this range to use as the\n  host port. By default this is 4444.\n\n- `skip_nat_mapping` (bool) - Defaults to false. When enabled, Packer\n  does not setup forwarded port mapping for communicator (SSH or WinRM) requests and uses ssh_port or winrm_port\n  on the host to communicate to the virtual machine.\n\n<!-- End of code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n### Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nPlease note that for the Virtuabox builder, the IP address of the HTTP server\nPacker launches for you to access files like the preseed file in the example\nabove (`{{ .HTTPIP }}`) is hardcoded to 10.0.2.2. If you change the network\nof your VM you must guarantee that you can still access this HTTP server.\n\nThe boot command is sent to the VM through the `VBoxManage` utility in as few\ninvocations as possible. We send each character in groups of 25, with a default\ndelay of 100ms between groups. The delay alleviates issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"virtualbox-vm\",\n      \"boot_keygroup_interval\": \"500ms\"\n      ...\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-vm\" \"basic-example\" {\n  boot_keygroup_interval = \"500ms\"\n  # ...\n}\n```\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n### SSH key pair automation\n\nThe VirtualBox builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n\n## Guest Additions\n\nPacker will automatically download the proper guest additions for the version of\nVirtualBox that is running and upload those guest additions into the virtual\nmachine so that provisioners can easily install them.\n\nPacker downloads the guest additions from the official VirtualBox website, and\nverifies the file with the official checksums released by VirtualBox.\n\nAfter the virtual machine is up and the operating system is installed, Packer\nuploads the guest additions into the virtual machine. The path where they are\nuploaded is controllable by `guest_additions_path`, and defaults to\n\"VBoxGuestAdditions.iso\". Without an absolute path, it is uploaded to the home\ndirectory of the SSH user.\n\n## VBoxManage Commands\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\nIn order to perform extra customization of the virtual machine, a template can\ndefine extra calls to `VBoxManage` to perform.\n[VBoxManage](https://www.virtualbox.org/manual/ch09.html) is the command-line\ninterface to VirtualBox where you can completely control VirtualBox. It can be\nused to do things such as set RAM, CPUs, etc.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n","created_at":"2023-08-03T20:03:35.878Z","updated_at":"2023-08-30T22:23:03.581Z","name":"VirtualBox VM","slug":"vm","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"component":{"id":"89c4a330-32c3-4cbd-843d-2173d1853a3d","integration_release_id":"dafef175-f8be-498d-99e6-cb629d756ed1","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `virtualbox-vm`\nArtifact BuilderId: `mitchellh.virtualbox`\n\nThe VirtualBox Packer builder is able to create\n[VirtualBox](https://www.virtualbox.org/) virtual machines snapshots and\n(optionally) export them in the OVF format, starting from an **existing**\nvirtual machine.\n\nThe builder builds a virtual machine snapshot by using an existing virtual\nmachine, booting it, provisioning software within the OS, then shutting it down.\nThe result of the VirtualBox builder is a new snapshot persisting all changes\nfrom the applied provisioners.\n\n## Basic Example\n\nHere is a basic example. which serves to show the basic configuration:\n\n**JSON**\n\n```json\n{\n  \"type\": \"virtualbox-vm\",\n  \"communicator\": \"winrm\",\n  \"headless\": \"{{user `headless`}}\",\n  \"winrm_username\": \"vagrant\",\n  \"winrm_password\": \"vagrant\",\n  \"winrm_timeout\": \"2h\",\n  \"shutdown_command\": \"shutdown /s /t 10 /f /d p:4:1 /c \\\"Packer Shutdown\\\"\",\n  \"guest_additions_mode\": \"disable\",\n  \"output_directory\": \"./builds-vm\",\n  \"vm_name\": \"target-vm\",\n  \"attach_snapshot\": \"Snapshot\",\n  \"target_snapshot\": \"Target-Snapshot\",\n  \"force_delete_snapshot\": \"true\",\n  \"keep_registered\": \"false\",\n  \"skip_export\": \"false\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-vm\" \"basic-example\" {\n  communicator = \"winrm\"\n  headless = \"{{user `headless`}}\"\n  winrm_username = \"vagrant\"\n  winrm_password = \"vagrant\"\n  winrm_timeout = \"2h\"\n  shutdown_command = \"shutdown /s /t 10 /f /d p:4:1 /c \\\"Packer Shutdown\\\"\"\n  guest_additions_mode = \"disable\"\n  output_directory = \"./builds-vm\"\n  vm_name = \"target-vm\"\n  attach_snapshot = \"Snapshot\"\n  target_snapshot = \"Target-Snapshot\"\n  force_delete_snapshot = true\n  keep_registered = false\n  skip_export = false\n}\n\nbuild {\n  sources = [\"sources.virtualbox-vm.basic-example\"]\n}\n```\n\n\nIt is important to add a `shutdown_command`. By default Packer halts the virtual\nmachine and the file system may not be sync'd. Thus, changes made in a\nprovisioner might not be saved.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [ISO](#iso-configuration),\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[CD](#CD-configuration),\n[Export](#export-configuration),\n[Boot](#boot-configuration),\n[Shutdown](#shutdown-configuration),\n[Run](#run-configuration),\n[Communicator](#communicator-configuration)\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; DO NOT EDIT MANUALLY -->\n\n- `vm_name` (string) - This is the name of the virtual machine to which the\n   builder shall attach.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; DO NOT EDIT MANUALLY -->\n\n- `attach_snapshot` (string) - Default to `null/empty`. The name of an\n   **existing** snapshot to which the builder shall attach the VM before\n   starting it. If no snapshot is specified the builder will simply start the\n   VM from it's current state i.e. snapshot.\n\n- `target_snapshot` (string) - Default to `null/empty`. The name of the\n    snapshot which shall be created after all provisioners has been run by the\n    builder. If no target snapshot is specified and `keep_registered` is set to\n    `false` the builder will revert to the snapshot to which the VM was attached\n    before the builder has been executed, which will revert all changes applied\n    by the provisioners. This is handy if only an export shall be created and no\n    further snapshot is required.\n\n- `force_delete_snapshot` (bool) - Defaults to `false`. If set to `true`,\n    overwrite an existing `target_snapshot`. Otherwise the builder will yield an\n    error if the specified target snapshot already exists.\n\n- `keep_registered` (bool) - Set this to `true` if you would like to keep\n    the VM attached to the snapshot specified by `attach_snapshot`. Otherwise\n    the builder will reset the VM to the snapshot to which the VM was attached\n    before the builder started. Defaults to `false`.\n\n- `skip_export` (bool) - Defaults to `false`. When enabled, Packer will\n    not export the VM. Useful if the builder should be applied again on the created\n    target snapshot.\n\n<!-- End of code generated from the comments of the Config struct in builder/virtualbox/vm/config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; DO NOT EDIT MANUALLY -->\n\n- `virtualbox_version_file` (\\*string) - The path within the virtual machine to\n  upload a file that contains the VirtualBox version that was used to create\n  the machine. This information can be useful for provisioning. By default\n  this is .vbox_version, which will generally be upload it into the\n  home directory. Set to an empty string to skip uploading this file, which\n  can be useful when using the none communicator.\n\n<!-- End of code generated from the comments of the VBoxVersionConfig struct in builder/virtualbox/common/vbox_version_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either ovf or ova, this specifies the output format\n  of the exported virtual machine. This defaults to ovf.\n\n- `export_opts` ([]string) - Additional options to pass to the [VBoxManage\n  export](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export).\n  This can be useful for passing product information to include in the\n  resulting appliance file. Packer JSON configuration file example:\n  \n  In JSON:\n  ```json\n  {\n    \"type\": \"virtualbox-iso\",\n    \"export_opts\":\n    [\n      \"--manifest\",\n      \"--vsys\", \"0\",\n      \"--description\", \"{{user `vm_description`}}\",\n      \"--version\", \"{{user `vm_version`}}\"\n    ],\n    \"format\": \"ova\",\n  }\n  ```\n  \n  In HCL2:\n  ```hcl\n  \tsource \"virtualbox-iso\" \"basic-example\" {\n  \t\texport_opts = [\n  \t          \"--manifest\",\n  \t          \"--vsys\", \"0\",\n  \t          \"--description\", \"${var.vm_description}\",\n  \t          \"--version\", \"${var.vm_version}\"\n  \t   \t]\n  \t\tformat = \"ova\"\n   }\n  ```\n  \n  A VirtualBox [VM\n  description](https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf)\n  may contain arbitrary strings; the GUI interprets HTML formatting. However,\n  the JSON format does not allow arbitrary newlines within a value. Add a\n  multi-line description by preparing the string in the shell before the\n  packer call like this (shell `>` continuation character snipped for easier\n  copy & paste):\n  \n  ```shell\n  vm_description='some\n  multiline\n  description'\n  \n  vm_version='0.2.0'\n  \n  packer build \\\n      -var \"vm_description=${vm_description}\" \\\n      -var \"vm_version=${vm_version}\"         \\\n      \"packer_conf.json\"\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/virtualbox/common/export_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path to the directory where the\n  resulting virtual machine will be created. This may be relative or absolute.\n  If relative, the path is relative to the working directory when packer\n  is executed. This directory must not exist or be empty prior to running\n  the builder. By default this is output-BUILDNAME where \"BUILDNAME\" is the\n  name of the build.\n\n- `output_filename` (string) - This is the base name of the file (excluding the file extension) where\n  the resulting virtual machine will be created. By default this is the\n  `vm_name`.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/virtualbox/common/output_config.go; -->\n\n\n### Run configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VirtualBox virtual\n  machines by launching a GUI that shows the console of the machine\n  being built. When this value is set to true, the machine will start\n  without a console.\n\n- `vrdp_bind_address` (string) - The IP address that should be\n  binded to for VRDP. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vrdp_port_min` (int) - The minimum and maximum port\n  to use for VRDP access to the virtual machine. Packer uses a randomly chosen\n  port in this range that appears available. By default this is 5900 to\n  6000. The minimum and maximum ports are inclusive.\n\n- `vrdp_port_max` (int) - VRDP Port Max\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/virtualbox/common/run_config.go; -->\n\n\n### Shutdown configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the\n  machine once all the provisioning is done. By default this is an empty\n  string, which tells Packer to just forcefully shut down the machine unless a\n  shutdown command takes place inside script so this may safely be omitted. If\n  one or more scripts require a reboot it is suggested to leave this blank\n  since reboots may fail and specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\n  shutdown_command for the virtual machine to actually shut down. If it\n  doesn't shut down in this time, it is an error. By default, the timeout is\n  5m or five minutes.\n\n- `post_shutdown_delay` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\n  down the virtual machine. If you get the error\n  Error removing floppy controller, you might need to set this to 5m\n  or so. By default, the delay is 0s or disabled.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined.  If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through the preseed.cfg or your final provisioner.\n  Packer will wait for a default of 5 minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n- `acpi_shutdown` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\n  when keeping the machine state is necessary after shutting it down.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/virtualbox/common/shutdown_config.go; -->\n\n\n### Hardware configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; DO NOT EDIT MANUALLY -->\n\n- `cpus` (int) - The number of cpus to use for building the VM.\n  Defaults to 1.\n\n- `memory` (int) - The amount of memory to use for building the VM\n  in megabytes. Defaults to 512 megabytes.\n\n- `sound` (string) - Defaults to none. The type of audio device to use for\n  sound when building the VM. Some of the options that are available are\n  dsound, oss, alsa, pulse, coreaudio, null.\n\n- `usb` (bool) - Specifies whether or not to enable the USB bus when\n  building the VM. Defaults to false.\n\n<!-- End of code generated from the comments of the HWConfig struct in builder/virtualbox/common/hw_config.go; -->\n\n\n### VBox Manage configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; DO NOT EDIT MANUALLY -->\n\n- `host_port_min` (int) - The minimum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. By default this is 2222.\n\n- `host_port_max` (int) - The maximum port to use for the Communicator port on the host machine which is forwarded\n  to the SSH or WinRM port on the guest machine. Because Packer often runs in parallel,\n  Packer will choose a randomly available port in this range to use as the\n  host port. By default this is 4444.\n\n- `skip_nat_mapping` (bool) - Defaults to false. When enabled, Packer\n  does not setup forwarded port mapping for communicator (SSH or WinRM) requests and uses ssh_port or winrm_port\n  on the host to communicate to the virtual machine.\n\n<!-- End of code generated from the comments of the CommConfig struct in builder/virtualbox/common/comm_config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n### Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nPlease note that for the Virtuabox builder, the IP address of the HTTP server\nPacker launches for you to access files like the preseed file in the example\nabove (`{{ .HTTPIP }}`) is hardcoded to 10.0.2.2. If you change the network\nof your VM you must guarantee that you can still access this HTTP server.\n\nThe boot command is sent to the VM through the `VBoxManage` utility in as few\ninvocations as possible. We send each character in groups of 25, with a default\ndelay of 100ms between groups. The delay alleviates issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"virtualbox-vm\",\n      \"boot_keygroup_interval\": \"500ms\"\n      ...\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"virtualbox-vm\" \"basic-example\" {\n  boot_keygroup_interval = \"500ms\"\n  # ...\n}\n```\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n### SSH key pair automation\n\nThe VirtualBox builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n\n## Guest Additions\n\nPacker will automatically download the proper guest additions for the version of\nVirtualBox that is running and upload those guest additions into the virtual\nmachine so that provisioners can easily install them.\n\nPacker downloads the guest additions from the official VirtualBox website, and\nverifies the file with the official checksums released by VirtualBox.\n\nAfter the virtual machine is up and the operating system is installed, Packer\nuploads the guest additions into the virtual machine. The path where they are\nuploaded is controllable by `guest_additions_path`, and defaults to\n\"VBoxGuestAdditions.iso\". Without an absolute path, it is uploaded to the home\ndirectory of the SSH user.\n\n## VBoxManage Commands\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\nIn order to perform extra customization of the virtual machine, a template can\ndefine extra calls to `VBoxManage` to perform.\n[VBoxManage](https://www.virtualbox.org/manual/ch09.html) is the command-line\ninterface to VirtualBox where you can completely control VirtualBox. It can be\nused to do things such as set RAM, CPUs, etc.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n\n\n<!-- Code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; DO NOT EDIT MANUALLY -->\n\n- `vboxmanage` ([][]string) - Custom `VBoxManage` commands to execute in order to further customize\n  the virtual machine being created. The example shown below sets the memory and number of CPUs\n  within the virtual machine:\n  \n  In JSON:\n  ```json\n  \"vboxmanage\": [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"]\n  ]\n  ```\n  \n  In HCL2:\n  ```hcl\n  vboxmanage = [\n     [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"1024\"],\n     [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"2\"],\n  ]\n  ```\n  \n  The value of `vboxmanage` is an array of commands to execute. These commands are\n  executed in the order defined. So in the above example, the memory will be set\n  followed by the CPUs.\n  Each command itself is an array of strings, where each string is an argument to\n  `VBoxManage`. Each argument is treated as a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine). The only available\n  variable is `Name` which is replaced with the unique name of the VM, which is\n  required for many VBoxManage calls.\n\n- `vboxmanage_post` ([][]string) - Identical to vboxmanage,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n<!-- End of code generated from the comments of the VBoxManageConfig struct in builder/virtualbox/common/vboxmanage_config.go; -->\n","created_at":"2023-08-03T20:03:35.878Z","updated_at":"2023-08-30T22:23:03.581Z","name":"VirtualBox VM","slug":"vm","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"basic-example","level":2,"title":"Basic Example"},{"id":"configuration-reference","level":2,"title":"Configuration Reference"},{"id":"required:","level":3,"title":"Required:"},{"id":"optional:","level":3,"title":"Optional:"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"http-directory-configuration","level":3,"title":"Http directory configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"floppy-configuration","level":3,"title":"Floppy configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"cd-configuration","level":3,"title":"CD configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"export-configuration","level":3,"title":"Export configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"output-configuration","level":3,"title":"Output configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"run-configuration","level":3,"title":"Run configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"shutdown-configuration","level":3,"title":"Shutdown configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"hardware-configuration","level":3,"title":"Hardware configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"vbox-manage-configuration","level":3,"title":"VBox Manage configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"communicator-configuration","level":3,"title":"Communicator configuration"},{"id":"optional-common-fields:","level":4,"title":"Optional common fields:"},{"id":"optional-ssh-fields:","level":4,"title":"Optional SSH fields:"},{"id":"optional-winrm-fields:","level":4,"title":"Optional WinRM fields:"},{"id":"boot-configuration","level":3,"title":"Boot Configuration"},{"id":"optional:","level":4,"title":"Optional:"},{"id":"ssh-key-pair-automation","level":3,"title":"SSH key pair automation"},{"id":"guest-additions","level":2,"title":"Guest Additions"},{"id":"vboxmanage-commands","level":2,"title":"VBoxManage Commands"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var l=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&l(a,t,n[t]);if(o)for(var t of o(n))i.call(n,t)&&l(a,t,n[t]);return a},r=(a,n)=>d(a,N(n));var m=(a,n)=>{var t={};for(var s in a)p.call(a,s)&&n.indexOf(s)<0&&(t[s]=a[s]);if(a!=null&&o)for(var s of o(a))n.indexOf(s)<0&&i.call(a,s)&&(t[s]=a[s]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var s=t,{components:a}=s,n=m(s,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"virtualbox-vm\"),`\nArtifact BuilderId: `,mdx(\"inlineCode\",{parentName:\"p\"},\"mitchellh.virtualbox\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The VirtualBox Packer builder is able to create\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.virtualbox.org/\"}),\"VirtualBox\"),` virtual machines snapshots and\n(optionally) export them in the OVF format, starting from an `,mdx(\"strong\",{parentName:\"p\"},\"existing\"),`\nvirtual machine.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The builder builds a virtual machine snapshot by using an existing virtual\nmachine, booting it, provisioning software within the OS, then shutting it down.\nThe result of the VirtualBox builder is a new snapshot persisting all changes\nfrom the applied provisioners.`),mdx(\"h2\",e({},{id:\"user-content-basic-example\",\"data-text-content\":\"Basic Example\",className:\"g-type-display-3\"}),\"Basic Example\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Here is a basic example. which serves to show the basic configuration:\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"JSON\")),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-vm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"communicator\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"winrm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"headless\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{user `headless`}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"winrm_username\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"winrm_password\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"winrm_timeout\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2h\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"shutdown_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"shutdown /s /t 10 /f /d p:4:1 /c \\\\\"Packer Shutdown\\\\\"\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"guest_additions_mode\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"disable\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"output_directory\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./builds-vm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"vm_name\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"target-vm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"attach_snapshot\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Snapshot\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"target_snapshot\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Target-Snapshot\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"force_delete_snapshot\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"true\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"keep_registered\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"false\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"skip_export\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"false\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"HCL2\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-vm\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"basic-example\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"communicator\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"winrm\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"headless\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{user `headless`}}\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"winrm_username\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"winrm_password\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"winrm_timeout\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2h\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"shutdown_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"shutdown /s /t 10 /f /d p:4:1 /c \\\\\"Packer Shutdown\\\\\"\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"guest_additions_mode\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"disable\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"output_directory\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./builds-vm\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vm_name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"target-vm\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"attach_snapshot\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Snapshot\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"target_snapshot\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"Target-Snapshot\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"force_delete_snapshot\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"keep_registered\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"skip_export\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"sources.virtualbox-vm.basic-example\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"It is important to add a \",mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_command\"),`. By default Packer halts the virtual\nmachine and the file system may not be sync'd. Thus, changes made in a\nprovisioner might not be saved.`),mdx(\"h2\",e({},{id:\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",className:\"g-type-display-3\"}),\"Configuration Reference\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`There are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for `,mdx(\"a\",e({parentName:\"p\"},{href:\"#iso-configuration\"}),\"ISO\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#http-directory-configuration\"}),\"HTTP\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#floppy-configuration\"}),\"Floppy\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#CD-configuration\"}),\"CD\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#export-configuration\"}),\"Export\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#boot-configuration\"}),\"Boot\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#shutdown-configuration\"}),\"Shutdown\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#run-configuration\"}),\"Run\"),`,\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"#communicator-configuration\"}),\"Communicator\"),`\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\nIn addition to the options listed here, a\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/communicator\"}),\"communicator\"),` can be configured for this\nbuilder.`),mdx(\"h3\",e({},{id:\"user-content-required:\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"vm_name\"),` (string) - This is the name of the virtual machine to which the\nbuilder shall attach.`)),mdx(\"h3\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"attach_snapshot\"),\" (string) - Default to \",mdx(\"inlineCode\",{parentName:\"p\"},\"null/empty\"),`. The name of an\n`,mdx(\"strong\",{parentName:\"p\"},\"existing\"),` snapshot to which the builder shall attach the VM before\nstarting it. If no snapshot is specified the builder will simply start the\nVM from it's current state i.e. snapshot.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"target_snapshot\"),\" (string) - Default to \",mdx(\"inlineCode\",{parentName:\"p\"},\"null/empty\"),`. The name of the\nsnapshot which shall be created after all provisioners has been run by the\nbuilder. If no target snapshot is specified and `,mdx(\"inlineCode\",{parentName:\"p\"},\"keep_registered\"),` is set to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),` the builder will revert to the snapshot to which the VM was attached\nbefore the builder has been executed, which will revert all changes applied\nby the provisioners. This is handy if only an export shall be created and no\nfurther snapshot is required.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"force_delete_snapshot\"),\" (bool) - Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\". If set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`,\noverwrite an existing `,mdx(\"inlineCode\",{parentName:\"p\"},\"target_snapshot\"),`. Otherwise the builder will yield an\nerror if the specified target snapshot already exists.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"keep_registered\"),\" (bool) - Set this to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),` if you would like to keep\nthe VM attached to the snapshot specified by `,mdx(\"inlineCode\",{parentName:\"p\"},\"attach_snapshot\"),`. Otherwise\nthe builder will reset the VM to the snapshot to which the VM was attached\nbefore the builder started. Defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"skip_export\"),\" (bool) - Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),`. When enabled, Packer will\nnot export the VM. Useful if the builder should be applied again on the created\ntarget snapshot.`))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"virtualbox_version_file\"),\" (\",\"*\",`string) - The path within the virtual machine to\nupload a file that contains the VirtualBox version that was used to create\nthe machine. This information can be useful for provisioning. By default\nthis is .vbox_version, which will generally be upload it into the\nhome directory. Set to an empty string to skip uploading this file, which\ncan be useful when using the none communicator.`)),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_command\"),` (string) - The command to use to gracefully shut down the\nmachine once all the provisioning is done. By default this is an empty\nstring, which tells Packer to just forcefully shut down the machine unless a\nshutdown command takes place inside script so this may safely be omitted. If\none or more scripts require a reboot it is suggested to leave this blank\nsince reboots may fail and specify the final shutdown command in your\nlast script.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_timeout\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\nshutdown_command for the virtual machine to actually shut down. If it\ndoesn't shut down in this time, it is an error. By default, the timeout is\n5m or five minutes.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"post_shutdown_delay\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\ndown the virtual machine. If you get the error\nError removing floppy controller, you might need to set this to 5m\nor so. By default, the delay is 0s or disabled.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disable_shutdown\"),` (bool) - Packer normally halts the virtual machine after all provisioners have\nrun when no `,mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_command\"),\" is defined.  If this is set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`, Packer\n`,mdx(\"em\",{parentName:\"p\"},\"will not\"),` halt the virtual machine but will assume that you will send the stop\nsignal yourself through the preseed.cfg or your final provisioner.\nPacker will wait for a default of 5 minutes until the virtual machine is shutdown.\nThe timeout can be changed using `,mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_timeout\"),\" option.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"acpi_shutdown\"),` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\nwhen keeping the machine state is necessary after shutting it down.`))),mdx(\"h3\",e({},{id:\"user-content-http-directory-configuration\",\"data-text-content\":\"Http directory configuration\",className:\"g-type-display-4\"}),\"Http directory configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Packer will create an http server serving \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Example usage from a builder:\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"wget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\",`\n`)),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` (string) - Path to a directory to serve using an HTTP server. The files in this\ndirectory will be available over HTTP that will be requestable from the\nvirtual machine. This is useful for hosting kickstart files and so on.\nBy default this is an empty string, which means no HTTP server will be\nstarted. The address and port of the HTTP server will be available as\nvariables in `,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),\". This is covered in more detail below.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),\" (map\",\"[string]\",\"string) - Key/Values to serve using an HTTP server. \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),` works like and\nconflicts with `,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),`. The keys represent the paths and the\nvalues contents, the keys must start with a slash, ex: `,mdx(\"inlineCode\",{parentName:\"p\"},\"/path/to/file\"),`.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"http_content\"),` is useful for hosting kickstart files and so on. By\ndefault this is empty, which means no HTTP server will be started. The\naddress and port of the HTTP server will be available as variables in\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),`. This is covered in more detail below.\nExample:`),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"http_content\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"/a/b\"'),\"     \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" file(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"http/b\"'),\")\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"/foo/bar\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" templatefile(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"path\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"root\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'/preseed.cfg\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"packages\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nginx\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\")\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_port_min\"),` (int) - These are the minimum and maximum port to use for the HTTP server\nstarted to serve the `,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),`. Because Packer often runs in\nparallel, Packer will choose a randomly available port in this range to\nrun the HTTP server. If you want to force the HTTP server to be on one\nport, make this minimum and maximum port the same. By default the values\nare `,mdx(\"inlineCode\",{parentName:\"p\"},\"8000\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"9000\"),\", respectively.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_port_max\"),\" (int) - HTTP Port Max\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"http_bind_address\"),` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\nit will work with any network interface.`))),mdx(\"h3\",e({},{id:\"user-content-floppy-configuration\",\"data-text-content\":\"Floppy configuration\",className:\"g-type-display-4\"}),\"Floppy configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`A floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),\" or \",mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/provisioner/file\"}),`the file\nprovisioner`),\".\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_files\"),` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\nis booted. Currently, no support exists for creating sub-directories on\nthe floppy. Wildcard characters (`,\"\\\\\",\"*, ?, and \",\"[\",\"]\",`) are allowed. Directory\nnames are also allowed, which will add all the files found in the\ndirectory to the floppy.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_dirs\"),` ([]string) - A list of directories to place onto the floppy disk recursively. This is\nsimilar to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_files\"),` option except that the directory structure\nis preserved. This is useful for when your floppy disk includes drivers\nor if you just want to organize it's contents as a hierarchy. Wildcard\ncharacters (`,\"\\\\\",\"*, ?, and \",\"[\",\"]\",`) are allowed. The maximum summary size of\nall files in the listed directories are the same as in `,mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_files\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_content\"),\" (map\",\"[string]\",`string) - Key/Values to add to the floppy disk. The keys represent the paths, and\nthe values contents. It can be used alongside `,mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_files\"),` or\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_dirs\"),`, which is useful to add large files without loading them\ninto memory. If any paths are specified by both, the contents in\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_content\"),\" will take precedence.\"),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"Usage example (HCL):\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"floppy_files\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vendor-data\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"floppy_content\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"meta-data\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" jsonencode(local.instance_data)\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"user-data\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" templatefile(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"user-data\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"packages\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nginx\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\")\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"floppy_label\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"cidata\"'),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"floppy_label\"),\" (string) - Floppy Label\"))),mdx(\"h3\",e({},{id:\"user-content-cd-configuration\",\"data-text-content\":\"CD configuration\",className:\"g-type-display-4\"}),\"CD configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"An iso (CD) containing custom files can be made available for your build.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`By default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.`),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"cd_files\"),` ([]string) - A list of files to place onto a CD that is attached when the VM is\nbooted. This can include either files or directories; any directories\nwill be copied onto the CD recursively, preserving directory structure\nhierarchy. Symlinks will have the link's target copied into the directory\ntree on the CD where the symlink was. File globbing is allowed.`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"Usage example (JSON):\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"cd_files\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./somedirectory/meta-data\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./somedirectory/user-data\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"cd_label\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"cidata\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"Usage example (HCL):\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_files\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./somedirectory/meta-data\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./somedirectory/user-data\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_label\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"cidata\"'),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`The above will create a CD with two files, user-data and meta-data in the\nCD root. This specific example is how you would create a CD that can be\nused for an Ubuntu 20.04 autoinstall.`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"Since globbing is also supported,\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_files\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"./somedirectory/*\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_label\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"cidata\"'),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`Would also be an acceptable way to define the above cd. The difference\nbetween providing the directory with or without the glob is whether the\ndirectory itself or its contents will be at the CD root.`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`Use of this option assumes that you have a command line tool installed\nthat can handle the iso creation. Packer will use one of the following\ntools:`),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"xorriso\"),mdx(\"li\",{parentName:\"ul\"},\"mkisofs\"),mdx(\"li\",{parentName:\"ul\"},\"hdiutil (normally found in macOS)\"),mdx(\"li\",{parentName:\"ul\"},\"oscdimg (normally found in Windows as part of the Windows ADK)\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"cd_content\"),\" (map\",\"[string]\",`string) - Key/Values to add to the CD. The keys represent the paths, and the values\ncontents. It can be used alongside `,mdx(\"inlineCode\",{parentName:\"p\"},\"cd_files\"),`, which is useful to add large\nfiles without loading them into memory. If any paths are specified by both,\nthe contents in `,mdx(\"inlineCode\",{parentName:\"p\"},\"cd_content\"),\" will take precedence.\"),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"Usage example (HCL):\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_files\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vendor-data\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_content\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"meta-data\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" jsonencode(local.instance_data)\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"user-data\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" templatefile(\",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"user-data\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"packages\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"nginx\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),\")\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"cd_label\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"cidata\"'),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"cd_label\"),\" (string) - CD Label\"))),mdx(\"h3\",e({},{id:\"user-content-export-configuration\",\"data-text-content\":\"Export configuration\",className:\"g-type-display-4\"}),\"Export configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"format\"),` (string) - Either ovf or ova, this specifies the output format\nof the exported virtual machine. This defaults to ovf.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"export_opts\"),\" ([]string) - Additional options to pass to the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.virtualbox.org/manual/ch09.html#vboxmanage-export\"}),`VBoxManage\nexport`),`.\nThis can be useful for passing product information to include in the\nresulting appliance file. Packer JSON configuration file example:`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-iso\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"export_opts\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--manifest\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--vsys\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"0\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--description\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{user `vm_description`}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--version\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{user `vm_version`}}\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"format\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ova\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"    source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-iso\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"basic-example\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"export_opts\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"              \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--manifest\"'),\",\",`\n`,\"              \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--vsys\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"0\"'),\",\",`\n`,\"              \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--description\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"var\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"vm_description\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'\"'),\",\",`\n`,\"              \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--version\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token interpolation\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"$\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"{\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token keyword\"}),\"var\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\".\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),\"vm_version\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"}\")),'\"'),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,\"        \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"format\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ova\"'),`\n`,\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"A VirtualBox \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.virtualbox.org/manual/ch09.html#vboxmanage-export-ovf\"}),`VM\ndescription`),`\nmay contain arbitrary strings; the GUI interprets HTML formatting. However,\nthe JSON format does not allow arbitrary newlines within a value. Add a\nmulti-line description by preparing the string in the shell before the\npacker call like this (shell `,mdx(\"inlineCode\",{parentName:\"p\"},\">\"),` continuation character snipped for easier\ncopy & paste):`),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-shell\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"vm_description\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'some\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"multiline\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"description'\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"vm_version\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'0.2.0'\"),`\n`,`\n`,\"packer build \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"\\\\\"),`\n`,\"    -var \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vm_description=',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"${vm_description}\"),'\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"\\\\\"),`\n`,\"    -var \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vm_version=',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"${vm_version}\"),'\"'),\"         \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"\\\\\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"packer_conf.json\"'),`\n`)))),mdx(\"h3\",e({},{id:\"user-content-output-configuration\",\"data-text-content\":\"Output configuration\",className:\"g-type-display-4\"}),\"Output configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"output_directory\"),` (string) - This is the path to the directory where the\nresulting virtual machine will be created. This may be relative or absolute.\nIf relative, the path is relative to the working directory when packer\nis executed. This directory must not exist or be empty prior to running\nthe builder. By default this is output-BUILDNAME where \"BUILDNAME\" is the\nname of the build.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"output_filename\"),` (string) - This is the base name of the file (excluding the file extension) where\nthe resulting virtual machine will be created. By default this is the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"vm_name\"),\".\"))),mdx(\"h3\",e({},{id:\"user-content-run-configuration\",\"data-text-content\":\"Run configuration\",className:\"g-type-display-4\"}),\"Run configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"headless\"),` (bool) - Packer defaults to building VirtualBox virtual\nmachines by launching a GUI that shows the console of the machine\nbeing built. When this value is set to true, the machine will start\nwithout a console.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vrdp_bind_address\"),` (string) - The IP address that should be\nbinded to for VRDP. By default packer will use 127.0.0.1 for this. If you\nwish to bind to all interfaces use 0.0.0.0.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vrdp_port_min\"),` (int) - The minimum and maximum port\nto use for VRDP access to the virtual machine. Packer uses a randomly chosen\nport in this range that appears available. By default this is 5900 to\n6000. The minimum and maximum ports are inclusive.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vrdp_port_max\"),\" (int) - VRDP Port Max\"))),mdx(\"h3\",e({},{id:\"user-content-shutdown-configuration\",\"data-text-content\":\"Shutdown configuration\",className:\"g-type-display-4\"}),\"Shutdown configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_command\"),` (string) - The command to use to gracefully shut down the\nmachine once all the provisioning is done. By default this is an empty\nstring, which tells Packer to just forcefully shut down the machine unless a\nshutdown command takes place inside script so this may safely be omitted. If\none or more scripts require a reboot it is suggested to leave this blank\nsince reboots may fail and specify the final shutdown command in your\nlast script.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_timeout\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the\nshutdown_command for the virtual machine to actually shut down. If it\ndoesn't shut down in this time, it is an error. By default, the timeout is\n5m or five minutes.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"post_shutdown_delay\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait after shutting\ndown the virtual machine. If you get the error\nError removing floppy controller, you might need to set this to 5m\nor so. By default, the delay is 0s or disabled.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disable_shutdown\"),` (bool) - Packer normally halts the virtual machine after all provisioners have\nrun when no `,mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_command\"),\" is defined.  If this is set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`, Packer\n`,mdx(\"em\",{parentName:\"p\"},\"will not\"),` halt the virtual machine but will assume that you will send the stop\nsignal yourself through the preseed.cfg or your final provisioner.\nPacker will wait for a default of 5 minutes until the virtual machine is shutdown.\nThe timeout can be changed using `,mdx(\"inlineCode\",{parentName:\"p\"},\"shutdown_timeout\"),\" option.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"acpi_shutdown\"),` (bool) - If it's set to true, it will shutdown the VM via power button. It could be a good option\nwhen keeping the machine state is necessary after shutting it down.`))),mdx(\"h3\",e({},{id:\"user-content-hardware-configuration\",\"data-text-content\":\"Hardware configuration\",className:\"g-type-display-4\"}),\"Hardware configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"cpus\"),` (int) - The number of cpus to use for building the VM.\nDefaults to 1.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"memory\"),` (int) - The amount of memory to use for building the VM\nin megabytes. Defaults to 512 megabytes.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"sound\"),` (string) - Defaults to none. The type of audio device to use for\nsound when building the VM. Some of the options that are available are\ndsound, oss, alsa, pulse, coreaudio, null.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"usb\"),` (bool) - Specifies whether or not to enable the USB bus when\nbuilding the VM. Defaults to false.`))),mdx(\"h3\",e({},{id:\"user-content-vbox-manage-configuration\",\"data-text-content\":\"VBox Manage configuration\",className:\"g-type-display-4\"}),\"VBox Manage configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage\"),\" (\",\"[][]\",\"string) - Custom \",mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),` commands to execute in order to further customize\nthe virtual machine being created. The example shown below sets the memory and number of CPUs\nwithin the virtual machine:`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"vboxmanage\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--memory\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1024\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--cpus\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vboxmanage\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--memory\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1024\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\",\",`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--cpus\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\",\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"The value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage\"),` is an array of commands to execute. These commands are\nexecuted in the order defined. So in the above example, the memory will be set\nfollowed by the CPUs.\nEach command itself is an array of strings, where each string is an argument to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),\". Each argument is treated as a \",mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/engine\"}),`configuration\ntemplate`),`. The only available\nvariable is `,mdx(\"inlineCode\",{parentName:\"p\"},\"Name\"),` which is replaced with the unique name of the VM, which is\nrequired for many VBoxManage calls.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage_post\"),\" (\",\"[][]\",`string) - Identical to vboxmanage,\nexcept that it is run after the virtual machine is shutdown, and before the\nvirtual machine is exported.`))),mdx(\"h3\",e({},{id:\"user-content-communicator-configuration\",\"data-text-content\":\"Communicator configuration\",className:\"g-type-display-4\"}),\"Communicator configuration\"),mdx(\"h4\",e({},{id:\"user-content-optional-common-fields:\",\"data-text-content\":\"Optional common fields\",className:\"g-type-display-5\"}),\"Optional common fields:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"communicator\"),\" (string) - Packer currently supports three kinds of communicators:\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"none\"),` - No communicator will be used. If this is set, most\nprovisioners also can't be used.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh\"),` - An SSH connection will be established to the machine. This\nis usually the default.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm\"),\" - A WinRM connection will be established.\"))),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`In addition to the above, some builders have custom communicators they\ncan use. For example, the Docker builder has a \"docker\" communicator\nthat uses `,mdx(\"inlineCode\",{parentName:\"p\"},\"docker exec\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"docker cp\"),` to execute scripts and copy\nfiles.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"pause_before_connecting\"),` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\nguest's bootstrap script, but sometimes you may have a race condition\nwhere you need Packer to wait before attempting to connect to your\nguest.`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`If you end up in this situation, you can use the template option\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"pause_before_connecting\"),`. By default, there is no pause. For example if\nyou set `,mdx(\"inlineCode\",{parentName:\"p\"},\"pause_before_connecting\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"10m\"),` Packer will check whether it\ncan connect, as normal. But once a connection attempt is successful, it\nwill disconnect and then wait 10 minutes before connecting to the guest\nand beginning provisioning.`))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"host_port_min\"),` (int) - The minimum port to use for the Communicator port on the host machine which is forwarded\nto the SSH or WinRM port on the guest machine. By default this is 2222.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"host_port_max\"),` (int) - The maximum port to use for the Communicator port on the host machine which is forwarded\nto the SSH or WinRM port on the guest machine. Because Packer often runs in parallel,\nPacker will choose a randomly available port in this range to use as the\nhost port. By default this is 4444.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"skip_nat_mapping\"),` (bool) - Defaults to false. When enabled, Packer\ndoes not setup forwarded port mapping for communicator (SSH or WinRM) requests and uses ssh_port or winrm_port\non the host to communicate to the virtual machine.`))),mdx(\"h4\",e({},{id:\"user-content-optional-ssh-fields:\",\"data-text-content\":\"Optional SSH fields\",className:\"g-type-display-5\"}),\"Optional SSH fields:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_host\"),` (string) - The address to SSH to. This usually is automatically configured by the\nbuilder.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_port\"),\" (int) - The port to connect to SSH. This defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"22\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_username\"),\" (string) - The username to connect to SSH with. Required if using SSH.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_password\"),\" (string) - A plaintext password to use to authenticate with SSH.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_ciphers\"),` ([]string) - This overrides the value of ciphers supported by default by Golang.\nThe default value is `,`[\n\"aes128-gcm@openssh.com\",\n\"chacha20-poly1305@openssh.com\",\n\"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n]`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`Valid options for ciphers include:\n\"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"`,mdx(\"a\",e({parentName:\"p\"},{href:\"mailto:aes128-gcm@openssh.com\"}),\"aes128-gcm@openssh.com\"),`\",\n\"`,mdx(\"a\",e({parentName:\"p\"},{href:\"mailto:chacha20-poly1305@openssh.com\"}),\"chacha20-poly1305@openssh.com\"),`\",\n\"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_clear_authorized_keys\"),` (bool) - If true, Packer will attempt to remove its temporary key from\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"~/.ssh/authorized_keys\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"/root/.ssh/authorized_keys\"),`. This is a\nmostly cosmetic option, since Packer will delete the temporary private\nkey from the host system regardless of whether this is set to true\n(unless the user has set the `,mdx(\"inlineCode\",{parentName:\"p\"},\"-debug\"),` flag). Defaults to \"false\";\ncurrently only works on guests with `,mdx(\"inlineCode\",{parentName:\"p\"},\"sed\"),\" installed.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_key_exchange_algorithms\"),` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\nsupported by default by Golang. Acceptable values include:\n\"`,mdx(\"a\",e({parentName:\"p\"},{href:\"mailto:curve25519-sha256@libssh.org\"}),\"curve25519-sha256@libssh.org\"),`\", \"ecdh-sha2-nistp256\",\n\"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n\"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_certificate_file\"),` (string) - Path to user certificate used to authenticate with SSH.\nThe `,mdx(\"inlineCode\",{parentName:\"p\"},\"~\"),` can be used in path and will be expanded to the\nhome directory of current user.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_pty\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`, a PTY will be requested for the SSH connection. This defaults\nto `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_timeout\"),` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\ndetermine when the machine has booted so this is usually quite long.\nExample value: `,mdx(\"inlineCode\",{parentName:\"p\"},\"10m\"),`.\nThis defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},\"5m\"),\", unless \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_handshake_attempts\"),\" is set.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_disable_agent_forwarding\"),\" (bool) - If true, SSH agent forwarding will be disabled. Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_handshake_attempts\"),` (int) - The number of handshakes to attempt with SSH once it can connect.\nThis defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},\"10\"),\", unless a \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_timeout\"),\" is set.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_host\"),\" (string) - A bastion host to use for the actual SSH connection.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_port\"),\" (int) - The port of the bastion host. Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"22\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_agent_auth\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`, the local SSH agent will be used to authenticate with the\nbastion host. Defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_username\"),\" (string) - The username to connect to the bastion host.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_password\"),\" (string) - The password to use to authenticate with the bastion host.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_interactive\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\", the keyboard-interactive used to authenticate with bastion host.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_private_key_file\"),` (string) - Path to a PEM encoded private key file to use to authenticate with the\nbastion host. The `,mdx(\"inlineCode\",{parentName:\"p\"},\"~\"),` can be used in path and will be expanded to the\nhome directory of current user.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_bastion_certificate_file\"),` (string) - Path to user certificate used to authenticate with bastion host.\nThe `,mdx(\"inlineCode\",{parentName:\"p\"},\"~\"),` can be used in path and will be expanded to the\nhome directory of current user.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_file_transfer_method\"),\" (string) - \",mdx(\"inlineCode\",{parentName:\"p\"},\"scp\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"sftp\"),` - How to transfer files, Secure copy (default) or SSH\nFile Transfer Protocol.`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),`: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n(the default protocol for copying data) returns a a non-zero error code since the MOTW\ncannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\nwith SFTP instead `,mdx(\"inlineCode\",{parentName:\"p\"},'ssh_file_transfer_protocol = \"sftp\"'),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_proxy_host\"),\" (string) - A SOCKS proxy host to use for SSH connection\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_proxy_port\"),\" (int) - A port of the SOCKS proxy. Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"1080\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_proxy_username\"),\" (string) - The optional username to authenticate with the proxy server.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_proxy_password\"),\" (string) - The optional password to use to authenticate with the proxy server.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_keep_alive_interval\"),` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\nvalue (`,mdx(\"inlineCode\",{parentName:\"p\"},\"-1s\"),\") to disable. Example value: \",mdx(\"inlineCode\",{parentName:\"p\"},\"10s\"),\". Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"5s\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_read_write_timeout\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\nuseful if, for example, packer hangs on a connection after a reboot.\nExample: `,mdx(\"inlineCode\",{parentName:\"p\"},\"5m\"),\". Disabled by default.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_remote_tunnels\"),\" ([]string) - \")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_local_tunnels\"),\" ([]string) - \"))),mdx(\"h4\",e({},{id:\"user-content-optional-winrm-fields:\",\"data-text-content\":\"Optional WinRM fields\",className:\"g-type-display-5\"}),\"Optional WinRM fields:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_username\"),\" (string) - The username to use to connect to WinRM.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_password\"),\" (string) - The password to use to connect to WinRM.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_host\"),\" (string) - The address for WinRM to connect to.\"),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`NOTE: If using an Amazon EBS builder, you can specify the interface\nWinRM connects to via\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"ssh_interface\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_no_proxy\"),\" (bool) - Setting this to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),` adds the remote\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"host:port\"),\" to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"NO_PROXY\"),` environment variable. This has the effect of\nbypassing any configured proxies when connecting to the remote host.\nDefault to `,mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_port\"),\" (int) - The WinRM port to connect to. This defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"5985\"),` for plain\nunencrypted connection and `,mdx(\"inlineCode\",{parentName:\"p\"},\"5986\"),\" for SSL when \",mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_use_ssl\"),` is set to\ntrue.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_timeout\"),` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\nto `,mdx(\"inlineCode\",{parentName:\"p\"},\"30m\"),\" since setting up a Windows machine generally takes a long time.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_use_ssl\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\", use HTTPS for WinRM.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_insecure\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\", do not check server certificate chain and host name.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"winrm_use_ntlm\"),\" (bool) - If \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),`, NTLMv2 authentication (with session security) will be used\nfor WinRM, rather than default (basic authentication), removing the\nrequirement for basic authentication to be enabled within the target\nguest. Further reading for remote connection authentication can be found\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx\"}),\"here\"),\".\"))),mdx(\"h3\",e({},{id:\"user-content-boot-configuration\",\"data-text-content\":\"Boot Configuration\",className:\"g-type-display-4\"}),\"Boot Configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The boot configuration is very important: \",mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`There are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<bs>\"),\" - Backspace\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<del>\"),\" - Delete\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<enter> <return>\"),' - Simulates an actual \"enter\" or \"return\" keypress.')),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<esc>\"),\" - Simulates pressing the escape key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<tab>\"),\" - Simulates pressing the tab key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<f1> - <f12>\"),\" - Simulates pressing a function key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<up> <down> <left> <right>\"),\" - Simulates pressing an arrow key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<spacebar>\"),\" - Simulates pressing the spacebar.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<insert>\"),\" - Simulates pressing the insert key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<home> <end>\"),\" - Simulates pressing the home and end keys.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<pageUp> <pageDown>\"),` - Simulates pressing the page up and page down\nkeys.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<menu>\"),\" - Simulates pressing the Menu key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftAlt> <rightAlt>\"),\" - Simulates pressing the alt key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftCtrl> <rightCtrl>\"),\" - Simulates pressing the ctrl key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftShift> <rightShift>\"),\" - Simulates pressing the shift key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<leftSuper> <rightSuper>\"),\" - Simulates pressing the \\u2318 or Windows key.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<wait> <wait5> <wait10>\"),` - Adds a 1, 5 or 10 second pause before\nsending any additional keys. This is useful if you have to generally\nwait for the UI to update before typing more.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<waitXX>\"),` - Add an arbitrary pause before sending any additional keys.\nThe format of `,mdx(\"inlineCode\",{parentName:\"p\"},\"XX\"),` is a sequence of positive decimal numbers, each with\noptional fraction and a unit suffix, such as `,mdx(\"inlineCode\",{parentName:\"p\"},\"300ms\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"1.5h\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"2h45m\"),`.\nValid time units are `,mdx(\"inlineCode\",{parentName:\"p\"},\"ns\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"us\"),\" (or \",mdx(\"inlineCode\",{parentName:\"p\"},\"\\xB5s\"),\"), \",mdx(\"inlineCode\",{parentName:\"p\"},\"ms\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"s\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"m\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"h\"),`. For\nexample `,mdx(\"inlineCode\",{parentName:\"p\"},\"<wait10m>\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"<wait1m20s>\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"<XXXOn> <XXXOff>\"),` - Any printable keyboard character, and of these\n\"special\" expressions, with the exception of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"<wait>\"),` types, can\nalso be toggled on or off. For example, to simulate ctrl+c, use\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"<leftCtrlOn>c<leftCtrlOff>\"),`. Be sure to release them, otherwise they\nwill be held down until the machine reboots. To hold the `,mdx(\"inlineCode\",{parentName:\"p\"},\"c\"),` key down,\nyou would use `,mdx(\"inlineCode\",{parentName:\"p\"},\"<cOn>\"),\". Likewise, \",mdx(\"inlineCode\",{parentName:\"p\"},\"<cOff>\"),\" to release.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .HTTPIP }} {{ .HTTPPort }}\"),` - The IP and port, respectively of an\nHTTP server that is started serving the directory specified by the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),\" configuration parameter. If \",mdx(\"inlineCode\",{parentName:\"p\"},\"http_directory\"),` isn't\nspecified, these will be blank!`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .Name }}\"),\" - The name of the VM.\"))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Example boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<tab><wait>\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<tab><wait>\"'),\",\",`\n`,\"       \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The example shown below is a working boot command used to start an Ubuntu\n12.04 installer:`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<esc><esc><enter><wait>\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"/install/vmlinuz noapic \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hostname={{ .Name }} \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fb=false debconf/frontend=noninteractive \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/variant=USA console-setup/ask_detect=false \"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"initrd=/install/initrd.gz -- <enter>\"'),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<esc><esc><enter><wait>\"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"/install/vmlinuz noapic \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hostname={{ .Name }} \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"fb=false debconf/frontend=noninteractive \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"keyboard-configuration/variant=USA console-setup/ask_detect=false \"'),\",\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"initrd=/install/initrd.gz -- <enter>\"'),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`For more examples of various boot commands, see the sample projects from our\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://packer.io/community-tools#templates\"}),\"community templates page\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Please note that for the Virtuabox builder, the IP address of the HTTP server\nPacker launches for you to access files like the preseed file in the example\nabove (`,mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .HTTPIP }}\"),`) is hardcoded to 10.0.2.2. If you change the network\nof your VM you must guarantee that you can still access this HTTP server.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The boot command is sent to the VM through the \",mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),` utility in as few\ninvocations as possible. We send each character in groups of 25, with a default\ndelay of 100ms between groups. The delay alleviates issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"JSON\")),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"builders\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-vm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_keygroup_interval\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"500ms\"'),`\n`,\"      ...\",`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"HCL2\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox-vm\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"basic-example\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_keygroup_interval\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"500ms\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# ...\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h4\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-5\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_keygroup_interval\"),` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\nshould be a duration. Examples are `,mdx(\"inlineCode\",{parentName:\"p\"},\"5s\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"1m30s\"),` which will cause\nPacker to wait five seconds and one minute 30 seconds, respectively. If\nthis isn't specified, a sensible default value is picked depending on\nthe builder type.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_wait\"),` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),`. The value of this should be a duration. Examples are\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"5s\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"1m30s\"),` which will cause Packer to wait five seconds and one\nminute 30 seconds, respectively. If this isn't specified, the default is\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"10s\"),` or 10 seconds. To set boot_wait to 0s, use a negative number, such\nas \"-1s\"`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"boot_command\"),` ([]string) - This is an array of commands to type when the virtual machine is first\nbooted. The goal of these commands should be to type just enough to\ninitialize the operating system installer. Special keys can be typed as\nwell, and are covered in the section below on the boot command. If this\nis not specified, it is assumed the installer will start itself.`))),mdx(\"h3\",e({},{id:\"user-content-ssh-key-pair-automation\",\"data-text-content\":\"SSH key pair automation\",className:\"g-type-display-4\"}),\"SSH key pair automation\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The VirtualBox builders can inject the current SSH key pair's public key into\nthe template using the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SSHPublicKey\"),` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"When a private key is provided using \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_private_key_file\"),`, the key's\ncorresponding public key can be accessed using the above engine.`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"ssh_private_key_file\"),` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\nThe `,mdx(\"inlineCode\",{parentName:\"li\"},\"~\"),` can be used in path and will be expanded to the home directory\nof current user.`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"If \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_password\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_private_key_file\"),` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`For example, the public key can be provided in the boot command as a URL\nencoded string by appending `,mdx(\"inlineCode\",{parentName:\"p\"},\"| urlquery\"),\" to the variable:\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"boot_command\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"boot_command\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`A kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:`),mdx(\"pre\",e({},{className:\"language-shell\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),\"%post\",`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Newly created users need the file/folder framework for SSH key authentication.\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin class-name\"}),\"umask\"),\" 0077\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"mkdir\"),\" /etc/skel/.ssh\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"touch\"),\" /etc/skel/.ssh/authorized_keys\",`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Loop over the command line. Set interesting variables.\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"for\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token for-or-select variable\"}),\"x\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"cat\"),\" /proc/cmdline\",mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"do\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"case\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),\"$x\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"in\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"PACKER_USER\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"*\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"PACKER_USER\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"${x\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"#\"),\"*=}\"),'\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"PACKER_AUTHORIZED_KEY\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),\"*\",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# URL decode $encoded into $PACKER_AUTHORIZED_KEY\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token assign-left variable\"}),\"encoded\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"${x\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"#\"),\"*=}\"),'\"'),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"|\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token function\"}),\"tr\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),\"'+'\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),\"' '\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin class-name\"}),\"printf\"),\" -v PACKER_AUTHORIZED_KEY \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),\"'%b'\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"${encoded\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"/\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"/\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"%\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"/\"),\"\\\\\\\\x}\"),'\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"esac\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"done\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token comment\"}),\"# Create/configure packer user, if any.\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" -n \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$PACKER_USER\"),'\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token function\"}),\"useradd\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),\"$PACKER_USER\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"%',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$PACKER_USER\"),' ALL=(ALL) NOPASSWD: ALL\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\">>\"),\" /etc/sudoers.d/\",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),\"$PACKER_USER\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" -n \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$PACKER_AUTHORIZED_KEY\"),'\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),\"$PACKER_AUTHORIZED_KEY\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\">>\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token builtin class-name\"}),\"eval\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token builtin class-name\"}),\"echo\"),\" ~\",mdx(\"span\",e({parentName:\"span\"},{className:\"token string\"}),'\"',mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\"$PACKER_USER\"),'\"'),mdx(\"span\",e({parentName:\"span\"},{className:\"token variable\"}),\")\")),\"/.ssh/authorized_keys\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n`,`\n`,\"%end\",`\n`)),mdx(\"h2\",e({},{id:\"user-content-guest-additions\",\"data-text-content\":\"Guest Additions\",className:\"g-type-display-3\"}),\"Guest Additions\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Packer will automatically download the proper guest additions for the version of\nVirtualBox that is running and upload those guest additions into the virtual\nmachine so that provisioners can easily install them.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Packer downloads the guest additions from the official VirtualBox website, and\nverifies the file with the official checksums released by VirtualBox.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`After the virtual machine is up and the operating system is installed, Packer\nuploads the guest additions into the virtual machine. The path where they are\nuploaded is controllable by `,mdx(\"inlineCode\",{parentName:\"p\"},\"guest_additions_path\"),`, and defaults to\n\"VBoxGuestAdditions.iso\". Without an absolute path, it is uploaded to the home\ndirectory of the SSH user.`),mdx(\"h2\",e({},{id:\"user-content-vboxmanage-commands\",\"data-text-content\":\"VBoxManage Commands\",className:\"g-type-display-3\"}),\"VBoxManage Commands\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`In order to perform extra customization of the virtual machine, a template can\ndefine extra calls to `,mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),` to perform.\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.virtualbox.org/manual/ch09.html\"}),\"VBoxManage\"),` is the command-line\ninterface to VirtualBox where you can completely control VirtualBox. It can be\nused to do things such as set RAM, CPUs, etc.`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage\"),\" (\",\"[][]\",\"string) - Custom \",mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),` commands to execute in order to further customize\nthe virtual machine being created. The example shown below sets the memory and number of CPUs\nwithin the virtual machine:`),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In JSON:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"vboxmanage\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--memory\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1024\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--cpus\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"In HCL2:\"),mdx(\"pre\",e({parentName:\"li\"},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vboxmanage\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--memory\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"1024\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\",\",`\n`,\"   \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"modifyvm\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"{{.Name}}\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"--cpus\"'),\", \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"2\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),\",\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`)),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"The value of \",mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage\"),` is an array of commands to execute. These commands are\nexecuted in the order defined. So in the above example, the memory will be set\nfollowed by the CPUs.\nEach command itself is an array of strings, where each string is an argument to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"VBoxManage\"),\". Each argument is treated as a \",mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/engine\"}),`configuration\ntemplate`),`. The only available\nvariable is `,mdx(\"inlineCode\",{parentName:\"p\"},\"Name\"),` which is replaced with the unique name of the VM, which is\nrequired for many VBoxManage calls.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vboxmanage_post\"),\" (\",\"[][]\",`string) - Identical to vboxmanage,\nexcept that it is run after the virtual machine is shutdown, and before the\nvirtual machine is exported.`))))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"VirtualBox","url":"/packer/integrations/hashicorp/virtualbox","isCurrentPage":false},{"title":"v1.0.5","url":"/packer/integrations/hashicorp/virtualbox/v1.0.5","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"VirtualBox VM","url":"/packer/integrations/hashicorp/virtualbox/latest/components/builder/vm","isCurrentPage":true}]},"__N_SSG":true}