{"pageProps":{"metadata":{"title":"VMware | Integrations","description":"The Packer Plugin for VMware with to create virtual machine images for use with VMware products."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"67e8f68a-6274-4062-976f-2894fe090741","slug":"vmware","name":"VMware","description":"The Packer Plugin for VMware with to create virtual machine images for use with VMware products.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"official","repo_url":"https://github.com/hashicorp/packer-plugin-vmware","subdirectory":"/.web-docs","created_at":"2023-04-25T20:05:46.988Z","updated_at":"2023-08-08T17:01:21.177Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.11","1.0.8","1.0.2","1.0.0"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"c545613e-4b0d-46d9-9ded-e0a3dae755ec","integration_id":"67e8f68a-6274-4062-976f-2894fe090741","version":"1.0.11","readme":"The Packer Plugin for VMware with which to create virtual machine images for use with VMware products.\n\n### Installation\nTo install this plugin add this code into your Packer configuration and run [packer init](/packer/docs/commands/init)\n\n```hcl\npacker {\n  required_plugins {\n    vmware = {\n      version = \"~> 1\"\n      source = \"github.com/hashicorp/vmware\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/vmware\n```\n\n### Components\nThe plugin includes two builders which are able to create images, depending on your desired strategy\n\n#### Builders\n\n- [vmware-iso](/packer/integrations/hashicorp/vmware/latest/components/builder/iso) - Starts from an ISO file,\n  creates a brand new VMware VM, installs an OS, provisions software within\n  the OS, then exports that machine to create an image. This is best for\n  people who want to start from scratch.\n\n- [vmware-vmx](/packer/integrations/hashicorp/vmware/latest/components/builder/vmx) - This builder imports an\n  existing VMware machine (from a VMX file), runs provisioners on top of that\n  VM, and exports that machine to create an image. This is best if you have\n  an existing VMware VM you want to use as the source. As an additional\n  benefit, you can feed the artifact of this builder back into Packer to\n  iterate on a machine.\n\n### VMware Workstation Player on Linux\n\nTo use VMware Workstation Player with Packer on Linux, you will also need\nthe `qemu-img` command, which is available in the `qemu` package in\nRed Hat Enterprise Linux, Debian, and derivative distributions.\n\nAdditionally you will need to have the `vmrun` command, which is part of the\nVMware [Virtual Infrastructure eXtension][vix-api] [(VIX) SDK][vix-sdk].\n\nFinally, you must edit the file `/usr/lib/vmware-vix/vixwrapper-config.txt`\nand change the version specified in the fourth column to be the version in\nthe third column of the `vmplayer -v` command.\nSee [this StackOverflow thread][so] for more details.\n\n[vix-api]: https://www.vmware.com/support/developer/vix-api/\n[vix-sdk]: https://customerconnect.vmware.com/downloads/details?downloadGroup=PLAYER-1400-VIX1170&productId=687\n[so]: https://stackoverflow.com/questions/31985348/vix-vmrun-doesnt-work-with-vmware-player\n","created_at":"2024-01-17T19:11:26.558Z","updated_at":"2024-01-17T19:11:26.558Z","components":[{"id":"c497107c-7360-49c3-8825-ce63ae3b2d94","integration_release_id":"c545613e-4b0d-46d9-9ded-e0a3dae755ec","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vmware-iso`\nArtifact BuilderId: `mitchellh.vmware`\nIf remote_type is esx: Artifact BuilderId: `mitchellh.vmware-esx`\n\nThis VMware Packer builder is able to create VMware virtual machines from an ISO\nfile as a source. It currently supports building virtual machines on hosts\nrunning [VMware Fusion](https://www.vmware.com/products/fusion/overview.html) for\nOS X, [VMware\nWorkstation](https://www.vmware.com/products/workstation/overview.html) for Linux\nand Windows, and [VMware Player](https://www.vmware.com/products/player/) on\nLinux. It can also build machines directly on [VMware vSphere\nHypervisor](https://www.vmware.com/products/vsphere-hypervisor/) using SSH as\nopposed to the vSphere API.\n\nThe builder builds a virtual machine by creating a new virtual machine from\nscratch, booting it, installing an OS, provisioning software within the OS, then\nshutting it down. The result of the VMware builder is a directory containing all\nthe files necessary to run the virtual machine.\n\n## Basic Example\n\nHere is a basic example. This example is not functional. It will start the OS\ninstaller but then fail because we don't provide the preseed file for Ubuntu to\nself-install. Still, the example serves to show the basic configuration:\n\n**JSON**\n\n```json\n{\n  \"type\": \"vmware-iso\",\n  \"iso_url\": \"http://old-releases.ubuntu.com/releases/precise/ubuntu-12.04.2-server-amd64.iso\",\n  \"iso_checksum\": \"md5:af5f788aee1b32c4b2634734309cc9e9\",\n  \"ssh_username\": \"packer\",\n  \"ssh_password\": \"packer\",\n  \"shutdown_command\": \"shutdown -P now\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"vmware-iso\" \"basic-example\" {\n  iso_url = \"http://old-releases.ubuntu.com/releases/precise/ubuntu-12.04.2-server-amd64.iso\"\n  iso_checksum = \"md5:af5f788aee1b32c4b2634734309cc9e9\"\n  ssh_username = \"packer\"\n  ssh_password = \"packer\"\n  shutdown_command = \"shutdown -P now\"\n}\n\nbuild {\n  sources = [\"sources.vmware-iso.basic-example\"]\n}\n```\n\n\n## VMware-ISO Builder Configuration Reference\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [ISO](#iso-configuration),\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[CD](#cd-configuration),\n[Boot](#boot-configuration),\n[Driver](#driver-configuration),\n[Hardware](#hardware-configuration),\n[Output](#output-configuration),\n[Run](#run-configuration),\n[Shutdown](#shutdown-configuration),\n[Communicator](#communicator-configuration),\n[Tools](#tools-configuration),\n[vmx](#vmx-configuration),\n[Export](#export-configuration),\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/vmware/iso/config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_size` (uint) - The size of the hard disk for the VM in megabytes.\n  The builder uses expandable, not fixed-size virtual hard disks, so the\n  actual file representing the disk will not use the full size unless it\n  is full. By default this is set to 40000 (about 40 GB).\n\n- `cdrom_adapter_type` (string) - The adapter type (or bus) that will be used\n  by the cdrom device. This is chosen by default based on the disk adapter\n  type. VMware tends to lean towards ide for the cdrom device unless\n  sata is chosen for the disk adapter and so Packer attempts to mirror\n  this logic. This field can be specified as either ide, sata, or scsi.\n\n- `guest_os_type` (string) - The guest OS type being installed. This will be\n  set in the VMware VMX. By default this is other. By specifying a more\n  specific OS type, VMware may perform some optimizations or virtual hardware\n  changes to better support the operating system running in the\n  virtual machine. Valid values differ by platform and version numbers, and may\n  not match other VMware API's representation of the guest OS names. Consult your\n  platform for valid values.\n\n- `version` (string) - The [vmx hardware\n  version](http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&cmd=displayKC&externalId=1003746)\n  for the new virtual machine. Only the default value has been tested, any\n  other value is experimental. Default value is `9`.\n\n- `vm_name` (string) - This is the name of the VMX file for the new virtual\n  machine, without the file extension. By default this is packer-BUILDNAME,\n  where \"BUILDNAME\" is the name of the build.\n\n- `vmx_disk_template_path` (string) - VMX Disk Template Path\n\n- `vmx_template_path` (string) - Path to a [configuration template](/packer/docs/templates/legacy_json_templates/engine) that\n  defines the contents of the virtual machine VMX file for VMware. The\n  engine has access to the template variables `{{ .DiskNumber }}` and\n  `{{ .DiskName }}`.\n  \n  This is for **advanced users only** as this can render the virtual machine\n  non-functional. See below for more information. For basic VMX\n  modifications, try `vmx_data` first.\n\n- `snapshot_name` (string) - This is the name of the initial snapshot created after provisioning and cleanup.\n  if left blank, no initial snapshot will be created\n\n<!-- End of code generated from the comments of the Config struct in builder/vmware/iso/config.go; -->\n\n\n### Extra Disk Configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vmware/common/disk_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_additional_size` ([]uint) - The size(s) of any additional\n  hard disks for the VM in megabytes. If this is not specified then the VM\n  will only contain a primary hard disk. The builder uses expandable, not\n  fixed-size virtual hard disks, so the actual file representing the disk will\n  not use the full size unless it is full.\n\n- `disk_adapter_type` (string) - The adapter type of the VMware virtual disk to create. This option is\n  for advanced usage, modify only if you know what you're doing. Some of\n  the options you can specify are `ide`, `sata`, `nvme` or `scsi` (which\n  uses the \"lsilogic\" scsi interface by default). If you specify another\n  option, Packer will assume that you're specifying a `scsi` interface of\n  that specified type. For more information, please consult [Virtual Disk\n  Manager User's Guide](http://www.vmware.com/pdf/VirtualDiskManager.pdf)\n  for desktop VMware clients. For ESXi, refer to the proper ESXi\n  documentation.\n\n- `vmdk_name` (string) - The filename of the virtual disk that'll be created,\n  without the extension. This defaults to \"disk\".\n\n- `disk_type_id` (string) - The type of VMware virtual disk to create. This\n  option is for advanced usage.\n  \n    For desktop VMware clients:\n  \n    Type ID | Description\n    ------- | ---\n    `0`     | Growable virtual disk contained in a single file (monolithic sparse).\n    `1`     | Growable virtual disk split into 2GB files (split sparse).\n    `2`     | Preallocated virtual disk contained in a single file (monolithic flat).\n    `3`     | Preallocated virtual disk split into 2GB files (split flat).\n    `4`     | Preallocated virtual disk compatible with ESX server (VMFS flat).\n    `5`     | Compressed disk optimized for streaming.\n  \n    The default is `1`.\n  \n    For ESXi, this defaults to `zeroedthick`. The available options for ESXi\n    are: `zeroedthick`, `eagerzeroedthick`, `thin`. `rdm:dev`, `rdmp:dev`,\n    `2gbsparse` are not supported. Due to default disk compaction, when using\n    `zeroedthick` or `eagerzeroedthick` set `skip_compaction` to `true`.\n  \n    For more information, please consult the [Virtual Disk Manager User's\n    Guide](https://www.vmware.com/pdf/VirtualDiskManager.pdf) for desktop\n    VMware clients. For ESXi, refer to the proper ESXi documentation.\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vmware/common/disk_config.go; -->\n\n\n### ISO Configuration\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\nBy default, Packer will symlink, download or copy image files to the Packer\ncache into a \"`hash($iso_url+$iso_checksum).$iso_target_extension`\" file.\nPacker uses [hashicorp/go-getter](https://github.com/hashicorp/go-getter) in\nfile mode in order to perform a download.\n\ngo-getter supports the following protocols:\n\n* Local files\n* Git\n* Mercurial\n* HTTP\n* Amazon S3\n\nExamples:\ngo-getter can guess the checksum type based on `iso_checksum` length, and it is\nalso possible to specify the checksum type.\n\nIn JSON:\n\n```json\n\n\t\"iso_checksum\": \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file://./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\nIn HCL2:\n\n```hcl\n\n\tiso_checksum = \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file://./shasums.txt\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:./shasums.txt\",\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n#### Required:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_checksum` (string) - The checksum for the ISO file or virtual hard drive file. The type of\n  the checksum is specified within the checksum field as a prefix, ex:\n  \"md5:{$checksum}\". The type of the checksum can also be omitted and\n  Packer will try to infer it based on string length. Valid values are\n  \"none\", \"{$checksum}\", \"md5:{$checksum}\", \"sha1:{$checksum}\",\n  \"sha256:{$checksum}\", \"sha512:{$checksum}\" or \"file:{$path}\". Here is a\n  list of valid checksum values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `iso_url` (string) - A URL to the ISO containing the installation image or virtual hard drive\n  (VHD or VHDX) file to clone.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_urls` ([]string) - Multiple URLs for the ISO to download. Packer will try these in order.\n  If anything goes wrong attempting to download or while downloading a\n  single URL, it will move on to the next. All URLs must point to the same\n  file (same checksum). By default this is empty and `iso_url` is used.\n  Only one of `iso_url` or `iso_urls` can be specified.\n\n- `iso_target_path` (string) - The path where the iso should be saved after download. By default will\n  go in the packer cache, with a hash of the original filename and\n  checksum as its name.\n\n- `iso_target_extension` (string) - The extension of the iso file after download. This defaults to `iso`.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Shutdown configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ShutdownConfig struct in shutdowncommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the machine once all\n  provisioning is complete. By default this is an empty string, which\n  tells Packer to just forcefully shut down the machine. This setting can\n  be safely omitted if for example, a shutdown command to gracefully halt\n  the machine is configured inside a provisioning script. If one or more\n  scripts require a reboot it is suggested to leave this blank (since\n  reboots may fail) and instead specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the shutdown_command for the\n  virtual machine to actually shut down. If the machine doesn't shut down\n  in this time it is considered an error. By default, the time out is \"5m\"\n  (five minutes).\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in shutdowncommand/config.go; -->\n\n\n### Driver configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the DriverConfig struct in builder/vmware/common/driver_config.go; DO NOT EDIT MANUALLY -->\n\n- `cleanup_remote_cache` (bool) - When set to true, Packer will cleanup the cache folder where the ISO file is stored during the build on the remote machine.\n  By default, this is set to false.\n\n- `fusion_app_path` (string) - Path to \"VMware Fusion.app\". By default this is\n  /Applications/VMware Fusion.app but this setting allows you to\n  customize this.\n\n- `remote_type` (string) - The type of remote machine that will be used to\n  build this VM rather than a local desktop product. The only value accepted\n  for this currently is esx5. If this is not set, a desktop product will\n  be used. By default, this is not set.\n\n- `remote_datastore` (string) - The path to the datastore where the VM will be stored\n  on the ESXi machine.\n\n- `remote_cache_datastore` (string) - The path to the datastore where supporting files\n  will be stored during the build on the remote machine.\n\n- `remote_cache_directory` (string) - The path where the ISO and/or floppy files will\n  be stored during the build on the remote machine. The path is relative to\n  the remote_cache_datastore on the remote machine.\n\n- `remote_host` (string) - The host of the remote machine used for access.\n  This is only required if remote_type is enabled.\n\n- `remote_port` (int) - The SSH port of the remote machine\n\n- `remote_username` (string) - The SSH username used to access the remote machine.\n\n- `remote_password` (string) - The SSH password for access to the remote machine.\n\n- `remote_private_key_file` (string) - The SSH key for access to the remote machine.\n\n- `skip_validate_credentials` (bool) - When Packer is preparing to run a\n  remote esxi build, and export is not disable, by default it runs a no-op\n  ovftool command to make sure that the remote_username and remote_password\n  given are valid. If you set this flag to true, Packer will skip this\n  validation. Default: false.\n\n<!-- End of code generated from the comments of the DriverConfig struct in builder/vmware/common/driver_config.go; -->\n\n\n### Hardware configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the HWConfig struct in builder/vmware/common/hw_config.go; DO NOT EDIT MANUALLY -->\n\n- `cpus` (int) - The number of cpus to use when building the VM.\n\n- `memory` (int) - The amount of memory to use when building the VM in megabytes.\n\n- `cores` (int) - The number of cores per socket to use when building the VM. This\n  corresponds to the cpuid.coresPerSocket option in the .vmx file.\n\n- `network` (string) - This is the network type that the virtual machine will be created with.\n  This can be one of the generic values that map to a device such as\n  hostonly, nat, or bridged. If the network is not one of these values,\n  then it is assumed to be a VMware network device. (VMnet0..x)\n\n- `network_adapter_type` (string) - This is the ethernet adapter type the the virtual machine will be\n  created with. By default the `e1000` network adapter type will be used\n  by Packer. For more information, please consult [Choosing a network\n  adapter for your virtual\n  machine](https://kb.vmware.com/s/article/1001805) for desktop VMware\n  clients. For ESXi, refer to the proper ESXi documentation.\n\n- `network_name` (string) - The custom name of the network. Sets the vmx value \"ethernet0.networkName\"\n\n- `sound` (bool) - Specify whether to enable VMware's virtual soundcard device when\n  building the VM. Defaults to false.\n\n- `usb` (bool) - Enable VMware's USB bus when building the guest VM. Defaults to false.\n  To enable usage of the XHCI bus for USB 3 (5 Gbit/s), one can use the\n  vmx_data option to enable it by specifying true for the usb_xhci.present\n  property.\n\n- `serial` (string) - This specifies a serial port to add to the VM. It has a format of\n  `Type:option1,option2,...`. The field `Type` can be one of the following\n  values: `FILE`, `DEVICE`, `PIPE`, `AUTO`, or `NONE`.\n  \n  * `FILE:path(,yield)` - Specifies the path to the local file to be used\n    as the serial port.\n  \n    * `yield` (bool) - This is an optional boolean that specifies\n      whether the vm should yield the cpu when polling the port. By\n      default, the builder will assume this as `FALSE`.\n  \n  * `DEVICE:path(,yield)` - Specifies the path to the local device to be\n     used as the serial port. If `path` is empty, then default to the first\n    serial port.\n  \n    * `yield` (bool) - This is an optional boolean that specifies\n      whether the vm should yield the cpu when polling the port. By\n      default, the builder will assume this as `FALSE`.\n  \n  * `PIPE:path,endpoint,host(,yield)` - Specifies to use the named-pipe\n    \"path\" as a serial port. This has a few options that determine how the\n    VM should use the named-pipe.\n  \n    * `endpoint` (string) - Chooses the type of the VM-end, which can be\n      either a `client` or `server`.\n  \n    * `host` (string)     - Chooses the type of the host-end, which can\n      be either `app` (application) or `vm` (another virtual-machine).\n  \n    * `yield` (bool)      - This is an optional boolean that specifies\n      whether the vm should yield the cpu when polling the port. By\n      default, the builder will assume this as `FALSE`.\n  \n  * `AUTO:(yield)` - Specifies to use auto-detection to determine the\n    serial port to use. This has one option to determine how the VM should\n    support the serial port.\n  \n    * `yield` (bool) - This is an optional boolean that specifies\n      whether the vm should yield the cpu when polling the port. By\n      default, the builder will assume this as `FALSE`.\n  \n  * `NONE` - Specifies to not use a serial port. (default)\n\n- `parallel` (string) - This specifies a parallel port to add to the VM. It has the format of\n  `Type:option1,option2,...`. Type can be one of the following values:\n  `FILE`, `DEVICE`, `AUTO`, or `NONE`.\n  \n  * `FILE:path` \t\t- Specifies the path to the local file to be used\n    for the parallel port.\n  \n  * `DEVICE:path`\t \t- Specifies the path to the local device to be used\n    for the parallel port.\n  \n  * `AUTO:direction`   - Specifies to use auto-detection to determine the\n    parallel port. Direction can be `BI` to specify bidirectional\n    communication or `UNI` to specify unidirectional communication.\n  \n  * `NONE` \t\t\t- Specifies to not use a parallel port. (default)\n\n<!-- End of code generated from the comments of the HWConfig struct in builder/vmware/common/hw_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/vmware/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path on your local machine (the one running Packer) to the\n  directory where the resulting virtual machine will be created.\n  This may be relative or absolute. If relative, the path is relative to\n  the working directory when packer is executed.\n  \n  If you are running a remote esx build, the output_dir is the path on your\n  local machine (the machine running Packer) to which Packer will export\n  the vm if you have `\"skip_export\": false`. If you want to manage the\n  virtual machine's path on the remote datastore, use `remote_output_dir`.\n  \n  This directory must not exist or be empty prior to running\n  the builder.\n  \n  By default this is output-BUILDNAME where \"BUILDNAME\" is the name of the\n  build.\n\n- `remote_output_directory` (string) - This is the directoy on your remote esx host where you will save your\n  vm, relative to your remote_datastore.\n  \n  This option's default value is your `vm_name`, and the final path of your\n  vm will be vmfs/volumes/$remote_datastore/$vm_name/$vm_name.vmx where\n  `$remote_datastore` and `$vm_name` match their corresponding template\n  options\n  \n  For example, setting `\"remote_output_directory\": \"path/to/subdir`\n  will create a directory `/vmfs/volumes/remote_datastore/path/to/subdir`.\n  \n  Packer will not create the remote datastore for you; it must already\n  exist. However, Packer will create all directories defined in the option\n  that do not currently exist.\n  \n  This option will be ignored unless you are building on a remote esx host.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/vmware/common/output_config.go; -->\n\n\n### Run configuration\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n~> **Note:** If [vnc_over_websocket](#vnc_over_websocket) is set to true, any other VNC configuration will be ignored.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VMware virtual machines\n  by launching a GUI that shows the console of the machine being built. When\n  this value is set to true, the machine will start without a console. For\n  VMware machines, Packer will output VNC connection information in case you\n  need to connect to the console to debug the build process.\n  Some users have experienced issues where Packer cannot properly connect\n  to a VM if it is headless; this appears to be a result of not ever having\n  launched the VMWare GUI and accepting the evaluation license, or\n  supplying a real license. If you experience this, launching VMWare and\n  accepting the license should resolve your problem.\n\n- `vnc_bind_address` (string) - The IP address that should be\n  binded to for VNC. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vnc_port_min` (int) - The minimum and maximum port\n  to use for VNC access to the virtual machine. The builder uses VNC to type\n  the initial boot_command. Because Packer generally runs in parallel,\n  Packer uses a randomly chosen port in this range that appears available. By\n  default this is 5900 to 6000. The minimum and maximum ports are\n  inclusive.\n\n- `vnc_port_max` (int) - VNC Port Max\n\n- `vnc_disable_password` (bool) - Don't auto-generate a VNC password that\n  is used to secure the VNC communication with the VM. This must be set to\n  true if building on ESXi 6.5 and 6.7 with VNC enabled. Defaults to\n  false.\n\n- `vnc_over_websocket` (bool) - When set to true, Packer will connect to the remote VNC server over a websocket connection\n  and any other VNC configuration option will be ignored.\n  Remote builds using ESXi 6.7+ allows to connect to the VNC server only over websocket,\n  for these the `vnc_over_websocket` must be set to true.\n\n- `insecure_connection` (bool) - Do not validate VNC over websocket server's TLS certificate. Defaults to `false`.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; -->\n\n\n### Tools configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ToolsConfig struct in builder/vmware/common/tools_config.go; DO NOT EDIT MANUALLY -->\n\n- `tools_upload_flavor` (string) - The flavor of the VMware Tools ISO to\n  upload into the VM. Valid values are darwin, linux, and windows. By\n  default, this is empty, which means VMware tools won't be uploaded.\n\n- `tools_upload_path` (string) - The path in the VM to upload the VMware tools. This only takes effect if\n  `tools_upload_flavor` is non-empty. This is a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine) that has a single valid variable:\n  `Flavor`, which will be the value of `tools_upload_flavor`. By default\n  the upload path is set to `{{.Flavor}}.iso`. This setting is not used\n  when `remote_type` is `esx5`.\n\n- `tools_source_path` (string) - The path on your local machine to fetch the vmware tools from. If this\n  is not set but the tools_upload_flavor is set, then Packer will try to\n  load the VMWare tools from the VMWare installation directory.\n\n<!-- End of code generated from the comments of the ToolsConfig struct in builder/vmware/common/tools_config.go; -->\n\n\n### VMX configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the VMXConfig struct in builder/vmware/common/vmx_config.go; DO NOT EDIT MANUALLY -->\n\n- `vmx_data` (map[string]string) - Arbitrary key/values to enter\n  into the virtual machine VMX file. This is for advanced users who want to\n  set properties that aren't yet supported by the builder.\n\n- `vmx_data_post` (map[string]string) - Identical to vmx_data,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n- `vmx_remove_ethernet_interfaces` (bool) - Remove all ethernet interfaces\n  from the VMX file after building. This is for advanced users who understand\n  the ramifications, but is useful for building Vagrant boxes since Vagrant\n  will create ethernet interfaces when provisioning a box. Defaults to\n  false.\n\n- `display_name` (string) - The name that will appear in your vSphere client,\n  and will be used for the vmx basename. This will override the \"displayname\"\n  value in your vmx file. It will also override the \"displayname\" if you have\n  set it in the \"vmx_data\" Packer option. This option is useful if you are\n  chaining vmx builds and want to make sure that the display name of each step\n  in the chain is unique.\n\n<!-- End of code generated from the comments of the VMXConfig struct in builder/vmware/common/vmx_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vmware/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either \"ovf\", \"ova\" or \"vmx\", this specifies the output\n  format of the exported virtual machine. This defaults to \"ovf\" for\n  remote (esx) builds, and \"vmx\" for local builds.\n  Before using this option, you need to install ovftool.\n  Since ovftool is only capable of password based authentication\n  remote_password must be set when exporting the VM from a remote instance.\n  If you are building locally, Packer will create a vmx and then\n  export that vm to an ovf or ova. Packer will not delete the vmx and vmdk\n  files; this is left up to the user if you don't want to keep those\n  files.\n\n- `ovftool_options` ([]string) - Extra options to pass to ovftool during export. Each item in the array\n  is a new argument. The options `--noSSLVerify`, `--skipManifestCheck`,\n  and `--targetType` are used by Packer for remote exports, and should not\n  be passed to this argument. For ovf/ova exports from local builds, Packer\n  does not automatically set any ovftool options.\n\n- `skip_export` (bool) - Defaults to `false`. When true, Packer will not export the VM. This can\n  be useful if the build output is not the resultant image, but created\n  inside the VM.\n\n- `keep_registered` (bool) - Set this to true if you would like to keep a remotely-built\n  VM registered with the remote ESXi server. If you do not need to export\n  the vm, then also set `skip_export: true` in order to avoid unnecessarily\n  using ovftool to export the vm. Defaults to false.\n\n- `skip_compaction` (bool) - VMware-created disks are defragmented and\n  compacted at the end of the build process using vmware-vdiskmanager or\n  vmkfstools in ESXi. In certain rare cases, this might actually end up\n  making the resulting disks slightly larger. If you find this to be the case,\n  you can disable compaction using this configuration value. Defaults to\n  false. Default to true for ESXi when disk_type_id is not explicitly\n  defined and false otherwise.\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vmware/common/export_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n## Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot command \"typed\" character for character over a VNC connection to\nthe machine, simulating a human actually typing the keyboard.\n\nKeystrokes are typed as separate key up/down events over VNC with a default\n100ms delay. The delay alleviates issues with latency and CPU contention.\nYou can tune this delay on a per-builder basis by specifying\n\"boot_key_interval\" in your Packer template.\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n-> **Note**: for the `HTTPIP` to be resolved correctly, your VM's network\nconfiguration has to include a `hostonly` or `nat` type network interface.\nIf you are using this feature, it is recommended to leave the default network\nconfiguration while you are building the VM, and use the `vmx_data_post` hook\nto modify the network configuration after the VM is done building.\n\n### Optional:\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `disable_vnc` (bool) - Whether to create a VNC connection or not. A boot_command cannot be used\n  when this is true. Defaults to false.\n\n- `boot_key_interval` (duration string | ex: \"1h5m2s\") - Time in ms to wait between each key press\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](/community-tools#templates).\n\n## VMX Template\n\nThe heart of a VMware machine is the \"vmx\" file. This contains all the virtual\nhardware metadata necessary for the VM to function. Packer by default uses a\n[safe, flexible VMX\nfile](https://github.com/hashicorp/packer/blob/20541a7eda085aa5cf35bfed5069592ca49d106e/builder/vmware/step_create_vmx.go#L84).\nBut for advanced users, this template can be customized. This allows Packer to\nbuild virtual machines of effectively any guest operating system type.\n\n~> **This is an advanced feature.** Modifying the VMX template can easily\ncause your virtual machine to not boot properly. Please only modify the template\nif you know what you're doing.\n\nWithin the template, a handful of variables are available so that your template\ncan continue working with the rest of the Packer machinery. Using these\nvariables isn't required, however.\n\n- `Name` - The name of the virtual machine.\n- `GuestOS` - The VMware-valid guest OS type.\n- `DiskName` - The filename (without the suffix) of the main virtual disk.\n- `ISOPath` - The path to the ISO to use for the OS installation.\n- `Version` - The Hardware version VMWare will execute this vm under. Also\n  known as the `virtualhw.version`.\n\n## Building on a Remote vSphere Hypervisor\n\nIn addition to using the desktop products of VMware locally to build virtual\nmachines, Packer can use a remote VMware Hypervisor to build the virtual\nmachine.\n\n-> **Note:** Packer supports ESXi 5.1 and above.\n\nBefore using a remote vSphere Hypervisor, you need to enable GuestIPHack by\nrunning the following command:\n\n```shell-session\n$ esxcli system settings advanced set -o /Net/GuestIPHack -i 1\n```\n\nWhen using a remote VMware Hypervisor, the builder still downloads the ISO and\nvarious files locally, and uploads these to the remote machine. Packer currently\nuses SSH to communicate to the ESXi machine rather than the vSphere API.\nIf you want to use vSphere API, see the [vsphere-iso](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso) builder.\n\nPacker also requires VNC to issue boot commands during a build, which may be\ndisabled on some remote VMware Hypervisors. Please consult the appropriate\ndocumentation on how to update VMware Hypervisor's firewall to allow these\nconnections. VNC can be disabled by not setting a `boot_command` and setting\n`disable_vnc` to `true`.\n\nPlease note that you should disable vMotion for the host you intend to run\nPacker builds on; a vMotion event will cause the Packer build to fail.\n\nTo use a remote VMware vSphere Hypervisor to build your virtual machine, fill in\nthe required `remote_*` configurations:\n\n- `remote_type` - This must be set to \"esx5\".\n\n- `remote_host` - The host of the remote machine.\n\nAdditionally, there are some optional configurations that you'll likely have to\nmodify as well:\n\n- `remote_port` - The SSH port of the remote machine\n\n- `remote_datastore` - The path to the datastore where the VM will be stored\non the ESXi machine.\n\n- `remote_cache_datastore` - The path to the datastore where supporting files\nwill be stored during the build on the remote machine.\n\n- `remote_cache_directory` - The path where the ISO and/or floppy files will\nbe stored during the build on the remote machine. The path is relative to\nthe `remote_cache_datastore` on the remote machine.\n\n- `remote_username` - The SSH username used to access the remote machine.\n\n- `remote_password` - The SSH password for access to the remote machine.\n\n- `remote_private_key_file` - The SSH key for access to the remote machine.\n\n- `format` (string) - Either \"ovf\", \"ova\" or \"vmx\", this specifies the output\nformat of the exported virtual machine. This defaults to \"ovf\".\nBefore using this option, you need to install `ovftool`. This option\ncurrently only works when option remote_type is set to \"esx5\".\nSince ovftool is only capable of password based authentication\n`remote_password` must be set when exporting the VM.\n\n- `vnc_disable_password` - This must be set to \"true\" when using VNC with\nESXi 6.5 or 6.7.\n\n\n### VNC port discovery\n\nPacker needs to decide on a port to use for VNC when building remotely. To find\nan open port, we try to connect to ports in the range of `vnc_port_min` to\n`vnc_port_max`. If we notice something is listening on a port in the range, we\ntry to connect to the next one, and so on until we find a port that has nothing\nlistening on it. If you have many clients building on the ESXi host, there\nmight be competition for the VNC ports. You can adjust how long Packer waits\nfor a connection timeout by setting `PACKER_ESXI_VNC_PROBE_TIMEOUT`. This\ndefaults to 15 seconds. Set this shorter if VNC connections are refused, and\nset it longer if Packer can't find an open port. This is intended as an\nadvanced configuration option. Please make sure your firewall settings are\ncorrect before adjusting.\n\n### Using a Floppy for Linux kickstart file or preseed\n\nDepending on your network configuration, it may be difficult to use packer's\nbuilt-in HTTP server with ESXi. Instead, you can provide a kickstart or preseed\nfile by attaching a floppy disk. An example below, based on RHEL:\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vmware-iso\",\n      \"floppy_files\": [\"folder/ks.cfg\"],\n      \"boot_command\": \"<tab> text ks=floppy <enter><wait>\"\n    }\n  ]\n}\n```\n\nIt's also worth noting that `ks=floppy` has been deprecated. Later versions of\nthe Anaconda installer (used in RHEL/CentOS 7 and Fedora) may require\na different syntax to source a kickstart file from a mounted floppy image.\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vmware-iso\",\n      \"floppy_files\": [\"folder/ks.cfg\"],\n      \"boot_command\": \"<tab> inst.text inst.ks=hd:fd0:/ks.cfg <enter><wait>\"\n    }\n  ]\n}\n```\n\n### SSH key pair automation\n\nThe VMware builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n","created_at":"2024-01-17T19:11:27.967Z","updated_at":"2024-01-17T19:11:27.967Z","name":"VMware ISO","slug":"iso","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"432b2c11-74ff-47e3-ad3f-6cf63ff4a1f5","integration_release_id":"c545613e-4b0d-46d9-9ded-e0a3dae755ec","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vmware-vmx`\nArtifact BuilderId: `mitchellh.vmware`\nIf remote_type is esx: Artifact BuilderId: `mitchellh.vmware-esx`\n\nThis VMware Packer builder is able to create VMware virtual machines from an\nexisting VMware virtual machine (a VMX file). It currently supports building\nvirtual machines on hosts running [VMware Fusion\nProfessional](https://www.vmware.com/products/fusion-professional/) for OS X,\n[VMware Workstation](https://www.vmware.com/products/workstation/overview.html)\nfor Linux and Windows, and [VMware\nPlayer](https://www.vmware.com/products/player/) on Linux.\n\nThe builder builds a virtual machine by cloning the VMX file using the clone\ncapabilities introduced in VMware Fusion Professional 6, Workstation 10, and\nPlayer 6. After cloning the VM, it provisions software within the new machine,\nshuts it down, and compacts the disks. The resulting folder contains a new\nVMware virtual machine.\n\n## Basic Example\n\nHere is an example. This example is fully functional as long as the source path\npoints to a real VMX file with the proper settings:\n\n**JSON**\n\n```json\n{\n  \"type\": \"vmware-vmx\",\n  \"source_path\": \"/path/to/a/vm.vmx\",\n  \"ssh_username\": \"root\",\n  \"ssh_password\": \"root\",\n  \"shutdown_command\": \"shutdown -P now\"\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"vmware-vmx\" \"basic-example\" {\n  source_path = \"/path/to/a/vm.vmx\"\n  ssh_username = \"root\"\n  ssh_password = \"root\"\n  shutdown_command = \"shutdown -P now\"\n}\n\nbuild {\n  sources = [\"sources.vmware-vmx.basic-example\"]\n}\n```\n\n\n## Configuration Reference\n\nThere are many configuration options available for the VMware builder. They are\norganized below into two categories: required and optional. Within each\ncategory, the available options are alphabetized and described.\n\nThere are many configuration options available for the builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for\n[HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[Boot](#boot-configuration),\n[Driver](#driver-configuration),\n[Output](#output-configuration),\n[Run](#run-configuration),\n[Shutdown](#shutdown-configuration),\n[Communicator](#communicator-configuration),\n[Tools](#tools-configuration),\n[vmx](#vmx-configuration),\n[Export](#export-configuration),\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/vmware/vmx/config.go; DO NOT EDIT MANUALLY -->\n\n- `source_path` (string) - Path to the source VMX file to clone. If\n  remote_type is enabled then this specifies a path on the remote_host.\n\n<!-- End of code generated from the comments of the Config struct in builder/vmware/vmx/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/vmware/vmx/config.go; DO NOT EDIT MANUALLY -->\n\n- `linked` (bool) - By default Packer creates a 'full' clone of the virtual machine\n  specified in source_path. The resultant virtual machine is fully\n  independant from the parent it was cloned from.\n  \n  Setting linked to true instead causes Packer to create the virtual\n  machine as a 'linked' clone. Linked clones use and require ongoing\n  access to the disks of the parent virtual machine. The benefit of a\n  linked clone is that the clones virtual disk is typically very much\n  smaller than would be the case for a full clone. Additionally, the\n  cloned virtual machine can also be created much faster. Creating a\n  linked clone will typically only be of benefit in some advanced build\n  scenarios. Most users will wish to create a full clone instead. Defaults\n  to false.\n\n- `attach_snapshot` (string) - Default to `null/empty`. The name of an\n  **existing** snapshot to which the builder shall attach the VM before\n  starting it. If no snapshot is specified the builder will simply start the\n  VM from it's current state i.e. snapshot.\n\n- `vm_name` (string) - This is the name of the VMX file for the new virtual\n  machine, without the file extension. By default this is packer-BUILDNAME,\n  where \"BUILDNAME\" is the name of the build.\n\n- `snapshot_name` (string) - This is the name of the initial snapshot created after provisioning and cleanup.\n  if left blank, no initial snapshot will be created\n\n<!-- End of code generated from the comments of the Config struct in builder/vmware/vmx/config.go; -->\n\n\n### Extra Disk Configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vmware/common/disk_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_additional_size` ([]uint) - The size(s) of any additional\n  hard disks for the VM in megabytes. If this is not specified then the VM\n  will only contain a primary hard disk. The builder uses expandable, not\n  fixed-size virtual hard disks, so the actual file representing the disk will\n  not use the full size unless it is full.\n\n- `disk_adapter_type` (string) - The adapter type of the VMware virtual disk to create. This option is\n  for advanced usage, modify only if you know what you're doing. Some of\n  the options you can specify are `ide`, `sata`, `nvme` or `scsi` (which\n  uses the \"lsilogic\" scsi interface by default). If you specify another\n  option, Packer will assume that you're specifying a `scsi` interface of\n  that specified type. For more information, please consult [Virtual Disk\n  Manager User's Guide](http://www.vmware.com/pdf/VirtualDiskManager.pdf)\n  for desktop VMware clients. For ESXi, refer to the proper ESXi\n  documentation.\n\n- `vmdk_name` (string) - The filename of the virtual disk that'll be created,\n  without the extension. This defaults to \"disk\".\n\n- `disk_type_id` (string) - The type of VMware virtual disk to create. This\n  option is for advanced usage.\n  \n    For desktop VMware clients:\n  \n    Type ID | Description\n    ------- | ---\n    `0`     | Growable virtual disk contained in a single file (monolithic sparse).\n    `1`     | Growable virtual disk split into 2GB files (split sparse).\n    `2`     | Preallocated virtual disk contained in a single file (monolithic flat).\n    `3`     | Preallocated virtual disk split into 2GB files (split flat).\n    `4`     | Preallocated virtual disk compatible with ESX server (VMFS flat).\n    `5`     | Compressed disk optimized for streaming.\n  \n    The default is `1`.\n  \n    For ESXi, this defaults to `zeroedthick`. The available options for ESXi\n    are: `zeroedthick`, `eagerzeroedthick`, `thin`. `rdm:dev`, `rdmp:dev`,\n    `2gbsparse` are not supported. Due to default disk compaction, when using\n    `zeroedthick` or `eagerzeroedthick` set `skip_compaction` to `true`.\n  \n    For more information, please consult the [Virtual Disk Manager User's\n    Guide](https://www.vmware.com/pdf/VirtualDiskManager.pdf) for desktop\n    VMware clients. For ESXi, refer to the proper ESXi documentation.\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vmware/common/disk_config.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\nA floppy can be made available for your build. This is most useful for\nunattended Windows installs, which look for an Autounattend.xml file on\nremovable media. By default, no floppy will be attached. All files listed in\nthis setting get placed into the root directory of the floppy and the floppy\nis attached as the first floppy device. The summary size of the listed files\nmust not exceed 1.44 MB. The supported ways to move large files into the OS\nare using `http_directory` or [the file\nprovisioner](/packer/docs/provisioner/file).\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_files` ([]string) - A list of files to place onto a floppy disk that is attached when the VM\n  is booted. Currently, no support exists for creating sub-directories on\n  the floppy. Wildcard characters (\\\\*, ?, and \\[\\]) are allowed. Directory\n  names are also allowed, which will add all the files found in the\n  directory to the floppy.\n\n- `floppy_dirs` ([]string) - A list of directories to place onto the floppy disk recursively. This is\n  similar to the `floppy_files` option except that the directory structure\n  is preserved. This is useful for when your floppy disk includes drivers\n  or if you just want to organize it's contents as a hierarchy. Wildcard\n  characters (\\\\*, ?, and \\[\\]) are allowed. The maximum summary size of\n  all files in the listed directories are the same as in `floppy_files`.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_files = [\"vendor-data\"]\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  floppy_label = \"cidata\"\n  ```\n\n- `floppy_label` (string) - Floppy Label\n\n<!-- End of code generated from the comments of the FloppyConfig struct in multistep/commonsteps/floppy_config.go; -->\n\n\n### CD configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n### Export configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vmware/common/export_config.go; DO NOT EDIT MANUALLY -->\n\n- `format` (string) - Either \"ovf\", \"ova\" or \"vmx\", this specifies the output\n  format of the exported virtual machine. This defaults to \"ovf\" for\n  remote (esx) builds, and \"vmx\" for local builds.\n  Before using this option, you need to install ovftool.\n  Since ovftool is only capable of password based authentication\n  remote_password must be set when exporting the VM from a remote instance.\n  If you are building locally, Packer will create a vmx and then\n  export that vm to an ovf or ova. Packer will not delete the vmx and vmdk\n  files; this is left up to the user if you don't want to keep those\n  files.\n\n- `ovftool_options` ([]string) - Extra options to pass to ovftool during export. Each item in the array\n  is a new argument. The options `--noSSLVerify`, `--skipManifestCheck`,\n  and `--targetType` are used by Packer for remote exports, and should not\n  be passed to this argument. For ovf/ova exports from local builds, Packer\n  does not automatically set any ovftool options.\n\n- `skip_export` (bool) - Defaults to `false`. When true, Packer will not export the VM. This can\n  be useful if the build output is not the resultant image, but created\n  inside the VM.\n\n- `keep_registered` (bool) - Set this to true if you would like to keep a remotely-built\n  VM registered with the remote ESXi server. If you do not need to export\n  the vm, then also set `skip_export: true` in order to avoid unnecessarily\n  using ovftool to export the vm. Defaults to false.\n\n- `skip_compaction` (bool) - VMware-created disks are defragmented and\n  compacted at the end of the build process using vmware-vdiskmanager or\n  vmkfstools in ESXi. In certain rare cases, this might actually end up\n  making the resulting disks slightly larger. If you find this to be the case,\n  you can disable compaction using this configuration value. Defaults to\n  false. Default to true for ESXi when disk_type_id is not explicitly\n  defined and false otherwise.\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vmware/common/export_config.go; -->\n\n\n### Output configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/vmware/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This is the path on your local machine (the one running Packer) to the\n  directory where the resulting virtual machine will be created.\n  This may be relative or absolute. If relative, the path is relative to\n  the working directory when packer is executed.\n  \n  If you are running a remote esx build, the output_dir is the path on your\n  local machine (the machine running Packer) to which Packer will export\n  the vm if you have `\"skip_export\": false`. If you want to manage the\n  virtual machine's path on the remote datastore, use `remote_output_dir`.\n  \n  This directory must not exist or be empty prior to running\n  the builder.\n  \n  By default this is output-BUILDNAME where \"BUILDNAME\" is the name of the\n  build.\n\n- `remote_output_directory` (string) - This is the directoy on your remote esx host where you will save your\n  vm, relative to your remote_datastore.\n  \n  This option's default value is your `vm_name`, and the final path of your\n  vm will be vmfs/volumes/$remote_datastore/$vm_name/$vm_name.vmx where\n  `$remote_datastore` and `$vm_name` match their corresponding template\n  options\n  \n  For example, setting `\"remote_output_directory\": \"path/to/subdir`\n  will create a directory `/vmfs/volumes/remote_datastore/path/to/subdir`.\n  \n  Packer will not create the remote datastore for you; it must already\n  exist. However, Packer will create all directories defined in the option\n  that do not currently exist.\n  \n  This option will be ignored unless you are building on a remote esx host.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/vmware/common/output_config.go; -->\n\n\n### Run configuration\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n~> **Note:** If [vnc_over_websocket](#vnc_over_websocket) is set to true, any other VNC configuration will be ignored.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `headless` (bool) - Packer defaults to building VMware virtual machines\n  by launching a GUI that shows the console of the machine being built. When\n  this value is set to true, the machine will start without a console. For\n  VMware machines, Packer will output VNC connection information in case you\n  need to connect to the console to debug the build process.\n  Some users have experienced issues where Packer cannot properly connect\n  to a VM if it is headless; this appears to be a result of not ever having\n  launched the VMWare GUI and accepting the evaluation license, or\n  supplying a real license. If you experience this, launching VMWare and\n  accepting the license should resolve your problem.\n\n- `vnc_bind_address` (string) - The IP address that should be\n  binded to for VNC. By default packer will use 127.0.0.1 for this. If you\n  wish to bind to all interfaces use 0.0.0.0.\n\n- `vnc_port_min` (int) - The minimum and maximum port\n  to use for VNC access to the virtual machine. The builder uses VNC to type\n  the initial boot_command. Because Packer generally runs in parallel,\n  Packer uses a randomly chosen port in this range that appears available. By\n  default this is 5900 to 6000. The minimum and maximum ports are\n  inclusive.\n\n- `vnc_port_max` (int) - VNC Port Max\n\n- `vnc_disable_password` (bool) - Don't auto-generate a VNC password that\n  is used to secure the VNC communication with the VM. This must be set to\n  true if building on ESXi 6.5 and 6.7 with VNC enabled. Defaults to\n  false.\n\n- `vnc_over_websocket` (bool) - When set to true, Packer will connect to the remote VNC server over a websocket connection\n  and any other VNC configuration option will be ignored.\n  Remote builds using ESXi 6.7+ allows to connect to the VNC server only over websocket,\n  for these the `vnc_over_websocket` must be set to true.\n\n- `insecure_connection` (bool) - Do not validate VNC over websocket server's TLS certificate. Defaults to `false`.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vmware/common/run_config.go; -->\n\n\n### Driver configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the DriverConfig struct in builder/vmware/common/driver_config.go; DO NOT EDIT MANUALLY -->\n\n- `cleanup_remote_cache` (bool) - When set to true, Packer will cleanup the cache folder where the ISO file is stored during the build on the remote machine.\n  By default, this is set to false.\n\n- `fusion_app_path` (string) - Path to \"VMware Fusion.app\". By default this is\n  /Applications/VMware Fusion.app but this setting allows you to\n  customize this.\n\n- `remote_type` (string) - The type of remote machine that will be used to\n  build this VM rather than a local desktop product. The only value accepted\n  for this currently is esx5. If this is not set, a desktop product will\n  be used. By default, this is not set.\n\n- `remote_datastore` (string) - The path to the datastore where the VM will be stored\n  on the ESXi machine.\n\n- `remote_cache_datastore` (string) - The path to the datastore where supporting files\n  will be stored during the build on the remote machine.\n\n- `remote_cache_directory` (string) - The path where the ISO and/or floppy files will\n  be stored during the build on the remote machine. The path is relative to\n  the remote_cache_datastore on the remote machine.\n\n- `remote_host` (string) - The host of the remote machine used for access.\n  This is only required if remote_type is enabled.\n\n- `remote_port` (int) - The SSH port of the remote machine\n\n- `remote_username` (string) - The SSH username used to access the remote machine.\n\n- `remote_password` (string) - The SSH password for access to the remote machine.\n\n- `remote_private_key_file` (string) - The SSH key for access to the remote machine.\n\n- `skip_validate_credentials` (bool) - When Packer is preparing to run a\n  remote esxi build, and export is not disable, by default it runs a no-op\n  ovftool command to make sure that the remote_username and remote_password\n  given are valid. If you set this flag to true, Packer will skip this\n  validation. Default: false.\n\n<!-- End of code generated from the comments of the DriverConfig struct in builder/vmware/common/driver_config.go; -->\n\n\n### Tools configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the ToolsConfig struct in builder/vmware/common/tools_config.go; DO NOT EDIT MANUALLY -->\n\n- `tools_upload_flavor` (string) - The flavor of the VMware Tools ISO to\n  upload into the VM. Valid values are darwin, linux, and windows. By\n  default, this is empty, which means VMware tools won't be uploaded.\n\n- `tools_upload_path` (string) - The path in the VM to upload the VMware tools. This only takes effect if\n  `tools_upload_flavor` is non-empty. This is a [configuration\n  template](/packer/docs/templates/legacy_json_templates/engine) that has a single valid variable:\n  `Flavor`, which will be the value of `tools_upload_flavor`. By default\n  the upload path is set to `{{.Flavor}}.iso`. This setting is not used\n  when `remote_type` is `esx5`.\n\n- `tools_source_path` (string) - The path on your local machine to fetch the vmware tools from. If this\n  is not set but the tools_upload_flavor is set, then Packer will try to\n  load the VMWare tools from the VMWare installation directory.\n\n<!-- End of code generated from the comments of the ToolsConfig struct in builder/vmware/common/tools_config.go; -->\n\n\n### VMX configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the VMXConfig struct in builder/vmware/common/vmx_config.go; DO NOT EDIT MANUALLY -->\n\n- `vmx_data` (map[string]string) - Arbitrary key/values to enter\n  into the virtual machine VMX file. This is for advanced users who want to\n  set properties that aren't yet supported by the builder.\n\n- `vmx_data_post` (map[string]string) - Identical to vmx_data,\n  except that it is run after the virtual machine is shutdown, and before the\n  virtual machine is exported.\n\n- `vmx_remove_ethernet_interfaces` (bool) - Remove all ethernet interfaces\n  from the VMX file after building. This is for advanced users who understand\n  the ramifications, but is useful for building Vagrant boxes since Vagrant\n  will create ethernet interfaces when provisioning a box. Defaults to\n  false.\n\n- `display_name` (string) - The name that will appear in your vSphere client,\n  and will be used for the vmx basename. This will override the \"displayname\"\n  value in your vmx file. It will also override the \"displayname\" if you have\n  set it in the \"vmx_data\" Packer option. This option is useful if you are\n  chaining vmx builds and want to make sure that the display name of each step\n  in the chain is unique.\n\n<!-- End of code generated from the comments of the VMXConfig struct in builder/vmware/common/vmx_config.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n## Shutdown Configuration\n\n<!-- Code generated from the comments of the ShutdownConfig struct in shutdowncommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - The command to use to gracefully shut down the machine once all\n  provisioning is complete. By default this is an empty string, which\n  tells Packer to just forcefully shut down the machine. This setting can\n  be safely omitted if for example, a shutdown command to gracefully halt\n  the machine is configured inside a provisioning script. If one or more\n  scripts require a reboot it is suggested to leave this blank (since\n  reboots may fail) and instead specify the final shutdown command in your\n  last script.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait after executing the shutdown_command for the\n  virtual machine to actually shut down. If the machine doesn't shut down\n  in this time it is considered an error. By default, the time out is \"5m\"\n  (five minutes).\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in shutdowncommand/config.go; -->\n\n\n## Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot command \"typed\" character for character over a VNC connection to\nthe machine, simulating a human actually typing the keyboard.\n\nKeystrokes are typed as separate key up/down events over VNC with a default\n100ms delay. The delay alleviates issues with latency and CPU contention.\nYou can tune this delay on a per-builder basis by specifying\n\"boot_key_interval\" in your Packer template.\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n-> **Note**: for the `HTTPIP` to be resolved correctly, your VM's network\nconfiguration has to include a `hostonly` or `nat` type network interface.\nIf you are using this feature, it is recommended to leave the default network\nconfiguration while you are building the VM, and use the `vmx_data_post` hook\nto modify the network configuration after the VM is done building.\n\n### Optional:\n\n<!-- Code generated from the comments of the VNCConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `disable_vnc` (bool) - Whether to create a VNC connection or not. A boot_command cannot be used\n  when this is true. Defaults to false.\n\n- `boot_key_interval` (duration string | ex: \"1h5m2s\") - Time in ms to wait between each key press\n\n<!-- End of code generated from the comments of the VNCConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](/community-tools#templates).\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vmware-vmx\",\n      \"boot_key_interval\": \"10ms\",\n      ...\n    }\n  ]\n}\n```\n\nExample boot command. This is actually a working boot command used to start an\nUbuntu 12.04 installer:\n\n```text\n[\n  \"<esc><esc><enter><wait>\",\n  \"/install/vmlinuz noapic \",\n  \"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n  \"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n  \"hostname={{ .Name }} \",\n  \"fb=false debconf/frontend=noninteractive \",\n  \"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n  \"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n  \"initrd=/install/initrd.gz -- <enter>\"\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](/community-tools#templates).\n\n## Building on a Remote vSphere Hypervisor\n\nIn addition to using the desktop products of VMware locally to build virtual\nmachines, Packer can use a remote VMware Hypervisor to build the virtual\nmachine.\n\n-> **Note:** Packer supports ESXi 5.1 and above.\n\nBefore using a remote vSphere Hypervisor, you need to enable GuestIPHack by\nrunning the following command:\n\n```shell-session\n$ esxcli system settings advanced set -o /Net/GuestIPHack -i 1\n```\n\nWhen using a remote VMware Hypervisor, the builder still downloads the ISO and\nvarious files locally, and uploads these to the remote machine. Packer currently\nuses SSH to communicate to the ESXi machine rather than the vSphere API.\nIf you want to use vSphere API, see the [vsphere-iso](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso) builder.\n\nPacker also requires VNC to issue boot commands during a build, which may be\ndisabled on some remote VMware Hypervisors. Please consult the appropriate\ndocumentation on how to update VMware Hypervisor's firewall to allow these\nconnections. VNC can be disabled by not setting a `boot_command` and setting\n`disable_vnc` to `true`.\n\nPlease note that you should disable vMotion for the host you intend to run\nPacker builds on; a vMotion event will cause the Packer build to fail.\n\nTo use a remote VMware vSphere Hypervisor to build your virtual machine, fill in\nthe required `remote_*` configurations:\n\n- `remote_type` - This must be set to \"esx5\".\n\n- `remote_host` - The host of the remote machine.\n\nAdditionally, there are some optional configurations that you'll likely have to\nmodify as well:\n\n- `remote_port` - The SSH port of the remote machine\n\n- `remote_datastore` - The path to the datastore where the VM will be stored\non the ESXi machine.\n\n- `remote_cache_datastore` - The path to the datastore where supporting files\nwill be stored during the build on the remote machine.\n\n- `remote_cache_directory` - The path where the ISO and/or floppy files will\nbe stored during the build on the remote machine. The path is relative to\nthe `remote_cache_datastore` on the remote machine.\n\n- `remote_username` - The SSH username used to access the remote machine.\n\n- `remote_password` - The SSH password for access to the remote machine.\n\n- `remote_private_key_file` - The SSH key for access to the remote machine.\n\n- `format` (string) - Either \"ovf\", \"ova\" or \"vmx\", this specifies the output\nformat of the exported virtual machine. This defaults to \"ovf\".\nBefore using this option, you need to install `ovftool`. This option\ncurrently only works when option remote_type is set to \"esx5\".\nSince ovftool is only capable of password based authentication\n`remote_password` must be set when exporting the VM.\n\n- `vnc_disable_password` - This must be set to \"true\" when using VNC with\nESXi 6.5 or 6.7.\n\n### SSH key pair automation\n\nThe VMware builders can inject the current SSH key pair's public key into\nthe template using the `SSHPublicKey` template engine. This is the SSH public\nkey as a line in OpenSSH authorized_keys format.\n\nWhen a private key is provided using `ssh_private_key_file`, the key's\ncorresponding public key can be accessed using the above engine.\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\nIf `ssh_password` and `ssh_private_key_file` are not specified, Packer will\nautomatically generate en ephemeral key pair. The key pair's public key can\nbe accessed using the template engine.\n\nFor example, the public key can be provided in the boot command as a URL\nencoded string by appending `| urlquery` to the variable:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n  \"<up><wait><tab> text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg PACKER_USER={{ user `username` }} PACKER_AUTHORIZED_KEY={{ .SSHPublicKey | urlquery }}<enter>\"\n]\n```\n\nA kickstart could then leverage those fields from the kernel command line by\ndecoding the URL-encoded public key:\n\n```shell\n%post\n\n# Newly created users need the file/folder framework for SSH key authentication.\numask 0077\nmkdir /etc/skel/.ssh\ntouch /etc/skel/.ssh/authorized_keys\n\n# Loop over the command line. Set interesting variables.\nfor x in $(cat /proc/cmdline)\ndo\n  case $x in\n    PACKER_USER=*)\n      PACKER_USER=\"${x#*=}\"\n      ;;\n    PACKER_AUTHORIZED_KEY=*)\n      # URL decode $encoded into $PACKER_AUTHORIZED_KEY\n      encoded=$(echo \"${x#*=}\" | tr '+' ' ')\n      printf -v PACKER_AUTHORIZED_KEY '%b' \"${encoded//%/\\\\x}\"\n      ;;\n  esac\ndone\n\n# Create/configure packer user, if any.\nif [ -n \"$PACKER_USER\" ]\nthen\n  useradd $PACKER_USER\n  echo \"%$PACKER_USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers.d/$PACKER_USER\n  [ -n \"$PACKER_AUTHORIZED_KEY\" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~\"$PACKER_USER\")/.ssh/authorized_keys\nfi\n\n%end\n```\n","created_at":"2024-01-17T19:11:28.607Z","updated_at":"2024-01-17T19:11:28.607Z","name":"VMware VMX","slug":"vmx","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"VMware","url":"/packer/integrations/hashicorp/vmware","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builders","level":4,"title":"Builders"},{"id":"vmware-workstation-player-on-linux","level":3,"title":"VMware Workstation Player on Linux"}],"serializedREADME":{"compiledSource":"var m=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(a,n,t)=>n in a?m(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))i.call(n,t)&&p(a,t,n[t]);if(s)for(var t of s(n))r.call(n,t)&&p(a,t,n[t]);return a},l=(a,n)=>d(a,u(n));var c=(a,n)=>{var t={};for(var o in a)i.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&s)for(var o of s(a))n.indexOf(o)<0&&r.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The Packer Plugin for VMware with which to create virtual machine images for use with VMware products.\"),mdx(\"h3\",e({},{id:\"user-content-installation\",\"data-text-content\":\"Installation\",className:\"g-type-display-4\"}),\"Installation\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"To install this plugin add this code into your Packer configuration and run \",mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/commands/init\"}),\"packer init\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"packer\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"required_plugins\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vmware\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"version\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"~> 1\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"github.com/hashicorp/vmware\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Alternatively, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"packer plugins install\"),\" to manage installation of this plugin.\"),mdx(\"pre\",e({},{className:\"language-sh\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),\"packer plugins install github.com/hashicorp/vmware\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-components\",\"data-text-content\":\"Components\",className:\"g-type-display-4\"}),\"Components\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The plugin includes two builders which are able to create images, depending on your desired strategy\"),mdx(\"h4\",e({},{id:\"user-content-builders\",\"data-text-content\":\"Builders\",className:\"g-type-display-5\"}),\"Builders\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vmware/latest/components/builder/iso\"}),\"vmware-iso\"),` - Starts from an ISO file,\ncreates a brand new VMware VM, installs an OS, provisions software within\nthe OS, then exports that machine to create an image. This is best for\npeople who want to start from scratch.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vmware/latest/components/builder/vmx\"}),\"vmware-vmx\"),` - This builder imports an\nexisting VMware machine (from a VMX file), runs provisioners on top of that\nVM, and exports that machine to create an image. This is best if you have\nan existing VMware VM you want to use as the source. As an additional\nbenefit, you can feed the artifact of this builder back into Packer to\niterate on a machine.`))),mdx(\"h3\",e({},{id:\"user-content-vmware-workstation-player-on-linux\",\"data-text-content\":\"VMware Workstation Player on Linux\",className:\"g-type-display-4\"}),\"VMware Workstation Player on Linux\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`To use VMware Workstation Player with Packer on Linux, you will also need\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"qemu-img\"),\" command, which is available in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"qemu\"),` package in\nRed Hat Enterprise Linux, Debian, and derivative distributions.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Additionally you will need to have the \",mdx(\"inlineCode\",{parentName:\"p\"},\"vmrun\"),` command, which is part of the\nVMware `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.vmware.com/support/developer/vix-api/\"}),\"Virtual Infrastructure eXtension\"),\" \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://customerconnect.vmware.com/downloads/details?downloadGroup=PLAYER-1400-VIX1170&productId=687\"}),\"(VIX) SDK\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Finally, you must edit the file \",mdx(\"inlineCode\",{parentName:\"p\"},\"/usr/lib/vmware-vix/vixwrapper-config.txt\"),`\nand change the version specified in the fourth column to be the version in\nthe third column of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"vmplayer -v\"),` command.\nSee `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/questions/31985348/vix-vmrun-doesnt-work-with-vmware-player\"}),\"this StackOverflow thread\"),\" for more details.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}