{"pageProps":{"metadata":{"title":"Nutanix | Integrations","description":"A multi-component plugin can be used with Packer to create custom images."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"bf907899-0078-4dfd-abce-e36594b64f11","slug":"nutanix","name":"Nutanix","description":"A multi-component plugin can be used with Packer to create custom images.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"partner","repo_url":"https://github.com/nutanix-cloud-native/packer-plugin-nutanix","subdirectory":"/.web-docs","created_at":"2024-02-07T11:30:47.548Z","updated_at":"2024-02-07T12:20:47.378Z","hide_versions":false,"organization":{"id":"9f3b64e6-6f6c-4a46-97f4-de628f669b6b","slug":"nutanix-cloud-native","created_at":"2023-08-14T20:21:46.598Z","updated_at":"2023-08-14T20:21:46.598Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["0.8.1"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"665a509b-88c1-4d47-8a20-6192e368d571","integration_id":"bf907899-0078-4dfd-abce-e36594b64f11","version":"0.8.1","readme":"\nThe `Nutanix` multi-component plugin can be used with HashiCorp [Packer](https://www.packer.io)\nto create custom images.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```\npacker {\n  required_plugins {\n    nutanix = {\n      version = \">= 0.8.0\"\n      source  = \"github.com/nutanix-cloud-native/nutanix\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/nutanix-cloud-native/nutanix\n```\n\n### Components\n\n#### Builders\n\n- [nutanix](/packer/integrations/nutanix-cloud-native/nutanix/latest/components/builder/nutanix) - The Nutanix builder will create a temporary VM as foundation of your Packer image, apply all providers you define to customize your image, then clone the VM disk image as your final Packer image.\n\n### Limitations\n#### Building temporary ISOs on MacOS\nIf you want to use the cd_files Option to create an additional iso-image for kickstart-files or similar be aware that MacOS wonÂ´t create a suitable file.\nPlease install xorriso for support on MacOS.\n```\n brew install xorriso\n```\n\n### Contributing\nSee the [contributing docs](https://github.com/nutanix-cloud-native/packer-plugin-nutanix/blob/main/CONTRIBUTING.md).\n\n### Support\n#### Community Plus\n\nThis code is developed in the open with input from the community through issues and PRs. A Nutanix engineering team serves as the maintainer. Documentation is available in the project repository.\n\nIssues and enhancement requests can be submitted in the [Issues tab of this repository](https://github.com/nutanix-cloud-native/packer-plugin-nutanix/issues). Please search for and review the existing open issues before submitting a new issue.\n\n### License\nThe project is released under version 2.0 of the [Apache license](http://www.apache.org/licenses/LICENSE-2.0).\n\n","created_at":"2024-02-07T12:20:47.827Z","updated_at":"2024-02-07T12:20:47.827Z","components":[{"id":"76922c83-bdc7-4dbe-8294-be853c09b4e7","integration_release_id":"665a509b-88c1-4d47-8a20-6192e368d571","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"This document is going to detail all Nutanix plugin parameters.\n\n## Principle\nThe Nutanix plugin will create a temporary VM as foundation of your Packer image, apply all providers you define to customize your image, then clone the VM disk image as your final Packer image.\n\n## Environment configuration\nThese parameters allow to define information about platform and temporary VM used to create the image.\n\n### Required\n  - `nutanix_username` (string) - User used for Prism Central login.\n  - `nutanix_password` (string) - Password of this user for Prism Central login.\n  - `nutanix_endpoint` (string) - Prism Central FQDN or IP.\n  - `cluster_name` or `cluster_uuid` (string) - Nutanix cluster name or uuid used to create and store image.\n  - `os_type` (string) - OS Type (\"Linux\" or \"Windows\").\n\n### Optional\n  - `nutanix_port` (number) - Port used for connection to Prism Central.\n  - `nutanix_insecure` (bool) - Authorize connection to Prism Central without valid certificate.\n  - `vm_name` (string) - Name of the temporary VM to create. If not specified a random `packer-*` name will be used.\n  - `cpu` (number) - Number of vCPU for temporary VM.\n  - `memory_mb` (number) - Size of vRAM for temporary VM (in megabytes).\n  - `cd_files` (array of strings) - A list of files to place onto a CD that is attached when the VM is booted. This can include either files or directories; any directories will be copied onto the CD recursively, preserving directory structure hierarchy.\n  - `cd_label` (string) - Label of this CD Drive.\n  - `boot_type` (string) - Type of boot used on the temporary VM (\"legacy\" or \"uefi\").\n  - `ip_wait_timeout` (duration string | ex: \"0h42m0s\") - Amount of time to wait for VM's IP, similar to 'ssh_timeout'. Defaults to 15m (15 minutes). See the Golang [ParseDuration](https://golang.org/pkg/time/#ParseDuration) documentation for full details.\n  - `vm_categories` ([]Category) - Assign Categories to the vm.\n  - `project` (string) - Assign Project to the vm.\n  \n\n\n## Output configuration\nThese parameters allow to configure everything around image creation, from the temporary VM connection to the final image definition.\n\n### All OS\n- `image_name` (string) - Name of the output image.\n- `image_description` (string) - Description for output image.\n- `image_categories` ([]Category) - Assign Categories to the image.\n- `force_deregister` (bool) - Allow output image override if already exists.\n- `image_delete` (bool) - Delete image once build process is completed (default is false).\n- `image_export` (bool) - Export raw image in the current folder (default is false).\n- `shutdown_command` (string) - Command line to shutdown your temporary VM.\n- `shutdown_timeout` (string) - Timeout for VM shutdown (format : 2m).\n- `vm_force_delete` (bool) - Delete vm even if build is not succesful (default is false).\n- `communicator` (string) - Protocol used for Packer connection (ex \"winrm\" or \"ssh\"). Default is : \"ssh\".\n\n### Dedicated to Linux\n- `user_data` (string) - cloud-init content base64 encoded.\n- `ssh_username` (string) - user for ssh connection initiated by Packer.\n- `ssh_password` (string) - password for the ssh user.\n\n### Dedicated to Windows\n- `winrm_port` (number) - Port for WinRM communication (default is 5986).\n- `winrm_insecure` (bool) - Allow insecure connection to WinRM.\n- `winrm_use_ssl` (bool) - Request SSL connection with WinRM.\n- `winrm_timeout` (string) - Timeout for WinRM (format 45m).\n- `winrm_username` (string) - User login for WinRM connection.\n- `winrm_password` (string) - Password this User.\n\n## Disk configuration\nUse `vm_disks{}` entry to configure disk to your VM image. If you want to configure several disks, use this entry multiple times.\n\nAll parameters of this `vm_disks` section are described below.\n\n3 types of disk configurations can be used:\n- disk (create an empty disk)\n- disk image (create disk from Nutanix image library)\n- ISO image (create disk from ISO image)\n\n### Disk \n- `image_type` (string) - \"DISK\".\n- `disk_size_gb` (number) - size of th disk (in gigabytes).\n\nSample:\n```hcl\n  vm_disks {\n      image_type = \"DISK\"\n      disk_size_gb = 30\n  }\n```\n\n### Disk image\n- `image_type` (string) - \"DISK_IMAGE\" (you must use one of the three following parameters to source the image).\n- `source_image_name` (string) - Name of the image used as disk source.\n- `source_image_uuid` (string) - UUID of the image used as disk source.\n- `source_image_uri` (string) - URI of the image used as disk source (if image is not already on the cluster, it will download and store it before launching output image creation process).\n- `source_image_delete` (bool) - Delete source image once build process is completed (default is false).\n- `source_image_force` (bool) - Always download and replace source image even if already exist (default is false).\n- `disk_size_gb` (number) - size of the disk (in gigabytes).\n\nSample:\n```hcl\n  vm_disks {\n      image_type = \"DISK_IMAGE\"\n      source_image_name = \"<myDiskImage>\"\n      disk_size_gb = 40\n  }\n```\n### ISO Image\n- `image_type` (string) - \"ISO_IMAGE\".\n- `source_image_name` (string) - Name of the ISO image to mount.\n- `source_image_uuid` (string) - UUID of the ISO image to mount.\n- `source_image_delete` (bool) - Delete source image once build process is completed (default is false).\n- `source_image_force` (bool) - Always download and replace source image even if already exist (default is false).\n\nSample:\n```hcl\n  vm_disks {\n      image_type = \"ISO_IMAGE\"\n      source_image_name = \"<myISOimage>\"\n  }\n```\n\n## Network Configuration\nUse `vm_nics{}` entry to configure NICs in your image\n\nIn this section, you have to define network you will to connect with one of this keyword :\n\n- `subnet_name` (string) - Name of the cluster subnet to use.\n- `subnet_uuid` (string) - UUID of the cluster subnet to use.\n\nSample\n```hcl\n  vm_nics {\n    subnet_name = \"<mySubnet>\"\n  }\n```\n\n## Categories Configuration\n\nUse `image_categories{}` and `vm_categories{}` to assign category to your image or vm.  If you want to assign multiple categories , use the entry multiple times.\n\nIn this section, you have to define category you will to assign with the following parameters:\n\n- `key` (string) - Name of the category to assign.\n- `value` (string) - Value of the category to assign.\n\nSample\n```hcl\n  image_categories {\n    key = \"OSType\"\n    value = \"ubuntu-22.04\"\n  }\n```\n\nNote: Categories must already be present in Prism Central.\n\n## Samples\n\nYou can find samples [here](https://github.com/nutanix-cloud-native/packer-plugin-nutanix/tree/main/example) for these instructions usage.\n","created_at":"2024-02-07T12:20:48.170Z","updated_at":"2024-02-07T12:20:48.170Z","name":"Nutanix plugin","slug":"nutanix","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"Nutanix","url":"/packer/integrations/nutanix-cloud-native/nutanix","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builders","level":4,"title":"Builders"},{"id":"limitations","level":3,"title":"Limitations"},{"id":"building-temporary-isos-on-macos","level":4,"title":"Building temporary ISOs on MacOS"},{"id":"contributing","level":3,"title":"Contributing"},{"id":"support","level":3,"title":"Support"},{"id":"community-plus","level":4,"title":"Community Plus"},{"id":"license","level":3,"title":"License"}],"serializedREADME":{"compiledSource":"var u=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var r=(t,a,n)=>a in t?u(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,e=(t,a)=>{for(var n in a||(a={}))s.call(a,n)&&r(t,n,a[n]);if(o)for(var n of o(a))p.call(a,n)&&r(t,n,a[n]);return t},l=(t,a)=>d(t,m(a));var c=(t,a)=>{var n={};for(var i in t)s.call(t,i)&&a.indexOf(i)<0&&(n[i]=t[i]);if(t!=null&&o)for(var i of o(t))a.indexOf(i)<0&&p.call(t,i)&&(n[i]=t[i]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var i=n,{components:t}=i,a=c(i,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"Nutanix\"),\" multi-component plugin can be used with HashiCorp \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.packer.io\"}),\"Packer\"),`\nto create custom images.`),mdx(\"h3\",e({},{id:\"user-content-installation\",\"data-text-content\":\"Installation\",className:\"g-type-display-4\"}),\"Installation\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"To install this plugin, copy and paste this code into your Packer configuration, then run \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.packer.io/docs/commands/init\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"packer init\")),\".\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"packer {\",`\n`,\"  required_plugins {\",`\n`,\"    nutanix = {\",`\n`,'      version = \">= 0.8.0\"',`\n`,'      source  = \"github.com/nutanix-cloud-native/nutanix\"',`\n`,\"    }\",`\n`,\"  }\",`\n`,\"}\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Alternatively, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"packer plugins install\"),\" to manage installation of this plugin.\"),mdx(\"pre\",e({},{className:\"language-sh\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),\"$ packer plugins install github.com/nutanix-cloud-native/nutanix\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-components\",\"data-text-content\":\"Components\",className:\"g-type-display-4\"}),\"Components\"),mdx(\"h4\",e({},{id:\"user-content-builders\",\"data-text-content\":\"Builders\",className:\"g-type-display-5\"}),\"Builders\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"/packer/integrations/nutanix-cloud-native/nutanix/latest/components/builder/nutanix\"}),\"nutanix\"),\" - The Nutanix builder will create a temporary VM as foundation of your Packer image, apply all providers you define to customize your image, then clone the VM disk image as your final Packer image.\")),mdx(\"h3\",e({},{id:\"user-content-limitations\",\"data-text-content\":\"Limitations\",className:\"g-type-display-4\"}),\"Limitations\"),mdx(\"h4\",e({},{id:\"user-content-building-temporary-isos-on-macos\",\"data-text-content\":\"Building temporary ISOs on MacOS\",className:\"g-type-display-5\"}),\"Building temporary ISOs on MacOS\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`If you want to use the cd_files Option to create an additional iso-image for kickstart-files or similar be aware that MacOS won\\xB4t create a suitable file.\nPlease install xorriso for support on MacOS.`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\" brew install xorriso\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-contributing\",\"data-text-content\":\"Contributing\",className:\"g-type-display-4\"}),\"Contributing\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"See the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/nutanix-cloud-native/packer-plugin-nutanix/blob/main/CONTRIBUTING.md\"}),\"contributing docs\"),\".\"),mdx(\"h3\",e({},{id:\"user-content-support\",\"data-text-content\":\"Support\",className:\"g-type-display-4\"}),\"Support\"),mdx(\"h4\",e({},{id:\"user-content-community-plus\",\"data-text-content\":\"Community Plus\",className:\"g-type-display-5\"}),\"Community Plus\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This code is developed in the open with input from the community through issues and PRs. A Nutanix engineering team serves as the maintainer. Documentation is available in the project repository.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Issues and enhancement requests can be submitted in the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/nutanix-cloud-native/packer-plugin-nutanix/issues\"}),\"Issues tab of this repository\"),\". Please search for and review the existing open issues before submitting a new issue.\"),mdx(\"h3\",e({},{id:\"user-content-license\",\"data-text-content\":\"License\",className:\"g-type-display-4\"}),\"License\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The project is released under version 2.0 of the \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://www.apache.org/licenses/LICENSE-2.0\"}),\"Apache license\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}