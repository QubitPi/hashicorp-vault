(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[46],{67:e=>{"use strict";e.exports=require("node:async_hooks")},195:e=>{"use strict";e.exports=require("node:buffer")},876:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>d}),s(639);var r=s(458),n=s(161),a=s(278),o=s(254);let i=o.z.object({task:o.z.string().transform(e=>e.trim()),conversationId:o.z.string().optional(),parentMessageId:o.z.string().optional()});async function c(e,t){console.log(`[${e.method}] ${e.url}`);let s=e.headers.get("authorization");if(!s)return new Response("Not found",{status:404});let r=s.split(" ")[1];if("POST"===e.method){let t=await e.json(),s=i.safeParse(t);if(!s.success)return new Response("Bad Request",{status:400});let{task:n,conversationId:a,parentMessageId:o}=s.data,c=/^simulate (\d{3}) (.*)$/i;if(n.match(c)){let[,e,t]=n.match(c);return new Response(t,{status:Number(e),statusText:t})}try{let e;a&&o?(console.log("continue conversation: %s - %s",a,o),e=await l({conversationId:a,parentMessageId:o,task:n,accessToken:r})):(console.log("create conversation"),e=await u({task:n,accessToken:r}));let t=e.headers;if(e.ok){let s=t.get("x-conversation-id"),r=t.get("x-message-id");return r||console.warn("[/api/chat/route] x-message-id header is missing from the server"),s||console.warn("[/api/chat/route] x-conversation-id header is missing from the server"),new Response(e.body,{headers:{"Content-Type":"text/event-stream; charset=utf-8","x-message-id":r,"x-conversation-id":s}})}{let t={};if(429==e.status){let s="x-ratelimit-limit",r="x-ratelimit-remaining",n="x-ratelimit-reset",a="x-ratelimit-resource",o="x-ratelimit-used";t[s]=e.headers.get(s),t[r]=e.headers.get(r),t[n]=e.headers.get(n),t[a]=e.headers.get(a),t[o]=e.headers.get(o)}return new Response(e.body,{status:e.status,headers:{...t,"Content-Type":"application/json"}})}}catch(e){return console.error(e),new Response("Internal Server Error",{status:500})}}}async function u({task:e,accessToken:t}){let s=new Headers;s.set("Authorization",`Bearer ${t}`),s.set("Content-Type","application/json");let r=new URL("/v1/conversations",process.env.EXPERIMENTAL_CHAT_API_BASE_URL),n=JSON.stringify({task:e});return await fetch(r.toString(),{body:n,method:"POST",headers:s})}async function l({conversationId:e,parentMessageId:t,task:s,accessToken:r}){let n=new Headers;n.set("Authorization",`Bearer ${r}`),n.set("Content-Type","application/json");let a=new URL(`/v1/conversations/${e}`,process.env.EXPERIMENTAL_CHAT_API_BASE_URL),o=JSON.stringify({task:s,parentMessageId:t});return await fetch(a.toString(),{body:o,method:"POST",headers:n})}function d(e){return(0,r.C)({...e,IncrementalCache:n.k,page:"/api/chat/route",handler:(0,a.fd)("/api/chat/route",c)})}}},e=>{var t=t=>e(e.s=t);e.O(0,[458,773],()=>t(876));var s=e.O();(_ENTRIES="undefined"==typeof _ENTRIES?{}:_ENTRIES)["middleware_pages/api/chat/route"]=s}]);
//# sourceMappingURL=route.js.map