{"pageProps":{"metadata":{"title":"OpenStack | Integrations","description":"The OpenStack multi-component plugin can be used with HashiCorp Packer to create custom images."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiDays","url":"https://hashicorp.com/conferences/hashidays","text":"One conference. Three cities.","linkText":"Find a city near you","expirationDate":"2024-06-14T00:00:00-08:00"},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"725127de-03c5-11ee-b9ad-4230a3cb9c93","slug":"openstack","name":"OpenStack","description":"The OpenStack multi-component plugin can be used with HashiCorp Packer to create custom images.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/hashicorp/packer-plugin-openstack","subdirectory":"/.web-docs","created_at":"2023-06-05T17:23:37.924Z","updated_at":"2023-08-08T17:01:13.820Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.1.2","1.1.1","1.1.0"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"627d6bb5-210b-4403-b88d-8e72240805c9","integration_id":"725127de-03c5-11ee-b9ad-4230a3cb9c93","version":"1.1.2","readme":"The Openstack Packer plugin provides a builder that is able to create new images\nfor use with OpenStack. The builder takes a source image, runs any provisioning\nnecessary on the image after launching it, then creates a new reusable image.\nThis reusable image can then be used as the foundation of new servers that are\nlaunched within OpenStack. The builder will create temporary keypairs that\nprovide temporary access to the server while the image is being created. This\nsimplifies configuration quite a bit.\n\n###  Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration .\nThen, run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    openstack = {\n      version = \"~> 1\"\n      source  = \"github.com/hashicorp/openstack\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/hashicorp/openstack\n```\n\n### Components\n\n#### Builder\n\n- [builder](/packer/integrations/hashicorp/openstack/latest/components/builder/openstack) - The OpenStack Packer builder is able to create new images for use with OpenStack.\n","created_at":"2024-02-29T16:20:45.933Z","updated_at":"2024-02-29T16:20:45.933Z","components":[{"id":"a3182b16-9bc7-4378-b3fa-f3c943650387","integration_release_id":"627d6bb5-210b-4403-b88d-8e72240805c9","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `openstack`\nArtifact BuilderId: `mitchellh.openstack`\n\nThe `openstack` Packer builder is able to create new images for use with\n[OpenStack](http://www.openstack.org). The builder takes a source image, runs\nany provisioning necessary on the image after launching it, then creates a new\nreusable image. This reusable image can then be used as the foundation of new\nservers that are launched within OpenStack. The builder will create temporary\nkeypairs that provide temporary access to the server while the image is being\ncreated. This simplifies configuration quite a bit.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n~> **Note:** To use OpenStack builder with the OpenStack Newton (Oct 2016)\nor earlier, we recommend you use Packer v1.1.2 or earlier version.\n\n~> **OpenStack Liberty or later requires OpenSSL!** To use the OpenStack\nbuilder with OpenStack Liberty (Oct 2015) or later you need to have OpenSSL\ninstalled _if you are using temporary key pairs_, i.e. don't use\n[`ssh_keypair_name`](#ssh_keypair_name) nor\n[`ssh_password`](#ssh_password). All major\nOS'es have OpenSSL installed by default except Windows. This have been resolved\nin OpenStack Ocata(Feb 2017).\n\n~> **Note:** OpenStack Block Storage volume support is available only for\nV3 Block Storage API. It's available in OpenStack since Mitaka release (Apr\n2016).\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n<!-- Code generated from the comments of the AccessConfig struct in builder/openstack/access_config.go; DO NOT EDIT MANUALLY -->\n\n- `username` (string) - The username or id used to connect to the OpenStack service. If not\n  specified, Packer will use the environment variable OS_USERNAME or\n  OS_USERID, if set. This is not required if using access token or\n  application credential instead of password, or if using cloud.yaml.\n\n- `password` (string) - The password used to connect to the OpenStack service. If not specified,\n  Packer will use the environment variables OS_PASSWORD, if set. This is\n  not required if using access token or application credential instead of\n  password, or if using cloud.yaml.\n\n- `identity_endpoint` (string) - The URL to the OpenStack Identity service. If not specified, Packer will\n  use the environment variables OS_AUTH_URL, if set. This is not required\n  if using cloud.yaml.\n\n<!-- End of code generated from the comments of the AccessConfig struct in builder/openstack/access_config.go; -->\n\n\n<!-- Code generated from the comments of the ImageConfig struct in builder/openstack/image_config.go; DO NOT EDIT MANUALLY -->\n\n- `image_name` (string) - The name of the resulting image.\n\n<!-- End of code generated from the comments of the ImageConfig struct in builder/openstack/image_config.go; -->\n\n\n<!-- Code generated from the comments of the RunConfig struct in builder/openstack/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `source_image` (string) - The ID or full URL to the base image to use. This is the image that will\n  be used to launch a new server and provision it. Unless you specify\n  completely custom SSH settings, the source image must have cloud-init\n  installed so that the keypair gets assigned properly.\n\n- `source_image_name` (string) - The name of the base image to use. This is an alternative way of\n  providing source_image and only either of them can be specified.\n\n- `external_source_image_url` (string) - The URL of an external base image to use. This is an alternative way of\n  providing source_image and only either of them can be specified.\n\n- `source_image_filter` (ImageFilter) - Filters used to populate filter options. Example:\n  \n  ```json\n  {\n      \"source_image_filter\": {\n          \"filters\": {\n              \"name\": \"ubuntu-16.04\",\n              \"visibility\": \"protected\",\n              \"owner\": \"d1a588cf4b0743344508dc145649372d1\",\n              \"tags\": [\"prod\", \"ready\"],\n              \"properties\": {\n                  \"os_distro\": \"ubuntu\"\n              }\n          },\n          \"most_recent\": true\n      }\n  }\n  ```\n  \n  This selects the most recent production Ubuntu 16.04 shared to you by\n  the given owner. NOTE: This will fail unless *exactly* one image is\n  returned, or `most_recent` is set to true. In the example of multiple\n  returned images, `most_recent` will cause this to succeed by selecting\n  the newest image of the returned images.\n  \n  -   `filters` (map of strings) - filters used to select a\n  `source_image`.\n      NOTE: This will fail unless *exactly* one image is returned, or\n      `most_recent` is set to true. Of the filters described in\n      [ImageService](https://developer.openstack.org/api-ref/image/v2/), the\n      following are valid:\n  \n      -   name (string)\n      -   owner (string)\n      -   tags (array of strings)\n      -   visibility (string)\n      -   properties (map of strings to strings) (fields that can be set\n          with `openstack image set --property key=value`)\n  \n  -   `most_recent` (boolean) - Selects the newest created image when\n  true.\n      This is most useful for selecting a daily distro build.\n  \n  You may set use this in place of `source_image` If `source_image_filter`\n  is provided alongside `source_image`, the `source_image` will override\n  the filter. The filter will not be used in this case.\n\n- `flavor` (string) - The ID, name, or full URL for the desired flavor for the server to be\n  created.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/openstack/run_config.go; -->\n\n\n### Optional:\n\n<!-- Code generated from the comments of the AccessConfig struct in builder/openstack/access_config.go; DO NOT EDIT MANUALLY -->\n\n- `user_id` (string) - Sets username\n\n- `tenant_id` (string) - The tenant ID or name to boot the instance into. Some OpenStack\n  installations require this. If not specified, Packer will use the\n  environment variable OS_TENANT_NAME or OS_TENANT_ID, if set. Tenant is\n  also called Project in later versions of OpenStack.\n\n- `tenant_name` (string) - Tenant Name\n\n- `domain_id` (string) - Domain ID\n\n- `domain_name` (string) - The Domain name or ID you are authenticating with. OpenStack\n  installations require this if identity v3 is used. Packer will use the\n  environment variable OS_DOMAIN_NAME or OS_DOMAIN_ID, if set.\n\n- `insecure` (bool) - Whether or not the connection to OpenStack can be done over an insecure\n  connection. By default this is false.\n\n- `region` (string) - The name of the region, such as \"DFW\", in which to launch the server to\n  create the image. If not specified, Packer will use the environment\n  variable OS_REGION_NAME, if set.\n\n- `endpoint_type` (string) - The endpoint type to use. Can be any of \"internal\", \"internalURL\",\n  \"admin\", \"adminURL\", \"public\", and \"publicURL\". By default this is\n  \"public\".\n\n- `cacert` (string) - Custom CA certificate file path. If omitted the OS_CACERT environment\n  variable can be used.\n\n- `cert` (string) - Client certificate file path for SSL client authentication. If omitted\n  the OS_CERT environment variable can be used.\n\n- `key` (string) - Client private key file path for SSL client authentication. If omitted\n  the OS_KEY environment variable can be used.\n\n- `token` (string) - the token (id) to use with token based authorization. Packer will use\n  the environment variable OS_TOKEN, if set.\n\n- `application_credential_name` (string) - The application credential name to use with application credential based\n  authorization. Packer will use the environment variable\n  OS_APPLICATION_CREDENTIAL_NAME, if set.\n\n- `application_credential_id` (string) - The application credential id to use with application credential based\n  authorization. Packer will use the environment variable\n  OS_APPLICATION_CREDENTIAL_ID, if set.\n\n- `application_credential_secret` (string) - The application credential secret to use with application credential\n  based authorization. Packer will use the environment variable\n  OS_APPLICATION_CREDENTIAL_SECRET, if set.\n\n- `cloud` (string) - An entry in a `clouds.yaml` file. See the OpenStack os-client-config\n  [documentation](https://docs.openstack.org/os-client-config/latest/user/configuration.html)\n  for more information about `clouds.yaml` files. If omitted, the\n  `OS_CLOUD` environment variable is used.\n\n<!-- End of code generated from the comments of the AccessConfig struct in builder/openstack/access_config.go; -->\n\n\n<!-- Code generated from the comments of the ImageConfig struct in builder/openstack/image_config.go; DO NOT EDIT MANUALLY -->\n\n- `metadata` (map[string]string) - Glance metadata that will be applied to the image.\n\n- `image_visibility` (imageservice.ImageVisibility) - One of \"public\", \"private\", \"shared\", or \"community\".\n\n- `image_members` ([]string) - List of members to add to the image after creation. An image member is\n  usually a project (also called the \"tenant\") with whom the image is\n  shared.\n\n- `image_auto_accept_members` (bool) - When true, perform the image accept so the members can see the image in their\n  project. This requires a user with priveleges both in the build project and\n  in the members provided. Defaults to false.\n\n- `image_disk_format` (string) - Disk format of the resulting image. This option works if\n  use_blockstorage_volume is true.\n\n- `image_tags` ([]string) - List of tags to add to the image after creation.\n\n- `image_min_disk` (int) - Minimum disk size needed to boot image, in gigabytes.\n\n- `skip_create_image` (bool) - Skip creating the image. Useful for setting to `true` during a build test stage. Defaults to `false`.\n\n<!-- End of code generated from the comments of the ImageConfig struct in builder/openstack/image_config.go; -->\n\n\n<!-- Code generated from the comments of the RunConfig struct in builder/openstack/run_config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_interface` (string) - The type of interface to connect via SSH. Values useful for Rackspace\n  are \"public\" or \"private\", and the default behavior is to connect via\n  whichever is returned first from the OpenStack API.\n\n- `ssh_ip_version` (string) - The IP version to use for SSH connections, valid values are `4` and `6`.\n  Useful on dual stacked instances where the default behavior is to\n  connect via whichever IP address is returned first from the OpenStack\n  API.\n\n- `external_source_image_format` (string) - The format of the external source image to use, e.g. qcow2, raw.\n\n- `external_source_image_properties` (map[string]string) - Properties to set for the external source image\n\n- `availability_zone` (string) - The availability zone to launch the server in. If this isn't specified,\n  the default enforced by your OpenStack cluster will be used. This may be\n  required for some OpenStack clusters.\n\n- `rackconnect_wait` (bool) - For rackspace, whether or not to wait for Rackconnect to assign the\n  machine an IP address before connecting via SSH. Defaults to false.\n\n- `floating_ip_network` (string) - The ID or name of an external network that can be used for creation of a\n  new floating IP.\n\n- `instance_floating_ip_net` (string) - The ID of the network to which the instance is attached and which should\n  be used to associate with the floating IP. This provides control over\n  the floating ip association on multi-homed instances. The association\n  otherwise depends on a first-returned-interface policy which could fail\n  if the network to which it is connected is unreachable from the floating\n  IP network.\n\n- `floating_ip` (string) - A specific floating IP to assign to this instance.\n\n- `reuse_ips` (bool) - Whether or not to attempt to reuse existing unassigned floating ips in\n  the project before allocating a new one. Note that it is not possible to\n  safely do this concurrently, so if you are running multiple openstack\n  builds concurrently, or if other processes are assigning and using\n  floating IPs in the same openstack project while packer is running, you\n  should not set this to true. Defaults to false.\n\n- `security_groups` ([]string) - A list of security groups by name to add to this instance.\n\n- `networks` ([]string) - A list of networks by UUID to attach to this instance.\n\n- `ports` ([]string) - A list of ports by UUID to attach to this instance.\n\n- `network_discovery_cidrs` ([]string) - A list of network CIDRs to discover the network to attach to this instance.\n  The first network whose subnet is contained within any of the given CIDRs\n  is used. Ignored if either of the above two options are provided.\n\n- `user_data` (string) - User data to apply when launching the instance. Note that you need to be\n  careful about escaping characters due to the templates being JSON. It is\n  often more convenient to use user_data_file, instead. Packer will not\n  automatically wait for a user script to finish before shutting down the\n  instance this must be handled in a provisioner.\n\n- `user_data_file` (string) - Path to a file that will be used for the user data when launching the\n  instance.\n\n- `instance_name` (string) - Name that is applied to the server instance created by Packer. If this\n  isn't specified, the default is same as image_name.\n\n- `instance_metadata` (map[string]string) - Metadata that is applied to the server instance created by Packer. Also\n  called server properties in some documentation. The strings have a max\n  size of 255 bytes each.\n\n- `force_delete` (bool) - Whether to force the OpenStack instance to be forcefully deleted. This\n  is useful for environments that have reclaim / soft deletion enabled. By\n  default this is false.\n\n- `config_drive` (bool) - Whether or not nova should use ConfigDrive for cloud-init metadata.\n\n- `floating_ip_pool` (string) - Deprecated use floating_ip_network instead.\n\n- `use_blockstorage_volume` (bool) - Use Block Storage service volume for the instance root volume instead of\n  Compute service local volume (default).\n\n- `volume_name` (string) - Name of the Block Storage service volume. If this isn't specified,\n  random string will be used.\n\n- `volume_type` (string) - Type of the Block Storage service volume. If this isn't specified, the\n  default enforced by your OpenStack cluster will be used.\n\n- `volume_size` (int) - Size of the Block Storage service volume in GB. If this isn't specified,\n  it is set to source image min disk value (if set) or calculated from the\n  source image bytes size. Note that in some cases this needs to be\n  specified, if use_blockstorage_volume is true.\n\n- `volume_availability_zone` (string) - Availability zone of the Block Storage service volume. If omitted,\n  Compute instance availability zone will be used. If both of Compute\n  instance and Block Storage volume availability zones aren't specified,\n  the default enforced by your OpenStack cluster will be used.\n\n- `openstack_provider` (string) - Not really used, but here for BC\n\n- `use_floating_ip` (bool) - *Deprecated* use `floating_ip` or `floating_ip_pool` instead.\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/openstack/run_config.go; -->\n\n\n### Communicator Configuration\n\n#### Optional:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n- `ssh_keypair_name` (string) - If specified, this is the key that will be used for SSH with the\n  machine. The key must match a key pair name loaded up into the remote.\n  By default, this is blank, and Packer will generate a temporary keypair\n  unless [`ssh_password`](#ssh_password) is used.\n  [`ssh_private_key_file`](#ssh_private_key_file) or\n  [`ssh_agent_auth`](#ssh_agent_auth) must be specified when\n  [`ssh_keypair_name`](#ssh_keypair_name) is utilized.\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n<!-- Code generated from the comments of the SSHInterface struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_interface` (string) - One of `public_ip`, `private_ip`, `public_dns`, or `private_dns`. If\n  set, either the public IP address, private IP address, public DNS name\n  or private DNS name will used as the host for SSH. The default behaviour\n  if inside a VPC is to use the public IP address if available, otherwise\n  the private IP address will be used. If not in a VPC the public DNS name\n  will be used. Also works for WinRM.\n  \n  Where Packer is configured for an outbound proxy but WinRM traffic\n  should be direct, `ssh_interface` must be set to `private_dns` and\n  `<region>.compute.internal` included in the `NO_PROXY` environment\n  variable.\n\n- `ssh_ip_version` (string) - The IP version to use for SSH connections, valid values are `4` and `6`.\n  Useful on dual stacked instances where the default behavior is to\n  connect via whichever IP address is returned first from the OpenStack\n  API.\n\n<!-- End of code generated from the comments of the SSHInterface struct in communicator/config.go; -->\n\n\n## Basic Example: DevStack\n\nHere is a basic example. This is a example to build on DevStack running in a\nVM.\n\n**JSON**\n\n```json\n{\n  \"builders\":\n  [{\n    \"type\": \"openstack\",\n    \"identity_endpoint\": \"http://<devstack-ip>:5000/v3\",\n    \"tenant_name\": \"admin\",\n    \"domain_name\": \"Default\",\n    \"username\": \"admin\",\n    \"password\": \"<your admin password>\",\n    \"region\": \"RegionOne\",\n    \"ssh_username\": \"root\",\n    \"image_name\": \"Test image\",\n    \"source_image\": \"<image id>\",\n    \"flavor\": \"m1.tiny\",\n    \"insecure\": \"true\"\n  }]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"openstack\" \"example\" {\n  domain_name       = \"Default\"\n  flavor            = \"m1.tiny\"\n  identity_endpoint = \"http://<devstack-ip>:5000/v3\"\n  image_name        = \"Test image\"\n  insecure          = \"true\"\n  password          = \"<your admin password>\"\n  region            = \"RegionOne\"\n  source_image      = \"<image id>\"\n  ssh_username      = \"root\"\n  tenant_name       = \"admin\"\n  username          = \"admin\"\n}\n\nbuild {\n  sources = [\"source.openstack.example\"]\n}\n\n```\n\n\n## Basic Example: Rackspace public cloud\n\nHere is a basic example. This is a working example to build a Ubuntu 12.04 LTS\n(Precise Pangolin) on Rackspace OpenStack cloud offering.\n\n**JSON**\n\n```json\n{\n  \"builders\":[{\n    \"type\": \"openstack\",\n    \"username\": \"foo\",\n    \"password\": \"foo\",\n    \"region\": \"DFW\",\n    \"ssh_username\": \"root\",\n    \"image_name\": \"Test image\",\n    \"source_image\": \"23b564c9-c3e6-49f9-bc68-86c7a9ab5018\",\n    \"flavor\": \"2\"\n  }]\n}\n```\n\n\n**HCL2**\n\n```hcl\n\nsource \"openstack\" \"example\" {\n  flavor       = \"2\"\n  image_name   = \"Test image\"\n  password     = \"foo\"\n  region       = \"DFW\"\n  source_image = \"23b564c9-c3e6-49f9-bc68-86c7a9ab5018\"\n  ssh_username = \"root\"\n  username     = \"foo\"\n}\n\nbuild {\n  sources = [\"source.openstack.example\"]\n}\n```\n\n\n## Basic Example: Private OpenStack cloud\n\nThis example builds an Ubuntu 14.04 image on a private OpenStack cloud, powered\nby Metacloud.\n\n**JSON**\n\n```json\n{\n  \"builders\":[{\n    \"type\": \"openstack\",\n    \"ssh_username\": \"root\",\n    \"image_name\": \"ubuntu1404_packer_test_1\",\n    \"source_image\": \"91d9c168-d1e5-49ca-a775-3bfdbb6c97f1\",\n    \"flavor\": \"2\"\n  }]\n}\n```\n\n\n**HCL2**\n\n```hcl\nsource \"openstack\" \"example\" {\n  flavor       = \"2\"\n  image_name   = \"ubuntu1404_packer_test_1\"\n  source_image = \"91d9c168-d1e5-49ca-a775-3bfdbb6c97f1\"\n  ssh_username = \"root\"\n}\n\nbuild {\n  sources = [\"source.openstack.example\"]\n}\n```\n\n\nIn this case, the connection information for connecting to OpenStack doesn't\nappear in the template. That is because I source a standard OpenStack script\nwith environment variables set before I run this. This script is setting\nenvironment variables like:\n\n- `OS_AUTH_URL`\n- `OS_TENANT_ID`\n- `OS_USERNAME`\n- `OS_PASSWORD`\n\nThis is slightly different when identity v3 is used:\n\n- `OS_AUTH_URL`\n- `OS_USERNAME`\n- `OS_PASSWORD`\n- `OS_DOMAIN_NAME`\n- `OS_TENANT_NAME`\n\nThis will authenticate the user on the domain and scope you to the project. A\ntenant is the same as a project. It's optional to use names or IDs in v3. This\nmeans you can use `OS_USERNAME` or `OS_USERID`, `OS_TENANT_ID` or\n`OS_TENANT_NAME` and `OS_DOMAIN_ID` or `OS_DOMAIN_NAME`.\n\nThe above example would be equivalent to an RC file looking like this :\n\n```shell\nexport OS_AUTH_URL=\"https://identity.myprovider/v3\"\nexport OS_USERNAME=\"myuser\"\nexport OS_PASSWORD=\"password\"\nexport OS_USER_DOMAIN_NAME=\"mydomain\"\nexport OS_PROJECT_DOMAIN_NAME=\"mydomain\"\n```\n\n## Basic Example: Instance with Block Storage root volume\n\nA basic example of Instance with a remote root Block Storage service volume.\nThis is a working example to build an image on private OpenStack cloud powered\nby Selectel VPC.\n\n**JSON**\n\n```json\n{\n  \"builders\":[{\n    \"type\": \"openstack\",\n    \"identity_endpoint\": \"https://api.selvpc.com/identity/v3\",\n    \"tenant_id\": \"2e90c5c04c7b4c509be78723e2b55b77\",\n    \"username\": \"foo\",\n    \"password\": \"foo\",\n    \"region\": \"ru-3\",\n    \"ssh_username\": \"root\",\n    \"image_name\": \"Test image\",\n    \"source_image\": \"5f58ea7e-6264-4939-9d0f-0c23072b1132\",\n    \"networks\": \"9aab504e-bedf-48af-9256-682a7fa3dabb\",\n    \"flavor\": \"1001\",\n    \"availability_zone\": \"ru-3a\",\n    \"use_blockstorage_volume\": true,\n    \"volume_type\": \"fast.ru-3a\"\n  }]\n}\n```\n\n\n**HCL2**\n\n```hcl\n\nsource \"openstack\" \"example\" {\n  availability_zone       = \"ru-3a\"\n  flavor                  = \"1001\"\n  identity_endpoint       = \"https://api.selvpc.com/identity/v3\"\n  image_name              = \"Test image\"\n  networks                = \"9aab504e-bedf-48af-9256-682a7fa3dabb\"\n  password                = \"foo\"\n  region                  = \"ru-3\"\n  source_image            = \"5f58ea7e-6264-4939-9d0f-0c23072b1132\"\n  ssh_username            = \"root\"\n  tenant_id               = \"2e90c5c04c7b4c509be78723e2b55b77\"\n  use_blockstorage_volume = true\n  username                = \"foo\"\n  volume_type             = \"fast.ru-3a\"\n}\n\nbuild {\n  sources = [\"source.openstack.example\"]\n}\n\n```\n\n\n## Notes on OpenStack Authorization\n\nThe simplest way to get all settings for authorization against OpenStack is to\ngo into the OpenStack Dashboard (Horizon) select your _Project_ and navigate\n_Project, Access & Security_, select _API Access_ and _Download OpenStack RC\nFile v3_. Source the file, and select your wanted region by setting environment\nvariable `OS_REGION_NAME` or `OS_REGION_ID` and\n`export OS_TENANT_NAME=$OS_PROJECT_NAME` or\n`export OS_TENANT_ID=$OS_PROJECT_ID`.\n\n~> `OS_TENANT_NAME` or `OS_TENANT_ID` must be used even with Identity v3,\n`OS_PROJECT_NAME` and `OS_PROJECT_ID` has no effect in Packer.\n\nTo troubleshoot authorization issues test you environment variables with the\nOpenStack cli. It can be installed with\n\n    $ pip install --user python-openstackclient\n\n### Authorize Using Tokens\n\nTo authorize with a access token only `identity_endpoint` and `token` is\nneeded, and possibly `tenant_name` or `tenant_id` depending on your token type.\nOr use the following environment variables:\n\n- `OS_AUTH_URL`\n- `OS_TOKEN`\n- One of `OS_TENANT_NAME` or `OS_TENANT_ID`\n\n### Authorize Using Application Credential\n\nTo authorize with an application credential, only `identity_endpoint`,\n`application_credential_id`, and `application_credential_secret` are needed.\nOr use the following environment variables:\n\n- `OS_AUTH_URL`\n- `OS_APPLICATION_CREDENTIAL_ID`\n- `OS_APPLICATION_CREDENTIAL_SECRET`\n","created_at":"2024-02-29T16:20:46.246Z","updated_at":"2024-02-29T16:20:46.246Z","name":"OpenStack","slug":"openstack","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"OpenStack","url":"/packer/integrations/hashicorp/openstack","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builder","level":4,"title":"Builder"}],"serializedREADME":{"compiledSource":"const layoutProps={};const MDXLayout=\"wrapper\";function MDXContent({components,...props}){return mdx(MDXLayout,{...layoutProps,...props,components:components,mdxType:\"MDXLayout\"},mdx(\"p\",{\"className\":\"g-type-long-body\"},`The Openstack Packer plugin provides a builder that is able to create new images\nfor use with OpenStack. The builder takes a source image, runs any provisioning\nnecessary on the image after launching it, then creates a new reusable image.\nThis reusable image can then be used as the foundation of new servers that are\nlaunched within OpenStack. The builder will create temporary keypairs that\nprovide temporary access to the server while the image is being created. This\nsimplifies configuration quite a bit.`),mdx(\"h3\",{\"id\":\"user-content-installation\",\"data-text-content\":\"Installation\",\"className\":\"g-type-display-4\"},`Installation`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`To install this plugin, copy and paste this code into your Packer configuration .\nThen, run `,mdx(\"a\",{parentName:\"p\",\"href\":\"https://www.packer.io/docs/commands/init\"},mdx(\"inlineCode\",{parentName:\"a\"},`packer init`)),`.`),mdx(\"pre\",{\"className\":\"language-hcl\"},mdx(\"code\",{parentName:\"pre\",\"className\":\"language-hcl\"},mdx(\"span\",{parentName:\"code\",\"className\":\"token keyword\"},`packer`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token keyword\"},`required_plugins`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`    `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`openstack`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`version`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"~> 1\"`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`source`),`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"github.com/hashicorp/openstack\"`),`\n`,`    `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Alternatively, you can use `,mdx(\"inlineCode\",{parentName:\"p\"},`packer plugins install`),` to manage installation of this plugin.`),mdx(\"pre\",{\"className\":\"language-sh\"},mdx(\"code\",{parentName:\"pre\",\"className\":\"language-sh\"},`$ packer plugins install github.com/hashicorp/openstack`,`\n`)),mdx(\"h3\",{\"id\":\"user-content-components\",\"data-text-content\":\"Components\",\"className\":\"g-type-display-4\"},`Components`),mdx(\"h4\",{\"id\":\"user-content-builder\",\"data-text-content\":\"Builder\",\"className\":\"g-type-display-5\"},`Builder`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",{parentName:\"li\",\"href\":\"/packer/integrations/hashicorp/openstack/latest/components/builder/openstack\"},`builder`),` - The OpenStack Packer builder is able to create new images for use with OpenStack.`)))};MDXContent.isMDXComponent=true;","scope":{}}},"__N_SSG":true}