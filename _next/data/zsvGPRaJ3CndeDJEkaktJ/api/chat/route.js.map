{"version":3,"file":"pages/api/chat/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/pages/api/chat/route.ts","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nimport { type NextRequest, type NextFetchEvent } from 'next/server'\nimport { z } from 'zod'\n\nexport const config = {\n\truntime: 'experimental-edge',\n}\n\n// POST body payload\nconst bodySchema = z.object({\n\ttask: z.string().transform((e) => e.trim()),\n\tconversationId: z.string().optional(), // noop until we're ready for multi-message conversations\n\tparentMessageId: z.string().optional(), // noop until we're ready for multi-message conversations\n})\n\nexport default async function edgehandler(\n\treq: NextRequest,\n\tevt: NextFetchEvent\n) {\n\tconsole.log(`[${req.method}] ${req.url}`)\n\tconst authorization = req.headers.get('authorization')\n\tif (!authorization) {\n\t\treturn new Response('Not found', { status: 404 })\n\t}\n\n\tconst jwt = authorization.split(' ')[1]\n\n\tswitch (req.method) {\n\t\tcase 'POST': {\n\t\t\t// read request body\n\t\t\tconst body = await req.json()\n\t\t\t// validate request body\n\t\t\tconst parsedBody = bodySchema.safeParse(body)\n\t\t\tif (!parsedBody.success) {\n\t\t\t\treturn new Response('Bad Request', { status: 400 })\n\t\t\t}\n\t\t\tconst { task, conversationId, parentMessageId } = parsedBody.data\n\n\t\t\t// - cheat codes to simulate errors\n\t\t\t//   helpful for state-reproduction for visual debugging\n\t\t\tconst regexp = /^simulate (\\d{3}) (.*)$/i\n\t\t\tif (task.match(regexp)) {\n\t\t\t\tconst [, status, message] = task.match(regexp)\n\t\t\t\treturn new Response(message, {\n\t\t\t\t\tstatus: Number(status),\n\t\t\t\t\tstatusText: message,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tlet res: Response\n\t\t\t\tif (conversationId && parentMessageId) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'continue conversation: %s - %s',\n\t\t\t\t\t\tconversationId,\n\t\t\t\t\t\tparentMessageId\n\t\t\t\t\t)\n\t\t\t\t\tres = await continueConversation({\n\t\t\t\t\t\tconversationId,\n\t\t\t\t\t\tparentMessageId,\n\t\t\t\t\t\ttask,\n\t\t\t\t\t\taccessToken: jwt,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('create conversation')\n\t\t\t\t\tres = await createConversation({ task, accessToken: jwt })\n\t\t\t\t}\n\n\t\t\t\tconst headers = res.headers\n\t\t\t\tif (res.ok) {\n\t\t\t\t\tconst conversationId = headers.get('x-conversation-id')\n\t\t\t\t\tconst messageId = headers.get('x-message-id')\n\t\t\t\t\tif (!messageId) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t'[/api/chat/route] x-message-id header is missing from the server'\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tif (!conversationId) {\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t'[/api/chat/route] x-conversation-id header is missing from the server'\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\treturn new Response(res.body, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8',\n\t\t\t\t\t\t\t'x-message-id': messageId,\n\t\t\t\t\t\t\t'x-conversation-id': conversationId,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\t// additional Headers\n\t\t\t\t\tconst additionalHeaders = {}\n\n\t\t\t\t\tif (res.status == 429) {\n\t\t\t\t\t\t// forward rate limit headers\n\t\t\t\t\t\tconst X_RATELIMIT_LIMIT = 'x-ratelimit-limit'\n\t\t\t\t\t\tconst X_RATELIMIT_REMAINING = 'x-ratelimit-remaining'\n\t\t\t\t\t\tconst X_RATELIMIT_RESET = 'x-ratelimit-reset' // timestamp in seconds, like 1691509833\n\t\t\t\t\t\tconst X_RATELIMIT_RESOURCE = 'x-ratelimit-resource'\n\t\t\t\t\t\tconst X_RATELIMIT_USED = 'x-ratelimit-used'\n\t\t\t\t\t\tadditionalHeaders[X_RATELIMIT_LIMIT] =\n\t\t\t\t\t\t\tres.headers.get(X_RATELIMIT_LIMIT)\n\t\t\t\t\t\tadditionalHeaders[X_RATELIMIT_REMAINING] = res.headers.get(\n\t\t\t\t\t\t\tX_RATELIMIT_REMAINING\n\t\t\t\t\t\t)\n\t\t\t\t\t\tadditionalHeaders[X_RATELIMIT_RESET] =\n\t\t\t\t\t\t\tres.headers.get(X_RATELIMIT_RESET)\n\t\t\t\t\t\tadditionalHeaders[X_RATELIMIT_RESOURCE] =\n\t\t\t\t\t\t\tres.headers.get(X_RATELIMIT_RESOURCE)\n\t\t\t\t\t\tadditionalHeaders[X_RATELIMIT_USED] =\n\t\t\t\t\t\t\tres.headers.get(X_RATELIMIT_USED)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Response(res.body, {\n\t\t\t\t\t\tstatus: res.status,\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t...additionalHeaders,\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e)\n\t\t\t\treturn new Response('Internal Server Error', { status: 500 })\n\t\t\t}\n\t\t}\n\t}\n}\n\n// POST /v1/conversations\nasync function createConversation({ task, accessToken }) {\n\tconst headers = new Headers()\n\theaders.set('Authorization', `Bearer ${accessToken}`)\n\theaders.set('Content-Type', 'application/json')\n\n\tconst url = new URL(\n\t\t'/v1/conversations',\n\t\tprocess.env.EXPERIMENTAL_CHAT_API_BASE_URL\n\t)\n\tconst body = JSON.stringify({ task })\n\n\treturn await fetch(url.toString(), {\n\t\tbody: body,\n\t\tmethod: 'POST',\n\t\theaders,\n\t})\n}\n\n// POST /v1/conversations/:conversation_id\nasync function continueConversation({\n\tconversationId,\n\tparentMessageId,\n\ttask,\n\taccessToken,\n}) {\n\tconst headers = new Headers()\n\theaders.set('Authorization', `Bearer ${accessToken}`)\n\theaders.set('Content-Type', 'application/json')\n\n\tconst url = new URL(\n\t\t`/v1/conversations/${conversationId}`,\n\t\tprocess.env.EXPERIMENTAL_CHAT_API_BASE_URL\n\t)\n\tconst body = JSON.stringify({ task, parentMessageId })\n\n\treturn await fetch(url.toString(), {\n\t\tbody: body,\n\t\tmethod: 'POST',\n\t\theaders,\n\t})\n}\n","\n        import 'next/dist/esm/server/web/globals'\n        import { adapter } from 'next/dist/esm/server/web/adapter'\n        import { IncrementalCache } from 'next/dist/esm/server/lib/incremental-cache'\n        import { wrapApiHandler } from 'next/dist/esm/server/api-utils'\n\n        import handler from \"private-next-pages/api/chat/route.ts\"\n\n        if (typeof handler !== 'function') {\n          throw new Error('The Edge Function \"pages/api/chat/route\" must export a `default` function');\n        }\n\n        export default function nHandler (opts) {\n          return adapter({\n              ...opts,\n              IncrementalCache,\n              page: \"/api/chat/route\",\n              handler: wrapApiHandler(\"/api/chat/route\", handler),\n          })\n        }\n    "],"names":["module","exports","require","bodySchema","z","object","task","string","transform","e","trim","conversationId","optional","parentMessageId","edgehandler","req","evt","console","log","method","url","authorization","headers","get","Response","status","jwt","split","body","json","parsedBody","safeParse","success","data","regexp","match","message","Number","statusText","res","continueConversation","accessToken","createConversation","ok","messageId","warn","additionalHeaders","X_RATELIMIT_LIMIT","X_RATELIMIT_REMAINING","X_RATELIMIT_RESET","X_RATELIMIT_RESOURCE","X_RATELIMIT_USED","error","Headers","set","URL","process","env","EXPERIMENTAL_CHAT_API_BASE_URL","JSON","stringify","fetch","toString","nHandler","opts","adapter","C","IncrementalCache","incremental_cache","k","page","handler","api_utils","fd"],"sourceRoot":""}