{"pageProps":{"metadata":{"title":"Simple Service | Integrations","description":"This deploys a simple service job to Nomad that runs a docker container."},"product":{"name":"Nomad","slug":"nomad","algoliaConfig":{"indexName":"product_NOMAD","searchOnlyApiKey":"9bfec34ea54e56a11bd50d6bfedc5e71"},"analyticsConfig":{"includedDomains":"nomadproject.io www.nomadproject.io","segmentWriteKey":"qW11yxgipKMsKFKQUCpTVgQUYftYsJj0"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Nomad by HashiCorp","description":"Nomad is a highly available, distributed, data-center aware cluster and application scheduler designed to support the modern datacenter with support for long-running services, batch jobs, and much more.","image":"https://www.nomadproject.io/nomad-public/img/og-image.png","icon":[{"href":"/nomad-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiDays","url":"https://hashicorp.com/conferences/hashidays","text":"One conference. Three cities.","linkText":"Find a city near you","expirationDate":"2024-06-14T00:00:00-08:00"},"version":"1.2.5","subnavItems":[{"text":"Overview","url":"/","type":"inbound"},{"text":"Enterprise","url":"https://www.hashicorp.com/products/nomad/","type":"outbound"},"divider",{"text":"Tutorials","url":"https://developer.hashicorp.com/nomad/tutorials","type":"outbound"},{"text":"Docs","url":"/docs","type":"inbound"},{"text":"API","url":"/api-docs","type":"inbound"},{"text":"Plugins","url":"/plugins","type":"inbound"},{"text":"Tools","url":"/tools","type":"inbound"},{"text":"Community","url":"/community","type":"inbound"}],"basePaths":["docs","api-docs","plugins","tools","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"entry-point","name":"Intro","path":"intro"},{"iconName":"api","name":"API","path":"api-docs"},{"iconName":"terminal-screen","name":"Tools","path":"tools"},{"iconName":"plug","name":"Plugins","path":"plugins"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Nomad Integrations."}},"integration":{"id":"94a6ceb4-ffbd-41bd-af75-8af1ecddbe04","slug":"simple-service","name":"Simple Service","description":"This deploys a simple service job to Nomad that runs a docker container.","license_type":null,"license_url":null,"external_only":false,"external_url":"https://learn.hashicorp.com/tutorials/nomad/get-started-run?in=nomad/get-started","tier":"official","repo_url":"https://github.com/hashicorp/nomad-pack-community-registry","subdirectory":"/packs/simple_service","created_at":"2023-05-17T17:28:08.362Z","updated_at":"2023-07-12T18:05:11.258Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"nomad","name":"Nomad","created_at":"2022-11-09T22:56:29.799Z","updated_at":"2022-11-09T22:56:29.799Z"},"versions":["0.0.1"],"components":[],"flags":[],"integration_type":{"id":"e8835871-6a6a-4836-8797-505cbfbe426a","product_id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"pack","name":"Pack","plural_name":"Packs","description":"Packs are templated sets of resources that are meant to be deployed to Nomad together. Each pack defines parameters that can be customized by the end user.","created_at":"2023-05-02T17:31:29.062Z","updated_at":"2023-05-17T22:44:11.429Z"}},"activeRelease":{"id":"7f32ad3b-d646-489f-9ab9-3a66a89e9374","integration_id":"94a6ceb4-ffbd-41bd-af75-8af1ecddbe04","version":"0.0.1","readme":"This pack is a used to deploy a Docker image to as a service job to Nomad.\n\nThis is ideal for configuring and deploying a simple web application to Nomad.\n\n## Customizing the Docker Image\n\nThe docker image deployed can be replaced with a variable. In the example\nbelow, we will deploy and run `httpd:latest`.\n\n```\nnomad-pack run simple_service --var image=\"httpd:latest\"\n```\n\n## Customizing Ports\n\nThe ports that are exposed via Docker can be customized as well.\n\nIn this case, we'll write the port values to a file called `./overrides.hcl`:\n\n```\n{\n  name = \"http\"\n  port = 8000\n},\n{\n  name = \"https\"\n  port = 8001\n}\n```\n\nThen pass the file into the run command:\n\n```\nnomad-pack run simple_service -f ./overrides.hcl`\"\n```\n\n## Customizing Resources\n\nThe application resource limits can be customized:\n\n```\nresources = {\n  cpu = 500\n  memory = 501\n}\n```\n\n## Customizing Environment Variables\n\nEnvironment variables can be added:\n\n```\nenv_vars = [\n  {\n    key = \"foo\"\n    value = 1\n  }\n]\n```\n\n## Consul Service and Load Balancer Integration\n\nOptionally, this pack can configure a Consul service.\n\nIf the `register_consul_service` is unset or set to true, the Consul service will be registered.\n\nSeveral load balancers in the [The Nomad Pack Community Registry](../README.md) are configured to connect to\nthis service with ease.\n\nThe [NginX](../nginx/README.md) and [HAProxy](../haproxy/README.md) packs can be configured to balance over the\nConsul service deployed by this pack. Just ensure that the \"consul_service_name\" variable provided to those\npacks matches this consul_service_name.\n\nThe [Fabio](../fabio/README.md) and [Traefik](../traefik/README.md) packs are configured to search for Consul\nservices with the specific tags.\n\nTo tag this Consul service to work with Fabio, add `\"urlprefix-<PATH>\"`\nto the consul_tags. For instance, to route at the root path, you would add `\"urlprefix-/\"`. To route at the path `\"/api/v1\"`, you would add '\"urlprefix-/api/v1\".\n\nTo tag this Consul service to work with Traefik, add \"traefik.enable=true\" to the consul_tags, also add \"traefik.http.routers.http.rule=Path(\\`<PATH>\\`)\". To route at the root path, you would add \"traefik.http.routers.http.rule=Path(\\`/\\`)\". To route at the path \"/api/v1\", you would add \"traefik.http.routers.http.rule=Path(\\`/api/v1\\`)\".\n\n```\nregister_consul_service = true\n\nconsul_tags = [\n  \"urlprefix-/\",\n  \"traefik.enable=true\",\n  \"traefik.http.routers.http.rule=Path(`/`)\",\n]\n```\n\n## Customizing Consul and Upstream Services\n\nConsul configuration can be tweaked and (upstream services)[https://www.nomadproject.io/docs/job-specification/upstreams]\ncan be added as well.\n\n```\nregister_consul_service = true\nconsul_service_name = \"app-service-name\"\nhas_health_check = true\nhealth_check = {\n  path = \"/health\"\n  interval = \"20s\"\n  timeout  = \"3s\"\n}\nupstreams = [\n  {\n    name = \"other-service\"\n    port = 8001\n  }\n]\n```\n","created_at":"2023-05-17T22:19:06.810Z","updated_at":"2023-05-17T22:19:06.810Z","components":[]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Nomad","url":"/nomad"},{"title":"Integrations","url":"/nomad/integrations"},{"title":"Simple Service","url":"/nomad/integrations/hashicorp/simple-service","isCurrentPage":true}],"anchorLinks":[{"id":"customizing-the-docker-image","level":2,"title":"Customizing the Docker Image"},{"id":"customizing-ports","level":2,"title":"Customizing Ports"},{"id":"customizing-resources","level":2,"title":"Customizing Resources"},{"id":"customizing-environment-variables","level":2,"title":"Customizing Environment Variables"},{"id":"consul-service-and-load-balancer-integration","level":2,"title":"Consul Service and Load Balancer Integration"},{"id":"customizing-consul-and-upstream-services","level":2,"title":"Customizing Consul and Upstream Services"}],"serializedREADME":{"compiledSource":"const layoutProps={};const MDXLayout=\"wrapper\";function MDXContent({components,...props}){return mdx(MDXLayout,{...layoutProps,...props,components:components,mdxType:\"MDXLayout\"},mdx(\"p\",{\"className\":\"g-type-long-body\"},`This pack is a used to deploy a Docker image to as a service job to Nomad.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`This is ideal for configuring and deploying a simple web application to Nomad.`),mdx(\"h2\",{\"id\":\"user-content-customizing-the-docker-image\",\"data-text-content\":\"Customizing the Docker Image\",\"className\":\"g-type-display-3\"},`Customizing the Docker Image`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The docker image deployed can be replaced with a variable. In the example\nbelow, we will deploy and run `,mdx(\"inlineCode\",{parentName:\"p\"},`httpd:latest`),`.`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`nomad-pack run simple_service --var image=\"httpd:latest\"`,`\n`)),mdx(\"h2\",{\"id\":\"user-content-customizing-ports\",\"data-text-content\":\"Customizing Ports\",\"className\":\"g-type-display-3\"},`Customizing Ports`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The ports that are exposed via Docker can be customized as well.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`In this case, we'll write the port values to a file called `,mdx(\"inlineCode\",{parentName:\"p\"},`./overrides.hcl`),`:`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`{`,`\n`,`  name = \"http\"`,`\n`,`  port = 8000`,`\n`,`},`,`\n`,`{`,`\n`,`  name = \"https\"`,`\n`,`  port = 8001`,`\n`,`}`,`\n`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Then pass the file into the run command:`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`nomad-pack run simple_service -f ./overrides.hcl\\`\"`,`\n`)),mdx(\"h2\",{\"id\":\"user-content-customizing-resources\",\"data-text-content\":\"Customizing Resources\",\"className\":\"g-type-display-3\"},`Customizing Resources`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The application resource limits can be customized:`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`resources = {`,`\n`,`  cpu = 500`,`\n`,`  memory = 501`,`\n`,`}`,`\n`)),mdx(\"h2\",{\"id\":\"user-content-customizing-environment-variables\",\"data-text-content\":\"Customizing Environment Variables\",\"className\":\"g-type-display-3\"},`Customizing Environment Variables`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Environment variables can be added:`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`env_vars = [`,`\n`,`  {`,`\n`,`    key = \"foo\"`,`\n`,`    value = 1`,`\n`,`  }`,`\n`,`]`,`\n`)),mdx(\"h2\",{\"id\":\"user-content-consul-service-and-load-balancer-integration\",\"data-text-content\":\"Consul Service and Load Balancer Integration\",\"className\":\"g-type-display-3\"},`Consul Service and Load Balancer Integration`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Optionally, this pack can configure a Consul service.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`If the `,mdx(\"inlineCode\",{parentName:\"p\"},`register_consul_service`),` is unset or set to true, the Consul service will be registered.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Several load balancers in the `,mdx(\"a\",{parentName:\"p\",\"href\":\"../README.md\"},`The Nomad Pack Community Registry`),` are configured to connect to\nthis service with ease.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The `,mdx(\"a\",{parentName:\"p\",\"href\":\"../nginx/README.md\"},`NginX`),` and `,mdx(\"a\",{parentName:\"p\",\"href\":\"../haproxy/README.md\"},`HAProxy`),` packs can be configured to balance over the\nConsul service deployed by this pack. Just ensure that the \"consul_service_name\" variable provided to those\npacks matches this consul_service_name.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The `,mdx(\"a\",{parentName:\"p\",\"href\":\"../fabio/README.md\"},`Fabio`),` and `,mdx(\"a\",{parentName:\"p\",\"href\":\"../traefik/README.md\"},`Traefik`),` packs are configured to search for Consul\nservices with the specific tags.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`To tag this Consul service to work with Fabio, add `,mdx(\"inlineCode\",{parentName:\"p\"},`\"urlprefix-<PATH>\"`),`\nto the consul_tags. For instance, to route at the root path, you would add `,mdx(\"inlineCode\",{parentName:\"p\"},`\"urlprefix-/\"`),`. To route at the path `,mdx(\"inlineCode\",{parentName:\"p\"},`\"/api/v1\"`),`, you would add '\"urlprefix-/api/v1\".`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`To tag this Consul service to work with Traefik, add \"traefik.enable=true\" to the consul_tags, also add \"traefik.http.routers.http.rule=Path(`,`\\``,`\\``,`)\". To route at the root path, you would add \"traefik.http.routers.http.rule=Path(`,`\\``,`/`,`\\``,`)\". To route at the path \"/api/v1\", you would add \"traefik.http.routers.http.rule=Path(`,`\\``,`/api/v1`,`\\``,`)\".`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`register_consul_service = true`,`\n`,`\n`,`consul_tags = [`,`\n`,`  \"urlprefix-/\",`,`\n`,`  \"traefik.enable=true\",`,`\n`,`  \"traefik.http.routers.http.rule=Path(\\`/\\`)\",`,`\n`,`]`,`\n`)),mdx(\"h2\",{\"id\":\"user-content-customizing-consul-and-upstream-services\",\"data-text-content\":\"Customizing Consul and Upstream Services\",\"className\":\"g-type-display-3\"},`Customizing Consul and Upstream Services`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Consul configuration can be tweaked and (upstream services)`,`[https://www.nomadproject.io/docs/job-specification/upstreams]`,`\ncan be added as well.`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`register_consul_service = true`,`\n`,`consul_service_name = \"app-service-name\"`,`\n`,`has_health_check = true`,`\n`,`health_check = {`,`\n`,`  path = \"/health\"`,`\n`,`  interval = \"20s\"`,`\n`,`  timeout  = \"3s\"`,`\n`,`}`,`\n`,`upstreams = [`,`\n`,`  {`,`\n`,`    name = \"other-service\"`,`\n`,`    port = 8001`,`\n`,`  }`,`\n`,`]`,`\n`)))};MDXContent.isMDXComponent=true;","scope":{}}},"__N_SSG":true}