{"pageProps":{"metadata":{"title":"LXD Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiDays","url":"https://hashicorp.com/conferences/hashidays","text":"One conference. Three cities.","linkText":"Find a city near you","expirationDate":"2024-06-14T00:00:00-08:00"},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"3e86c027-ff11-47ee-b092-538288026966","slug":"lxd","name":"LXD","description":"The LXD plugin can be used with HashiCorp Packer to create OCI images with LXD.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/hashicorp/packer-plugin-lxd","subdirectory":"/.web-docs","created_at":"2023-06-15T19:02:55.988Z","updated_at":"2023-08-08T17:01:11.662Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.2","1.0.1"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"e930185c-97bf-445b-8b3f-e6110cf01c52","integration_id":"3e86c027-ff11-47ee-b092-538288026966","version":"1.0.2","readme":"The LXD plugin allows building containers for LXD, by starting an LXD container,\nrunning provisioners within this container, then saveing the container\nas an LXD image.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    lxd = {\n      source  = \"github.com/hashicorp/lxd\"\n      version = \"~> 1\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/hashicorp/lxd\n```\n\n### Components\n\n#### Builders\n\n- [lxd](/packer/integrations/hashicorp/lxd/latest/components/builder/lxd) - The LXD builder builds containers with LXD\n  by starting a container, provisioning it, and exporting it as a tar.gz archive of the root file system.\n","created_at":"2023-11-28T17:29:17.259Z","updated_at":"2023-11-28T17:29:17.259Z","components":[{"id":"e20035ed-a5c7-433d-b32d-cc03ca1720ee","integration_release_id":"e930185c-97bf-445b-8b3f-e6110cf01c52","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `lxd`\nArtifact BuilderId: `lxd`\n\nThe `lxd` Packer builder builds containers for LXD. The builder starts an LXD\ncontainer, runs provisioners within this container, then saves the container as\nan LXD image.\n\nThe LXD builder requires a modern linux kernel and the `lxd` package. This\nbuilder does not work with LXC.\n\n## Basic Example\n\nBelow is a fully functioning example.\n\n**HCL**\n\n```hcl\nsource \"lxd\" \"lxd-xenial\" {\n  image = \"ubuntu-daily:xenial\"\n  output_image = \"ubuntu-xenial\"\n  publish_properties {\n    description = \"Trivial repackage with Packer\"\n  }\n}\n\nbuild {\n  sources = [\"lxd.lxd-xenial\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"lxd\",\n      \"name\": \"lxd-xenial\",\n      \"image\": \"ubuntu-daily:xenial\",\n      \"output_image\": \"ubuntu-xenial\",\n      \"publish_properties\": {\n        \"description\": \"Trivial repackage with Packer\"\n      }\n    }\n  ]\n}\n```\n\n## Configuration Reference\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/lxd/config.go; DO NOT EDIT MANUALLY -->\n\n- `image` (string) - The source image to use when creating the build\n  container. This can be a (local or remote) image (name or fingerprint).\n  E.G. my-base-image, ubuntu-daily:x, 08fababf6f27, ...\n\n<!-- End of code generated from the comments of the Config struct in builder/lxd/config.go; -->\n\n\n  ~> Note: The builder may appear to pause if required to download a\n  remote image, as they are usually 100-200MB. `/var/log/lxd/lxd.log` will\n  mention starting such downloads.\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/lxd/config.go; DO NOT EDIT MANUALLY -->\n\n- `output_image` (string) - The name of the output artifact. Defaults to\n  name.\n\n- `container_name` (string) - Container Name\n\n- `publish_remote_name` (string) - The (optional) name of the LXD remote on which to publish the\n  container image.\n\n- `command_wrapper` (string) - Lets you prefix all builder commands, such as\n  with ssh for a remote build host. Defaults to `{{.Command}}`; i.e. no\n  wrapper.\n\n- `profile` (string) - Profile\n\n- `init_sleep` (string) - The number of seconds to sleep between launching\n  the LXD instance and provisioning it; defaults to 3 seconds.\n\n- `publish_properties` (map[string]string) - Pass key values to the publish\n  step to be set as properties on the output image. This is most helpful to\n  set the description, but can be used to set anything needed. See\n  https://stgraber.org/2016/03/30/lxd-2-0-image-management-512/\n  for more properties.\n\n- `launch_config` (map[string]string) - List of key/value pairs you wish to\n  pass to lxc launch via --config. Defaults to empty.\n\n- `virtual_machine` (bool) - Create LXD virtual-machine image on hosts running LXD 4.0 and above; defaults to false for container image\n\n- `skip_publish` (bool) - Skip execute `lxc publish`; defaults to false\n\n<!-- End of code generated from the comments of the Config struct in builder/lxd/config.go; -->\n","created_at":"2023-11-28T17:29:17.541Z","updated_at":"2023-11-28T17:29:17.541Z","name":"LXD","slug":"lxd","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"component":{"id":"e20035ed-a5c7-433d-b32d-cc03ca1720ee","integration_release_id":"e930185c-97bf-445b-8b3f-e6110cf01c52","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `lxd`\nArtifact BuilderId: `lxd`\n\nThe `lxd` Packer builder builds containers for LXD. The builder starts an LXD\ncontainer, runs provisioners within this container, then saves the container as\nan LXD image.\n\nThe LXD builder requires a modern linux kernel and the `lxd` package. This\nbuilder does not work with LXC.\n\n## Basic Example\n\nBelow is a fully functioning example.\n\n**HCL**\n\n```hcl\nsource \"lxd\" \"lxd-xenial\" {\n  image = \"ubuntu-daily:xenial\"\n  output_image = \"ubuntu-xenial\"\n  publish_properties {\n    description = \"Trivial repackage with Packer\"\n  }\n}\n\nbuild {\n  sources = [\"lxd.lxd-xenial\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"lxd\",\n      \"name\": \"lxd-xenial\",\n      \"image\": \"ubuntu-daily:xenial\",\n      \"output_image\": \"ubuntu-xenial\",\n      \"publish_properties\": {\n        \"description\": \"Trivial repackage with Packer\"\n      }\n    }\n  ]\n}\n```\n\n## Configuration Reference\n\n### Required:\n\n<!-- Code generated from the comments of the Config struct in builder/lxd/config.go; DO NOT EDIT MANUALLY -->\n\n- `image` (string) - The source image to use when creating the build\n  container. This can be a (local or remote) image (name or fingerprint).\n  E.G. my-base-image, ubuntu-daily:x, 08fababf6f27, ...\n\n<!-- End of code generated from the comments of the Config struct in builder/lxd/config.go; -->\n\n\n  ~> Note: The builder may appear to pause if required to download a\n  remote image, as they are usually 100-200MB. `/var/log/lxd/lxd.log` will\n  mention starting such downloads.\n\n### Optional:\n\n<!-- Code generated from the comments of the Config struct in builder/lxd/config.go; DO NOT EDIT MANUALLY -->\n\n- `output_image` (string) - The name of the output artifact. Defaults to\n  name.\n\n- `container_name` (string) - Container Name\n\n- `publish_remote_name` (string) - The (optional) name of the LXD remote on which to publish the\n  container image.\n\n- `command_wrapper` (string) - Lets you prefix all builder commands, such as\n  with ssh for a remote build host. Defaults to `{{.Command}}`; i.e. no\n  wrapper.\n\n- `profile` (string) - Profile\n\n- `init_sleep` (string) - The number of seconds to sleep between launching\n  the LXD instance and provisioning it; defaults to 3 seconds.\n\n- `publish_properties` (map[string]string) - Pass key values to the publish\n  step to be set as properties on the output image. This is most helpful to\n  set the description, but can be used to set anything needed. See\n  https://stgraber.org/2016/03/30/lxd-2-0-image-management-512/\n  for more properties.\n\n- `launch_config` (map[string]string) - List of key/value pairs you wish to\n  pass to lxc launch via --config. Defaults to empty.\n\n- `virtual_machine` (bool) - Create LXD virtual-machine image on hosts running LXD 4.0 and above; defaults to false for container image\n\n- `skip_publish` (bool) - Skip execute `lxc publish`; defaults to false\n\n<!-- End of code generated from the comments of the Config struct in builder/lxd/config.go; -->\n","created_at":"2023-11-28T17:29:17.541Z","updated_at":"2023-11-28T17:29:17.541Z","name":"LXD","slug":"lxd","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"basic-example","level":2,"title":"Basic Example"},{"id":"configuration-reference","level":2,"title":"Configuration Reference"},{"id":"required:","level":3,"title":"Required:"},{"id":"optional:","level":3,"title":"Optional:"}],"serializedREADME":{"compiledSource":"const layoutProps={};const MDXLayout=\"wrapper\";function MDXContent({components,...props}){return mdx(MDXLayout,{...layoutProps,...props,components:components,mdxType:\"MDXLayout\"},mdx(\"p\",{\"className\":\"g-type-long-body\"},`Type: `,mdx(\"inlineCode\",{parentName:\"p\"},`lxd`),`\nArtifact BuilderId: `,mdx(\"inlineCode\",{parentName:\"p\"},`lxd`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The `,mdx(\"inlineCode\",{parentName:\"p\"},`lxd`),` Packer builder builds containers for LXD. The builder starts an LXD\ncontainer, runs provisioners within this container, then saves the container as\nan LXD image.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The LXD builder requires a modern linux kernel and the `,mdx(\"inlineCode\",{parentName:\"p\"},`lxd`),` package. This\nbuilder does not work with LXC.`),mdx(\"h2\",{\"id\":\"user-content-basic-example\",\"data-text-content\":\"Basic Example\",\"className\":\"g-type-display-3\"},`Basic Example`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Below is a fully functioning example.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},mdx(\"strong\",{parentName:\"p\"},`HCL`)),mdx(\"pre\",{\"className\":\"language-hcl\"},mdx(\"code\",{parentName:\"pre\",\"className\":\"language-hcl\"},`source `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"lxd\"`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"lxd-xenial\"`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`image`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"ubuntu-daily:xenial\"`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`output_image`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"ubuntu-xenial\"`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token keyword\"},`publish_properties`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`    `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`description`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"Trivial repackage with Packer\"`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,`\n`,mdx(\"span\",{parentName:\"code\",\"className\":\"token keyword\"},`build`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`sources`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`=`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`[`),mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"lxd.lxd-xenial\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`]`),`\n`,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},mdx(\"strong\",{parentName:\"p\"},`JSON`)),mdx(\"pre\",{\"className\":\"language-json\"},mdx(\"code\",{parentName:\"pre\",\"className\":\"language-json\"},mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"builders\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`[`),`\n`,`    `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"type\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"lxd\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`,`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"name\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"lxd-xenial\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`,`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"image\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"ubuntu-daily:xenial\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`,`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"output_image\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"ubuntu-xenial\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`,`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"publish_properties\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`{`),`\n`,`        `,mdx(\"span\",{parentName:\"code\",\"className\":\"token property\"},`\"description\"`),mdx(\"span\",{parentName:\"code\",\"className\":\"token operator\"},`:`),` `,mdx(\"span\",{parentName:\"code\",\"className\":\"token string\"},`\"Trivial repackage with Packer\"`),`\n`,`      `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,`    `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`,`  `,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`]`),`\n`,mdx(\"span\",{parentName:\"code\",\"className\":\"token punctuation\"},`}`),`\n`)),mdx(\"h2\",{\"id\":\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",\"className\":\"g-type-display-3\"},`Configuration Reference`),mdx(\"h3\",{\"id\":\"user-content-required:\",\"data-text-content\":\"Required\",\"className\":\"g-type-display-4\"},`Required:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},`image`),` (string) - The source image to use when creating the build\ncontainer. This can be a (local or remote) image (name or fingerprint).\nE.G. my-base-image, ubuntu-daily:x, 08fababf6f27, ...`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`  ~> Note: The builder may appear to pause if required to download a\nremote image, as they are usually 100-200MB. `,mdx(\"inlineCode\",{parentName:\"p\"},`/var/log/lxd/lxd.log`),` will\nmention starting such downloads.`),mdx(\"h3\",{\"id\":\"user-content-optional:\",\"data-text-content\":\"Optional\",\"className\":\"g-type-display-4\"},`Optional:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`output_image`),` (string) - The name of the output artifact. Defaults to\nname.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`container_name`),` (string) - Container Name`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`publish_remote_name`),` (string) - The (optional) name of the LXD remote on which to publish the\ncontainer image.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`command_wrapper`),` (string) - Lets you prefix all builder commands, such as\nwith ssh for a remote build host. Defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},`{{.Command}}`),`; i.e. no\nwrapper.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`profile`),` (string) - Profile`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`init_sleep`),` (string) - The number of seconds to sleep between launching\nthe LXD instance and provisioning it; defaults to 3 seconds.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`publish_properties`),` (map`,`[string]`,`string) - Pass key values to the publish\nstep to be set as properties on the output image. This is most helpful to\nset the description, but can be used to set anything needed. See\n`,mdx(\"a\",{parentName:\"p\",\"href\":\"https://stgraber.org/2016/03/30/lxd-2-0-image-management-512/\"},`https://stgraber.org/2016/03/30/lxd-2-0-image-management-512/`),`\nfor more properties.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`launch_config`),` (map`,`[string]`,`string) - List of key/value pairs you wish to\npass to lxc launch via --config. Defaults to empty.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`virtual_machine`),` (bool) - Create LXD virtual-machine image on hosts running LXD 4.0 and above; defaults to false for container image`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`skip_publish`),` (bool) - Skip execute `,mdx(\"inlineCode\",{parentName:\"p\"},`lxc publish`),`; defaults to false`))))};MDXContent.isMDXComponent=true;","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"LXD","url":"/packer/integrations/hashicorp/lxd","isCurrentPage":false},{"title":"v1.0.2","url":"/packer/integrations/hashicorp/lxd/v1.0.2","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"LXD","url":"/packer/integrations/hashicorp/lxd/latest/components/builder/lxd","isCurrentPage":true}]},"__N_SSG":true}