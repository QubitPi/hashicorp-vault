{"pageProps":{"metadata":{"title":"HashiCups | Integrations","description":"HashiCups Demo coffee application."},"product":{"name":"Nomad","slug":"nomad","algoliaConfig":{"indexName":"product_NOMAD","searchOnlyApiKey":"9bfec34ea54e56a11bd50d6bfedc5e71"},"analyticsConfig":{"includedDomains":"nomadproject.io www.nomadproject.io","segmentWriteKey":"qW11yxgipKMsKFKQUCpTVgQUYftYsJj0"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Nomad by HashiCorp","description":"Nomad is a highly available, distributed, data-center aware cluster and application scheduler designed to support the modern datacenter with support for long-running services, batch jobs, and much more.","image":"https://www.nomadproject.io/nomad-public/img/og-image.png","icon":[{"href":"/nomad-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.2.5","subnavItems":[{"text":"Overview","url":"/","type":"inbound"},{"text":"Enterprise","url":"https://www.hashicorp.com/products/nomad/","type":"outbound"},"divider",{"text":"Tutorials","url":"https://developer.hashicorp.com/nomad/tutorials","type":"outbound"},{"text":"Docs","url":"/docs","type":"inbound"},{"text":"API","url":"/api-docs","type":"inbound"},{"text":"Plugins","url":"/plugins","type":"inbound"},{"text":"Tools","url":"/tools","type":"inbound"},{"text":"Community","url":"/community","type":"inbound"}],"basePaths":["docs","api-docs","plugins","tools","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"entry-point","name":"Intro","path":"intro"},{"iconName":"api","name":"API","path":"api-docs"},{"iconName":"terminal-screen","name":"Tools","path":"tools"},{"iconName":"plug","name":"Plugins","path":"plugins"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Nomad Integrations."}},"integration":{"id":"3ae0d390-d5b6-4684-8e82-8b4df07115b0","slug":"hashicups","name":"HashiCups","description":"HashiCups Demo coffee application.","license_type":null,"license_url":null,"external_only":false,"external_url":"https://github.com/hashicorp-demoapp","tier":"official","repo_url":"https://github.com/hashicorp/nomad-pack-community-registry","subdirectory":"/packs/hashicups","created_at":"2023-05-17T17:26:46.319Z","updated_at":"2023-07-12T18:05:05.804Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"nomad","name":"Nomad","created_at":"2022-11-09T22:56:29.799Z","updated_at":"2022-11-09T22:56:29.799Z"},"versions":["0.0.1"],"components":[],"flags":[],"integration_type":{"id":"e8835871-6a6a-4836-8797-505cbfbe426a","product_id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"pack","name":"Pack","plural_name":"Packs","description":"Packs are templated sets of resources that are meant to be deployed to Nomad together. Each pack defines parameters that can be customized by the end user.","created_at":"2023-05-02T17:31:29.062Z","updated_at":"2023-05-17T22:44:11.429Z"}},"activeRelease":{"id":"a3eb43cb-53aa-4def-bec4-201344473ebc","integration_id":"3ae0d390-d5b6-4684-8e82-8b4df07115b0","version":"0.0.1","readme":"[HashiCups](https://github.com/hashicorp-demoapp) is a demo webapp of a coffee shop application. This pack is configured to run on a Nomad cluster without the use of Consul for service discovery.\n\n## Variables\n\n|Variable|Default Value (type)|Description|\n|---|---|---|\n|`datacenters`|`[\"dc1\"]` (list of strings)|A list of datacenters in the region which are eligible for task placement.|\n|`region`|`global` (string)|The region where the job should be placed.|\n|`frontend_version`|`v1.0.2` (string)|Frontend Docker image version.|\n|`public_api_version`|`v0.0.6` (string)|Public API Docker image version.|\n|`payments_version`|`v0.0.12` (string)|Payments API Docker image version.|\n|`product_api_version`|`v0.0.20` (string)|Products API Docker image version.|\n|`product_api_db_version`|`v0.0.20` (string)|Products API database Docker image version.|\n|`postgres_db`|`products` (string)|The Postgres database name.|\n|`postgres_user`|`postgres` (string)|The Postgres database user.|\n|`postgres_password`|`password` (string)|The Postgres database user's password.|\n|`product_api_port`|`9090` (number)|The products API service port.|\n|`frontend_port`|`3000` (number)|The frontend service port.|\n|`payments_api_port`|`8080` (number)|The payments API service port.|\n|`public_api_port`|`8081` (number)|The public API service port.|\n|`nginx_port`|`80` (number)|The Nginx reverse proxy port.|\n\n## Prerequisites\n\n- Nomad cluster (a [local dev cluster](https://learn.hashicorp.com/tutorials/nomad/get-started-run) will work) with Docker available on the node(s)\n- Ability to access Nomad client on the port defined in the `nginx_port` variable\n\n## Docker Desktop Notes\nIf you are running Nomad on your local machine with Docker Desktop, you'll need to bind the Nomad client to a non-loopback network interface so that the containers can communicate with each other.\n\n```\n$ nomad agent -dev -bind=0.0.0.0 -network-interface=en0\n```\n\nThis will bind to the `en0` interface. You can retrieve the IP address associated with it by inspecting the interface and looking at the line starting with `inet`.\n\n```\n$ ifconfig\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\toptions=400<CHANNEL_IO>\n\tether 88:66:5a:44:34:e8 \n\tinet6 fe80::c5c:1de8:d154:9341%en0 prefixlen 64 secured scopeid 0x6 \n\tinet 192.168.1.6 netmask 0xffffff00 broadcast 192.168.1.255\n\tnd6 options=201<PERFORMNUD,DAD>\n\tmedia: autoselect\n\tstatus: active\n```\n\nWith the above configuration, the Nomad UI can be accessed at `192.168.1.6:4646` and the HashiCups UI can be accessed with the same IP address on port `80` by default.\n\nSee [this FAQ page](https://www.nomadproject.io/docs/faq#q-how-to-connect-to-my-host-network-when-using-docker-desktop-windows-and-macos) for more information.","created_at":"2023-05-17T22:19:07.247Z","updated_at":"2023-05-17T22:19:07.247Z","components":[]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Nomad","url":"/nomad"},{"title":"Integrations","url":"/nomad/integrations"},{"title":"HashiCups","url":"/nomad/integrations/hashicorp/hashicups","isCurrentPage":true}],"anchorLinks":[{"id":"variables","level":2,"title":"Variables"},{"id":"prerequisites","level":2,"title":"Prerequisites"},{"id":"docker-desktop-notes","level":2,"title":"Docker Desktop Notes"}],"serializedREADME":{"compiledSource":"var l=Object.defineProperty,N=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var p=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,a=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&p(e,n,t[n]);if(d)for(var n of d(t))o.call(t,n)&&p(e,n,t[n]);return e},s=(e,t)=>N(e,c(t));var m=(e,t)=>{var n={};for(var r in e)i.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&d)for(var r of d(e))t.indexOf(r)<0&&o.call(e,r)&&(n[r]=e[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:e}=r,t=m(r,[\"components\"]);return mdx(MDXLayout,s(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",a({},{className:\"g-type-long-body\"}),mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/hashicorp-demoapp\"}),\"HashiCups\"),\" is a demo webapp of a coffee shop application. This pack is configured to run on a Nomad cluster without the use of Consul for service discovery.\"),mdx(\"h2\",a({},{id:\"user-content-variables\",\"data-text-content\":\"Variables\",className:\"g-type-display-3\"}),\"Variables\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",{parentName:\"tr\"},\"Variable\"),mdx(\"th\",{parentName:\"tr\"},\"Default Value (type)\"),mdx(\"th\",{parentName:\"tr\"},\"Description\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"datacenters\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},'[\"dc1\"]'),\" (list of strings)\"),mdx(\"td\",{parentName:\"tr\"},\"A list of datacenters in the region which are eligible for task placement.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"region\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"global\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"The region where the job should be placed.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"frontend_version\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"v1.0.2\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"Frontend Docker image version.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"public_api_version\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"v0.0.6\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"Public API Docker image version.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"payments_version\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"v0.0.12\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"Payments API Docker image version.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"product_api_version\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"v0.0.20\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"Products API Docker image version.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"product_api_db_version\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"v0.0.20\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"Products API database Docker image version.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"postgres_db\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"products\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"The Postgres database name.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"postgres_user\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"postgres\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"The Postgres database user.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"postgres_password\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"password\"),\" (string)\"),mdx(\"td\",{parentName:\"tr\"},\"The Postgres database user's password.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"product_api_port\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"9090\"),\" (number)\"),mdx(\"td\",{parentName:\"tr\"},\"The products API service port.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"frontend_port\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"3000\"),\" (number)\"),mdx(\"td\",{parentName:\"tr\"},\"The frontend service port.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"payments_api_port\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"8080\"),\" (number)\"),mdx(\"td\",{parentName:\"tr\"},\"The payments API service port.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"public_api_port\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"8081\"),\" (number)\"),mdx(\"td\",{parentName:\"tr\"},\"The public API service port.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"nginx_port\")),mdx(\"td\",{parentName:\"tr\"},mdx(\"inlineCode\",{parentName:\"td\"},\"80\"),\" (number)\"),mdx(\"td\",{parentName:\"tr\"},\"The Nginx reverse proxy port.\")))),mdx(\"h2\",a({},{id:\"user-content-prerequisites\",\"data-text-content\":\"Prerequisites\",className:\"g-type-display-3\"}),\"Prerequisites\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Nomad cluster (a \",mdx(\"a\",a({parentName:\"li\"},{href:\"https://learn.hashicorp.com/tutorials/nomad/get-started-run\"}),\"local dev cluster\"),\" will work) with Docker available on the node(s)\"),mdx(\"li\",{parentName:\"ul\"},\"Ability to access Nomad client on the port defined in the \",mdx(\"inlineCode\",{parentName:\"li\"},\"nginx_port\"),\" variable\")),mdx(\"h2\",a({},{id:\"user-content-docker-desktop-notes\",\"data-text-content\":\"Docker Desktop Notes\",className:\"g-type-display-3\"}),\"Docker Desktop Notes\"),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"If you are running Nomad on your local machine with Docker Desktop, you'll need to bind the Nomad client to a non-loopback network interface so that the containers can communicate with each other.\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"$ nomad agent -dev -bind=0.0.0.0 -network-interface=en0\",`\n`)),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"This will bind to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"en0\"),\" interface. You can retrieve the IP address associated with it by inspecting the interface and looking at the line starting with \",mdx(\"inlineCode\",{parentName:\"p\"},\"inet\"),\".\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"$ ifconfig\",`\n`,\"en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\",`\n`,\"    options=400<CHANNEL_IO>\",`\n`,\"    ether 88:66:5a:44:34:e8 \",`\n`,\"    inet6 fe80::c5c:1de8:d154:9341%en0 prefixlen 64 secured scopeid 0x6 \",`\n`,\"    inet 192.168.1.6 netmask 0xffffff00 broadcast 192.168.1.255\",`\n`,\"    nd6 options=201<PERFORMNUD,DAD>\",`\n`,\"    media: autoselect\",`\n`,\"    status: active\",`\n`)),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"With the above configuration, the Nomad UI can be accessed at \",mdx(\"inlineCode\",{parentName:\"p\"},\"192.168.1.6:4646\"),\" and the HashiCups UI can be accessed with the same IP address on port \",mdx(\"inlineCode\",{parentName:\"p\"},\"80\"),\" by default.\"),mdx(\"p\",a({},{className:\"g-type-long-body\"}),\"See \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.nomadproject.io/docs/faq#q-how-to-connect-to-my-host-network-when-using-docker-desktop-windows-and-macos\"}),\"this FAQ page\"),\" for more information.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}