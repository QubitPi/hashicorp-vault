{"pageProps":{"metadata":{"title":"SonarQube | Integrations","description":"SonarQube is an open-source platform developed by SonarSource for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs, code smells, and security vulnerabilities on 20+ programming languages."},"product":{"name":"Nomad","slug":"nomad","algoliaConfig":{"indexName":"product_NOMAD","searchOnlyApiKey":"9bfec34ea54e56a11bd50d6bfedc5e71"},"analyticsConfig":{"includedDomains":"nomadproject.io www.nomadproject.io","segmentWriteKey":"qW11yxgipKMsKFKQUCpTVgQUYftYsJj0"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Nomad by HashiCorp","description":"Nomad is a highly available, distributed, data-center aware cluster and application scheduler designed to support the modern datacenter with support for long-running services, batch jobs, and much more.","image":"https://www.nomadproject.io/nomad-public/img/og-image.png","icon":[{"href":"/nomad-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.2.5","subnavItems":[{"text":"Overview","url":"/","type":"inbound"},{"text":"Enterprise","url":"https://www.hashicorp.com/products/nomad/","type":"outbound"},"divider",{"text":"Tutorials","url":"https://developer.hashicorp.com/nomad/tutorials","type":"outbound"},{"text":"Docs","url":"/docs","type":"inbound"},{"text":"API","url":"/api-docs","type":"inbound"},{"text":"Plugins","url":"/plugins","type":"inbound"},{"text":"Tools","url":"/tools","type":"inbound"},{"text":"Community","url":"/community","type":"inbound"}],"basePaths":["docs","api-docs","plugins","tools","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"entry-point","name":"Intro","path":"intro"},{"iconName":"api","name":"API","path":"api-docs"},{"iconName":"terminal-screen","name":"Tools","path":"tools"},{"iconName":"plug","name":"Plugins","path":"plugins"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Nomad Integrations."}},"integration":{"id":"a71265dd-783d-448c-8e8b-9182f0b67d28","slug":"sonarqube","name":"SonarQube","description":"SonarQube is an open-source platform developed by SonarSource for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs, code smells, and security vulnerabilities on 20+ programming languages.","license_type":null,"license_url":null,"external_only":false,"external_url":"https://www.sonarqube.org/","tier":"community","repo_url":"https://github.com/hashicorp/nomad-pack-community-registry","subdirectory":"/packs/sonarqube","created_at":"2023-05-17T17:28:10.874Z","updated_at":"2023-07-12T18:05:11.399Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"nomad","name":"Nomad","created_at":"2022-11-09T22:56:29.799Z","updated_at":"2022-11-09T22:56:29.799Z"},"versions":["0.0.1"],"components":[],"flags":[],"integration_type":{"id":"e8835871-6a6a-4836-8797-505cbfbe426a","product_id":"40557cca-56ca-4cb2-abc6-9bba2a9ca62d","slug":"pack","name":"Pack","plural_name":"Packs","description":"Packs are templated sets of resources that are meant to be deployed to Nomad together. Each pack defines parameters that can be customized by the end user.","created_at":"2023-05-02T17:31:29.062Z","updated_at":"2023-05-17T22:44:11.429Z"}},"activeRelease":{"id":"152772dc-a6f8-463e-a44d-5b593af40b0b","integration_id":"a71265dd-783d-448c-8e8b-9182f0b67d28","version":"0.0.1","readme":"This pack contains a service job that runs Sonarqube in Nomad. It currently supports being run by the [Docker](https://www.nomadproject.io/docs/drivers/docker) driver.\n\n## Requirements\n\nClients that expect to run this job require:\n- [Docker volumes](https://www.nomadproject.io/docs/drivers/docker \"Docker volumes\") to be enabled within their Docker plugin stanza, due to the usage of Nomad's host volume:\n```hcl\nplugin \"docker\" {\n  config {\n    volumes {\n      enabled = true\n    }\n  }\n}\n```\n\n- [Host volume](https://www.nomadproject.io/docs/configuration/client#host_volume-stanza \"Host volume\") to be enabled in the client configuration (the host volume directory - /opt/sonarqube/data - must be created in advance):\n```hcl\nclient {\n  host_volume \"sonarqube\" {\n    path      = \"/opt/sonarqube/data\"\n    read_only = false\n  }\n}\n```\n\n- If you're running on Linux, you must ensure that the user running SonarQube can open at least 131072 file descriptors and at least 8192 threads. You can set these values dynamically by running the following commands as root:\n```\nsysctl -w vm.max_map_count=524288\nsysctl -w fs.file-max=131072\nulimit -n 131072\nulimit -u 8192\n```\n\n## Variables\n\n- `job_name` (string) - The name to use as the job name which overrides using the pack name.\n- `region` (string) - The region where the job should be placed.\n- `datacenters` (list of strings) - A list of datacenters in the region which are eligible for task placement.\n- `namespace` (string) - The namespace where the job should be placed.\n- `constraints` (list of objects) - Constraints to apply to the entire job.\n- `image_name` (string) - The docker image name.\n- `image_tag` (string) - The docker image tag.\n- `task_resources` (object, number number) - Resources used by sonarqube task.\n- `register_consul_service` (bool) - If you want to register a consul service for the job.\n- `consul_service_name` (string) - The consul service name for the application.\n- `consul_service_tags` (list of strings) - The consul service name for the application.\n- `volume_name` (string) - The name of the volume you want Sonarqube to use.\n- `volume_type` (string) - The type of the volume you want Sonarqube to use.\n- `sonarqube_env_vars` (map of strings) - Environment variables to pass to Docker container.\n\n## Environment variables\n\nThe embedded H2 database is used by default. Additional environment variables can be passed to `sonarqube_env_vars`.\n\n```\nsonarqube_env_vars = [\n  {\n    key = \"SONAR_JDBC_URL\"\n    value = \"database connection URL\"\n  },\n  {\n    key = \"SONAR_JDBC_USERNAME\"\n    value = \"sonar\"\n  },\n  {\n    key = \"SONAR_JDBC_PASSWORD\"\n    value = \"sonar\"\n  }\n]\n```","created_at":"2023-05-17T22:19:10.711Z","updated_at":"2023-05-17T22:19:10.711Z","components":[]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Nomad","url":"/nomad"},{"title":"Integrations","url":"/nomad/integrations"},{"title":"SonarQube","url":"/nomad/integrations/hashicorp/sonarqube","isCurrentPage":true}],"anchorLinks":[{"id":"requirements","level":2,"title":"Requirements"},{"id":"variables","level":2,"title":"Variables"},{"id":"environment-variables","level":2,"title":"Environment variables"}],"serializedREADME":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var r=(a,n,t)=>n in a?m(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))i.call(n,t)&&r(a,t,n[t]);if(s)for(var t of s(n))l.call(n,t)&&r(a,t,n[t]);return a},p=(a,n)=>u(a,d(n));var c=(a,n)=>{var t={};for(var o in a)i.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&s)for(var o of s(a))n.indexOf(o)<0&&l.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=c(o,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This pack contains a service job that runs Sonarqube in Nomad. It currently supports being run by the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.nomadproject.io/docs/drivers/docker\"}),\"Docker\"),\" driver.\"),mdx(\"h2\",e({},{id:\"user-content-requirements\",\"data-text-content\":\"Requirements\",className:\"g-type-display-3\"}),\"Requirements\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Clients that expect to run this job require:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.nomadproject.io/docs/drivers/docker\",title:\"Docker volumes\"}),\"Docker volumes\"),\" to be enabled within their Docker plugin stanza, due to the usage of Nomad's host volume:\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"plugin \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"docker\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"config\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"volumes\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"enabled\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.nomadproject.io/docs/configuration/client#host_volume-stanza\",title:\"Host volume\"}),\"Host volume\"),\" to be enabled in the client configuration (the host volume directory - /opt/sonarqube/data - must be created in advance):\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"client\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  host_volume \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"sonarqube\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"path\"),\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"/opt/sonarqube/data\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"read_only\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"false\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"If you're running on Linux, you must ensure that the user running SonarQube can open at least 131072 file descriptors and at least 8192 threads. You can set these values dynamically by running the following commands as root:\")),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"sysctl -w vm.max_map_count=524288\",`\n`,\"sysctl -w fs.file-max=131072\",`\n`,\"ulimit -n 131072\",`\n`,\"ulimit -u 8192\",`\n`)),mdx(\"h2\",e({},{id:\"user-content-variables\",\"data-text-content\":\"Variables\",className:\"g-type-display-3\"}),\"Variables\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"job_name\"),\" (string) - The name to use as the job name which overrides using the pack name.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"region\"),\" (string) - The region where the job should be placed.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"datacenters\"),\" (list of strings) - A list of datacenters in the region which are eligible for task placement.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"namespace\"),\" (string) - The namespace where the job should be placed.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"constraints\"),\" (list of objects) - Constraints to apply to the entire job.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image_name\"),\" (string) - The docker image name.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"image_tag\"),\" (string) - The docker image tag.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"task_resources\"),\" (object, number number) - Resources used by sonarqube task.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"register_consul_service\"),\" (bool) - If you want to register a consul service for the job.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"consul_service_name\"),\" (string) - The consul service name for the application.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"consul_service_tags\"),\" (list of strings) - The consul service name for the application.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"volume_name\"),\" (string) - The name of the volume you want Sonarqube to use.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"volume_type\"),\" (string) - The type of the volume you want Sonarqube to use.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"sonarqube_env_vars\"),\" (map of strings) - Environment variables to pass to Docker container.\")),mdx(\"h2\",e({},{id:\"user-content-environment-variables\",\"data-text-content\":\"Environment variables\",className:\"g-type-display-3\"}),\"Environment variables\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The embedded H2 database is used by default. Additional environment variables can be passed to \",mdx(\"inlineCode\",{parentName:\"p\"},\"sonarqube_env_vars\"),\".\"),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"sonarqube_env_vars = [\",`\n`,\"  {\",`\n`,'    key = \"SONAR_JDBC_URL\"',`\n`,'    value = \"database connection URL\"',`\n`,\"  },\",`\n`,\"  {\",`\n`,'    key = \"SONAR_JDBC_USERNAME\"',`\n`,'    value = \"sonar\"',`\n`,\"  },\",`\n`,\"  {\",`\n`,'    key = \"SONAR_JDBC_PASSWORD\"',`\n`,'    value = \"sonar\"',`\n`,\"  }\",`\n`,\"]\",`\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}