{"pageProps":{"metadata":{"title":"HyperOne Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"a22ad273-74d5-4351-aa16-f0006cf703ff","slug":"hyperone","name":"HyperOne","description":"The HyperOne plugin can be used with HashiCorp Packer to create custom images on HyperOne.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/hashicorp/packer-plugin-hyperone","subdirectory":"/.web-docs","created_at":"2023-06-15T19:02:50.652Z","updated_at":"2023-08-08T17:01:08.709Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.0.1"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[{"id":"f4e58404-7575-4876-bdb6-407697b6e335","slug":"archived","name":"Archived","description":"This integration is no longer maintained","created_at":"2022-11-09T22:56:30.570Z","updated_at":"2022-11-09T22:56:30.570Z"}],"integration_type":null},"activeRelease":{"id":"670157e8-d59c-4779-b9af-7ca888ff684d","integration_id":"a22ad273-74d5-4351-aa16-f0006cf703ff","version":"1.0.1","readme":"The HyperOne Plugin is able to create new images on the HyperOne platform.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    hyperone = {\n      source  = \"github.com/hashicorp/hyperone\"\n      version = \"~> 1\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/hyperone\n```\n\n### Components\n\n#### Builders\n\n- [hyperone](/packer/integrations/hashicorp/hyperone/latest/components/builder/hyperone) - The hyperone builder takes a source image, runs any\nprovisioning necessary on the image after launching it, then creates a reusable image.\n\n### Authentication\n\nHyperOne supports several authentication methods, which are all supported by\nthis builder.\n\n#### User session\n\nIf using user session, set the `token` field to your authentication token.\nThe `project` field is required when using this method.\n\n```json\n{\n  \"token\": \"YOUR TOKEN\",\n  \"project\": \"YOUR_PROJECT\"\n}\n```\n\n#### User session by SSH key\n\nIf you've added an SSH key as a credential to your user account and the\nprivate key is added to the ssh-agent on your local machine, you can\nauthenticate by setting just the platform login (your e-mail address):\n\n```json\n{\n  \"token_login\": \"your.user@example.com\"\n}\n```\n\n#### h1 CLI\n\nIf you're using [h1-cli](https://github.com/hyperonecom/h1-cli) on your local\nmachine, HyperOne builder can use your credentials saved in a config file.\n\nAll you have to do is login within the tool:\n\n```shell-session\n$ h1 login --username your.user@example.com\n```\n\nYou don't have to set `token` or `project` fields at all using this method.\n\n#### Service account\n\nUsing `h1`, you can create a new token associated with chosen project.\n\n```shell-session\n$ h1 project token add --name packer-builder --project PROJECT_ID\n```\n\nSet the `token` field to the generated token or save it in the `HYPERONE_TOKEN`\nenvironment variable. You don't have to set the `project` option using this\nmethod.\n\n```json\n{\n  \"token\": \"YOUR TOKEN\"\n}\n```\n","created_at":"2023-06-15T20:34:51.176Z","updated_at":"2023-08-30T22:36:33.316Z","components":[{"id":"7851f36d-f2e0-446e-a593-66a2465d37b2","integration_release_id":"670157e8-d59c-4779-b9af-7ca888ff684d","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `hyperone`\nArtifact BuilderId: `hyperone.builder`\n\nThe `hyperone` Packer builder is able to create new images on the [HyperOne\nplatform](http://www.hyperone.com/). The builder takes a source image, runs\nany provisioning necessary on the image after launching it, then creates a\nreusable image.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n- `disk_size` (float) - Size of the created disk, in GiB.\n\n- `project` (string) - The id or name of the project. This field is required\n  only if using session tokens. It should be skipped when using service\n  account authentication.\n\n- `source_image` (string) - ID or name of the image to launch server from.\n\n- `token` (string) - The authentication token used to access your account.\n  This can be either a session token or a service account token.\n  If not defined, the builder will attempt to find it in the following order:\n\n  - In `HYPERONE_TOKEN` environment variable.\n  - In `~/.h1-cli/conf.json` config file used by [h1-cli](https://github.com/hyperonecom/h1-cli).\n  - By using SSH authentication if `token_login` variable has been set.\n\n- `vm_type` (string) - ID or name of the type this server should be created with.\n\n### Optional:\n\n- `api_url` (string) - Custom API endpoint URL, compatible with HyperOne.\n  It can also be specified via environment variable `HYPERONE_API_URL`.\n\n- `disk_name` (string) - The name of the created disk.\n\n- `disk_type` (string) - The type of the created disk. Defaults to `ssd`.\n\n- `image_description` (string) - The description of the resulting image.\n\n- `image_name` (string) - The name of the resulting image. Defaults to\n  `packer-{{timestamp}}`\n  (see [configuration templates](/packer/docs/templates/legacy_json_templates/engine) for more info).\n\n- `image_service` (string) - The service of the resulting image.\n\n- `image_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created image.\n\n- `network` (string) - The ID of the network to attach to the created server.\n\n- `private_ip` (string) - The ID of the private IP within chosen `network`\n  that should be assigned to the created server.\n\n- `public_ip` (string) - The ID of the public IP that should be assigned to\n  the created server. If `network` is chosen, the public IP will be associated\n  with server's private IP.\n\n- `public_netadp_service` (string) - Custom service of public network adapter.\n  Can be useful when using custom `api_url`. Defaults to `public`.\n\n- `ssh_keys` (array of strings) - List of SSH keys by name or id to be added\n  to the server on launch.\n\n- `state_timeout` (string) - Timeout for waiting on the API to complete\n  a request. Defaults to 5m.\n\n- `token_login` (string) - Login (an e-mail) on HyperOne platform. Set this\n  if you want to fetch the token by SSH authentication.\n\n- `user_data` (string) - User data to launch with the server. Packer will not\n  automatically wait for a user script to finish before shutting down the\n  instance, this must be handled in a provisioner.\n\n- `vm_name` (string) - The name of the created server.\n\n- `vm_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created server.\n\n## Chroot disk\n\n### Required:\n\n- `chroot_disk` (bool) - Set to `true` to enable chroot disk build.\n\n- `pre_mount_commands` (array of strings) - A series of commands to execute\n  before mounting the chroot. This should include any partitioning and\n  filesystem creation commands. The path to the device is provided by\n  `{{.Device}}`.\n\n### Optional:\n\n- `chroot_command_wrapper` (string) - How to run shell commands. This defaults\n  to `{{.Command}}`. This may be useful to set if you want to set\n  environment variables or run commands with `sudo`.\n\n- `chroot_copy_files` (array of strings) - Paths to files on the running VM\n  that will be copied into the chroot environment before provisioning.\n  Defaults to `/etc/resolv.conf` so that DNS lookups work.\n\n- `chroot_device` (string) - The path of chroot device. Defaults an attempt is\n  made to identify it based on the attach location.\n\n- `chroot_disk_size` (float) - The size of the chroot disk in GiB. Defaults\n  to `disk_size`.\n\n- `chroot_disk_type` (string) - The type of the chroot disk. Defaults to\n  `disk_type`.\n\n- `chroot_mount_path` (string) - The path on which the device will be mounted.\n\n- `chroot_mounts` (array of strings) - A list of devices to mount into the\n  chroot environment. This is a list of 3-element tuples, in order:\n\n  - The filesystem type. If this is \"bind\", then Packer will properly bind the\n    filesystem to another mount point.\n\n  - The source device.\n\n  - The mount directory.\n\n- `mount_options` (array of tuples) - Options to supply the `mount` command\n  when mounting devices. Each option will be prefixed with `-o` and supplied\n  to the `mount` command.\n\n- `mount_partition` (string) - The partition number containing the / partition.\n  By default this is the first partition of the volume (for example, sdb1).\n\n- `post_mount_commands` (array of strings) - As `pre_mount_commands`, but the\n  commands are executed after mounting the root device and before the extra\n  mount and copy steps. The device and mount path are provided by\n  `{{.Device}}` and `{{.MountPath}}`.\n\n## Basic Example\n\nHere is a basic example. It is completely valid as soon as you enter your own\ntoken.\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10\n}\n```\n\n## Chroot Example\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10,\n  \"chroot_disk\": true,\n  \"pre_mount_commands\": [\n    \"apt-get update\",\n    \"apt-get install debootstrap\",\n    \"debootstrap --arch amd64 bionic {{.MountPath}}\"\n  ]\n}\n```\n\n## HCL Example\n\n```hcl\nvariable \"token\" {\n  type = string\n}\n\nvariable \"project\" {\n  type = string\n}\n\nsource \"hyperone\" \"new-syntax\" {\n  token = var.token\n  project = var.project\n  source_image = \"debian\"\n  disk_size = 10\n  vm_type = \"a1.nano\"\n  image_name = \"packerbats-hcl-{{timestamp}}\"\n  image_tags = {\n      key=\"value\"\n  }\n}\n\nbuild {\n  sources = [\n    \"source.hyperone.new-syntax\"\n  ]\n\n  provisioner \"shell\" {\n    inline = [\n      \"apt-get update\",\n      \"apt-get upgrade -y\"\n    ]\n  }\n}\n```\n","created_at":"2023-06-15T20:34:51.996Z","updated_at":"2023-07-27T14:54:39.443Z","name":"HyperOne","slug":"hyperone","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]}]},"component":{"id":"7851f36d-f2e0-446e-a593-66a2465d37b2","integration_release_id":"670157e8-d59c-4779-b9af-7ca888ff684d","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `hyperone`\nArtifact BuilderId: `hyperone.builder`\n\nThe `hyperone` Packer builder is able to create new images on the [HyperOne\nplatform](http://www.hyperone.com/). The builder takes a source image, runs\nany provisioning necessary on the image after launching it, then creates a\nreusable image.\n\nThe builder does _not_ manage images. Once it creates an image, it is up to you\nto use it or delete it.\n\n## Configuration Reference\n\nThere are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\nIn addition to the options listed here, a\n[communicator](/packer/docs/templates/legacy_json_templates/communicator) can be configured for this\nbuilder.\n\n### Required:\n\n- `disk_size` (float) - Size of the created disk, in GiB.\n\n- `project` (string) - The id or name of the project. This field is required\n  only if using session tokens. It should be skipped when using service\n  account authentication.\n\n- `source_image` (string) - ID or name of the image to launch server from.\n\n- `token` (string) - The authentication token used to access your account.\n  This can be either a session token or a service account token.\n  If not defined, the builder will attempt to find it in the following order:\n\n  - In `HYPERONE_TOKEN` environment variable.\n  - In `~/.h1-cli/conf.json` config file used by [h1-cli](https://github.com/hyperonecom/h1-cli).\n  - By using SSH authentication if `token_login` variable has been set.\n\n- `vm_type` (string) - ID or name of the type this server should be created with.\n\n### Optional:\n\n- `api_url` (string) - Custom API endpoint URL, compatible with HyperOne.\n  It can also be specified via environment variable `HYPERONE_API_URL`.\n\n- `disk_name` (string) - The name of the created disk.\n\n- `disk_type` (string) - The type of the created disk. Defaults to `ssd`.\n\n- `image_description` (string) - The description of the resulting image.\n\n- `image_name` (string) - The name of the resulting image. Defaults to\n  `packer-{{timestamp}}`\n  (see [configuration templates](/packer/docs/templates/legacy_json_templates/engine) for more info).\n\n- `image_service` (string) - The service of the resulting image.\n\n- `image_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created image.\n\n- `network` (string) - The ID of the network to attach to the created server.\n\n- `private_ip` (string) - The ID of the private IP within chosen `network`\n  that should be assigned to the created server.\n\n- `public_ip` (string) - The ID of the public IP that should be assigned to\n  the created server. If `network` is chosen, the public IP will be associated\n  with server's private IP.\n\n- `public_netadp_service` (string) - Custom service of public network adapter.\n  Can be useful when using custom `api_url`. Defaults to `public`.\n\n- `ssh_keys` (array of strings) - List of SSH keys by name or id to be added\n  to the server on launch.\n\n- `state_timeout` (string) - Timeout for waiting on the API to complete\n  a request. Defaults to 5m.\n\n- `token_login` (string) - Login (an e-mail) on HyperOne platform. Set this\n  if you want to fetch the token by SSH authentication.\n\n- `user_data` (string) - User data to launch with the server. Packer will not\n  automatically wait for a user script to finish before shutting down the\n  instance, this must be handled in a provisioner.\n\n- `vm_name` (string) - The name of the created server.\n\n- `vm_tags` (map of key/value strings) - Key/value pair tags to\n  add to the created server.\n\n## Chroot disk\n\n### Required:\n\n- `chroot_disk` (bool) - Set to `true` to enable chroot disk build.\n\n- `pre_mount_commands` (array of strings) - A series of commands to execute\n  before mounting the chroot. This should include any partitioning and\n  filesystem creation commands. The path to the device is provided by\n  `{{.Device}}`.\n\n### Optional:\n\n- `chroot_command_wrapper` (string) - How to run shell commands. This defaults\n  to `{{.Command}}`. This may be useful to set if you want to set\n  environment variables or run commands with `sudo`.\n\n- `chroot_copy_files` (array of strings) - Paths to files on the running VM\n  that will be copied into the chroot environment before provisioning.\n  Defaults to `/etc/resolv.conf` so that DNS lookups work.\n\n- `chroot_device` (string) - The path of chroot device. Defaults an attempt is\n  made to identify it based on the attach location.\n\n- `chroot_disk_size` (float) - The size of the chroot disk in GiB. Defaults\n  to `disk_size`.\n\n- `chroot_disk_type` (string) - The type of the chroot disk. Defaults to\n  `disk_type`.\n\n- `chroot_mount_path` (string) - The path on which the device will be mounted.\n\n- `chroot_mounts` (array of strings) - A list of devices to mount into the\n  chroot environment. This is a list of 3-element tuples, in order:\n\n  - The filesystem type. If this is \"bind\", then Packer will properly bind the\n    filesystem to another mount point.\n\n  - The source device.\n\n  - The mount directory.\n\n- `mount_options` (array of tuples) - Options to supply the `mount` command\n  when mounting devices. Each option will be prefixed with `-o` and supplied\n  to the `mount` command.\n\n- `mount_partition` (string) - The partition number containing the / partition.\n  By default this is the first partition of the volume (for example, sdb1).\n\n- `post_mount_commands` (array of strings) - As `pre_mount_commands`, but the\n  commands are executed after mounting the root device and before the extra\n  mount and copy steps. The device and mount path are provided by\n  `{{.Device}}` and `{{.MountPath}}`.\n\n## Basic Example\n\nHere is a basic example. It is completely valid as soon as you enter your own\ntoken.\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10\n}\n```\n\n## Chroot Example\n\n```json\n{\n  \"type\": \"hyperone\",\n  \"token\": \"YOUR_AUTH_TOKEN\",\n  \"source_image\": \"ubuntu-18.04\",\n  \"vm_type\": \"a1.nano\",\n  \"disk_size\": 10,\n  \"chroot_disk\": true,\n  \"pre_mount_commands\": [\n    \"apt-get update\",\n    \"apt-get install debootstrap\",\n    \"debootstrap --arch amd64 bionic {{.MountPath}}\"\n  ]\n}\n```\n\n## HCL Example\n\n```hcl\nvariable \"token\" {\n  type = string\n}\n\nvariable \"project\" {\n  type = string\n}\n\nsource \"hyperone\" \"new-syntax\" {\n  token = var.token\n  project = var.project\n  source_image = \"debian\"\n  disk_size = 10\n  vm_type = \"a1.nano\"\n  image_name = \"packerbats-hcl-{{timestamp}}\"\n  image_tags = {\n      key=\"value\"\n  }\n}\n\nbuild {\n  sources = [\n    \"source.hyperone.new-syntax\"\n  ]\n\n  provisioner \"shell\" {\n    inline = [\n      \"apt-get update\",\n      \"apt-get upgrade -y\"\n    ]\n  }\n}\n```\n","created_at":"2023-06-15T20:34:51.996Z","updated_at":"2023-07-27T14:54:39.443Z","name":"HyperOne","slug":"hyperone","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"configuration-reference","level":2,"title":"Configuration Reference"},{"id":"required:","level":3,"title":"Required:"},{"id":"optional:","level":3,"title":"Optional:"},{"id":"chroot-disk","level":2,"title":"Chroot disk"},{"id":"required:","level":3,"title":"Required:"},{"id":"optional:","level":3,"title":"Optional:"},{"id":"basic-example","level":2,"title":"Basic Example"},{"id":"chroot-example","level":2,"title":"Chroot Example"},{"id":"hcl-example","level":2,"title":"HCL Example"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var l=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))s.call(n,t)&&l(a,t,n[t]);if(o)for(var t of o(n))i.call(n,t)&&l(a,t,n[t]);return a},r=(a,n)=>d(a,N(n));var m=(a,n)=>{var t={};for(var p in a)s.call(a,p)&&n.indexOf(p)<0&&(t[p]=a[p]);if(a!=null&&o)for(var p of o(a))n.indexOf(p)<0&&i.call(a,p)&&(t[p]=a[p]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var p=t,{components:a}=p,n=m(p,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"hyperone\"),`\nArtifact BuilderId: `,mdx(\"inlineCode\",{parentName:\"p\"},\"hyperone.builder\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"hyperone\"),\" Packer builder is able to create new images on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"http://www.hyperone.com/\"}),`HyperOne\nplatform`),`. The builder takes a source image, runs\nany provisioning necessary on the image after launching it, then creates a\nreusable image.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The builder does \",mdx(\"em\",{parentName:\"p\"},\"not\"),` manage images. Once it creates an image, it is up to you\nto use it or delete it.`),mdx(\"h2\",e({},{id:\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",className:\"g-type-display-3\"}),\"Configuration Reference\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`There are many configuration options available for the builder. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`In addition to the options listed here, a\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/communicator\"}),\"communicator\"),` can be configured for this\nbuilder.`),mdx(\"h3\",e({},{id:\"user-content-required:\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disk_size\"),\" (float) - Size of the created disk, in GiB.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"project\"),` (string) - The id or name of the project. This field is required\nonly if using session tokens. It should be skipped when using service\naccount authentication.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_image\"),\" (string) - ID or name of the image to launch server from.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"token\"),` (string) - The authentication token used to access your account.\nThis can be either a session token or a service account token.\nIf not defined, the builder will attempt to find it in the following order:`),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"In \",mdx(\"inlineCode\",{parentName:\"li\"},\"HYPERONE_TOKEN\"),\" environment variable.\"),mdx(\"li\",{parentName:\"ul\"},\"In \",mdx(\"inlineCode\",{parentName:\"li\"},\"~/.h1-cli/conf.json\"),\" config file used by \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/hyperonecom/h1-cli\"}),\"h1-cli\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"By using SSH authentication if \",mdx(\"inlineCode\",{parentName:\"li\"},\"token_login\"),\" variable has been set.\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vm_type\"),\" (string) - ID or name of the type this server should be created with.\"))),mdx(\"h3\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"api_url\"),` (string) - Custom API endpoint URL, compatible with HyperOne.\nIt can also be specified via environment variable `,mdx(\"inlineCode\",{parentName:\"p\"},\"HYPERONE_API_URL\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disk_name\"),\" (string) - The name of the created disk.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"disk_type\"),\" (string) - The type of the created disk. Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssd\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_description\"),\" (string) - The description of the resulting image.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_name\"),` (string) - The name of the resulting image. Defaults to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"packer-{{timestamp}}\"),`\n(see `,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/templates/legacy_json_templates/engine\"}),\"configuration templates\"),\" for more info).\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_service\"),\" (string) - The service of the resulting image.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"image_tags\"),` (map of key/value strings) - Key/value pair tags to\nadd to the created image.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"network\"),\" (string) - The ID of the network to attach to the created server.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"private_ip\"),\" (string) - The ID of the private IP within chosen \",mdx(\"inlineCode\",{parentName:\"p\"},\"network\"),`\nthat should be assigned to the created server.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"public_ip\"),` (string) - The ID of the public IP that should be assigned to\nthe created server. If `,mdx(\"inlineCode\",{parentName:\"p\"},\"network\"),` is chosen, the public IP will be associated\nwith server's private IP.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"public_netadp_service\"),` (string) - Custom service of public network adapter.\nCan be useful when using custom `,mdx(\"inlineCode\",{parentName:\"p\"},\"api_url\"),\". Defaults to \",mdx(\"inlineCode\",{parentName:\"p\"},\"public\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_keys\"),` (array of strings) - List of SSH keys by name or id to be added\nto the server on launch.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"state_timeout\"),` (string) - Timeout for waiting on the API to complete\na request. Defaults to 5m.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"token_login\"),` (string) - Login (an e-mail) on HyperOne platform. Set this\nif you want to fetch the token by SSH authentication.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"user_data\"),` (string) - User data to launch with the server. Packer will not\nautomatically wait for a user script to finish before shutting down the\ninstance, this must be handled in a provisioner.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vm_name\"),\" (string) - The name of the created server.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vm_tags\"),` (map of key/value strings) - Key/value pair tags to\nadd to the created server.`))),mdx(\"h2\",e({},{id:\"user-content-chroot-disk\",\"data-text-content\":\"Chroot disk\",className:\"g-type-display-3\"}),\"Chroot disk\"),mdx(\"h3\",e({},{id:\"user-content-required:\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_disk\"),\" (bool) - Set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\" to enable chroot disk build.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"pre_mount_commands\"),` (array of strings) - A series of commands to execute\nbefore mounting the chroot. This should include any partitioning and\nfilesystem creation commands. The path to the device is provided by\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"{{.Device}}\"),\".\"))),mdx(\"h3\",e({},{id:\"user-content-optional:\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_command_wrapper\"),` (string) - How to run shell commands. This defaults\nto `,mdx(\"inlineCode\",{parentName:\"p\"},\"{{.Command}}\"),`. This may be useful to set if you want to set\nenvironment variables or run commands with `,mdx(\"inlineCode\",{parentName:\"p\"},\"sudo\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_copy_files\"),` (array of strings) - Paths to files on the running VM\nthat will be copied into the chroot environment before provisioning.\nDefaults to `,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/resolv.conf\"),\" so that DNS lookups work.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_device\"),` (string) - The path of chroot device. Defaults an attempt is\nmade to identify it based on the attach location.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_disk_size\"),` (float) - The size of the chroot disk in GiB. Defaults\nto `,mdx(\"inlineCode\",{parentName:\"p\"},\"disk_size\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_disk_type\"),` (string) - The type of the chroot disk. Defaults to\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"disk_type\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_mount_path\"),\" (string) - The path on which the device will be mounted.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"chroot_mounts\"),` (array of strings) - A list of devices to mount into the\nchroot environment. This is a list of 3-element tuples, in order:`),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),`The filesystem type. If this is \"bind\", then Packer will properly bind the\nfilesystem to another mount point.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"The source device.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"The mount directory.\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"mount_options\"),\" (array of tuples) - Options to supply the \",mdx(\"inlineCode\",{parentName:\"p\"},\"mount\"),` command\nwhen mounting devices. Each option will be prefixed with `,mdx(\"inlineCode\",{parentName:\"p\"},\"-o\"),` and supplied\nto the `,mdx(\"inlineCode\",{parentName:\"p\"},\"mount\"),\" command.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"mount_partition\"),` (string) - The partition number containing the / partition.\nBy default this is the first partition of the volume (for example, sdb1).`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"post_mount_commands\"),\" (array of strings) - As \",mdx(\"inlineCode\",{parentName:\"p\"},\"pre_mount_commands\"),`, but the\ncommands are executed after mounting the root device and before the extra\nmount and copy steps. The device and mount path are provided by\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"{{.Device}}\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"{{.MountPath}}\"),\".\"))),mdx(\"h2\",e({},{id:\"user-content-basic-example\",\"data-text-content\":\"Basic Example\",className:\"g-type-display-3\"}),\"Basic Example\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Here is a basic example. It is completely valid as soon as you enter your own\ntoken.`),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hyperone\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"token\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"YOUR_AUTH_TOKEN\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_image\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ubuntu-18.04\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"vm_type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"a1.nano\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"disk_size\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h2\",e({},{id:\"user-content-chroot-example\",\"data-text-content\":\"Chroot Example\",className:\"g-type-display-3\"}),\"Chroot Example\"),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hyperone\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"token\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"YOUR_AUTH_TOKEN\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_image\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ubuntu-18.04\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"vm_type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"a1.nano\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"disk_size\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"10\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"chroot_disk\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"pre_mount_commands\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"apt-get update\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"apt-get install debootstrap\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debootstrap --arch amd64 bionic {{.MountPath}}\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h2\",e({},{id:\"user-content-hcl-example\",\"data-text-content\":\"HCL Example\",className:\"g-type-display-3\"}),\"HCL Example\"),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"variable\",mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),' \"token\" ')),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"type\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" string\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"variable\",mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),' \"project\" ')),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"type\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" string\",`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hyperone\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"new-syntax\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"token\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" var.token\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"project\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" var.project\",`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_image\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"debian\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"disk_size\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"10\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vm_type\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"a1.nano\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"image_name\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"packerbats-hcl-{{timestamp}}\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"image_tags\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"key\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"value\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"source.hyperone.new-syntax\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"provisioner\",mdx(\"span\",e({parentName:\"span\"},{className:\"token type variable\"}),' \"shell\" ')),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"inline\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"apt-get update\"'),\",\",`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"apt-get upgrade -y\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"HyperOne","url":"/packer/integrations/hashicorp/hyperone","isCurrentPage":false},{"title":"v1.0.1","url":"/packer/integrations/hashicorp/hyperone/v1.0.1","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"HyperOne","url":"/packer/integrations/hashicorp/hyperone/latest/components/builder/hyperone","isCurrentPage":true}]},"__N_SSG":true}