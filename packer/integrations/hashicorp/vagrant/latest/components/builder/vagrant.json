{"pageProps":{"metadata":{"title":"Vagrant Builder | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"796250a4-5415-4de6-92a2-730c464c1ce6","slug":"vagrant","name":"Vagrant","description":"The Vagrant multi-component plugin can be used with HashiCorp Packer to create custom images.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"official","repo_url":"https://github.com/hashicorp/packer-plugin-vagrant","subdirectory":"/.web-docs","created_at":"2023-04-25T20:05:46.882Z","updated_at":"2023-08-08T17:01:19.674Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.1.2","1.1.1","1.1.0","1.0.3","1.0.0"],"components":[{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"},{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[],"integration_type":null},"activeRelease":{"id":"3f95914e-81b4-4a49-836b-edbefa3f88cc","integration_id":"796250a4-5415-4de6-92a2-730c464c1ce6","version":"1.1.2","readme":"\nThe Vagrant plugin integrates Packer with HashiCorp [Vagrant](https://www.vagrantup.com/), allowing you to use Packer to create development boxes.\n\n### Installation\nTo install this plugin add this code into your Packer configuration and run [packer init](/packer/docs/commands/init)\n\n```hcl\npacker {\n  required_plugins {\n    vagrant = {\n      version = \"~> 1\"\n      source = \"github.com/hashicorp/vagrant\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/vagrant\n```\n\n### Components\n\n#### Builders\n- [vagrant](/packer/integrations/hashicorp/vagrant/latest/components/builder/vagrant) - The Vagrant builder is intended for building new boxes from already-existing boxes.\n\n#### Post-Processor\n- [vagrant](/packer/integrations/hashicorp/vagrant/latest/components/post-processor/vagrant) - The Packer Vagrant post-processor takes a build and converts the artifact into a valid Vagrant box.\n- [vagrant-cloud](/packer/integrations/hashicorp/vagrant/latest/components/post-processor/vagrant-cloud) - The Vagrant Cloud post-processor enables the upload of Vagrant boxes to Vagrant Cloud.\n","created_at":"2024-01-17T19:09:55.413Z","updated_at":"2024-01-17T19:09:55.413Z","components":[{"id":"63472383-5372-4590-8820-49f4993750c7","integration_release_id":"3f95914e-81b4-4a49-836b-edbefa3f88cc","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vagrant`\nArtifact BuilderId: `vagrant`\n\nThe Vagrant builder is intended for building new boxes from already-existing\nboxes. Your source should be a URL or path to a .box file or a Vagrant Cloud\nbox name such as `hashicorp/precise64`.\n\nPacker will not install vagrant, nor will it install the underlying\nvirtualization platforms or extra providers; We expect when you run this\nbuilder that you have already installed what you need.\n\nBy default, this builder will initialize a new Vagrant workspace, launch your\nbox from that workspace, provision it, call `vagrant package` to package it\ninto a new box, and then destroy the original box. Please note that vagrant\nwill _not_ remove the box file from your system (we don't call\n`vagrant box remove`).\n\nYou can change the behavior so that the builder doesn't destroy the box by\nsetting the `teardown_method` option. You can change the behavior so the builder\ndoesn't package it (not all provisioners support the `vagrant package` command)\nby setting the `skip package` option. You can also change the behavior so that\nrather than initializing a new Vagrant workspace, you use an already defined\none, by using `global_id` instead of `source_box`.\n\nPlease note that if you are using the Vagrant builder, then the Vagrant\npost-processor is unnecessary because the output of the Vagrant builder is\nalready a Vagrant box; using that post-processor with the Vagrant builder will\ncause your build to fail. Similarly, since Vagrant boxes are already compressed,\nthe Compress post-processor will not work with this builder.\n\n## Configuration Reference\n\n### Required\n\n- `source_path` (string) - URL of the vagrant box to use, or the name of the\n  vagrant box. `hashicorp/precise64`, `./mylocalbox.box` and\n  `https://example.com/my-box.box` are all valid source boxes. If your\n  source is a .box file, whether locally or from a URL like the latter example\n  above, you will also need to provide a `box_name`. This option is required,\n  unless you set `global_id`. You may only set one or the other, not both.\n\n  or\n\n- `global_id` (string) - the global id of a Vagrant box already added to Vagrant\n  on your system. You can find the global id of your Vagrant boxes using the\n  command `vagrant global-status`; your global_id will be a 7-digit number and\n  letter combination that you'll find in the leftmost column of the\n  global-status output. If you choose to use `global_id` instead of\n  `source_box`, Packer will skip the Vagrant initialize and add steps, and\n  simply launch the box directly using the global id.\n\n### Optional\n\n<!-- Code generated from the comments of the Config struct in builder/vagrant/builder.go; DO NOT EDIT MANUALLY -->\n\n- `output_dir` (string) - The directory to create that will contain your output box. We always\n  create this directory and run from inside of it to prevent Vagrant init\n  collisions. If unset, it will be set to packer- plus your buildname.\n\n- `checksum` (string) - The checksum for the .box file. The type of the checksum is specified\n  within the checksum field as a prefix, ex: \"md5:{$checksum}\". The type\n  of the checksum can also be omitted and Packer will try to infer it\n  based on string length. Valid values are \"none\", \"{$checksum}\",\n  \"md5:{$checksum}\", \"sha1:{$checksum}\", \"sha256:{$checksum}\",\n  \"sha512:{$checksum}\" or \"file:{$path}\". Here is a list of valid checksum\n  values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `box_name` (string) - if your source_box is a boxfile that we need to add to Vagrant, this is\n  the name to give it. If left blank, will default to \"packer_\" plus your\n  buildname.\n\n- `insert_key` (bool) - If true, Vagrant will automatically insert a keypair to use for SSH,\n  replacing Vagrant's default insecure key inside the machine if detected.\n  By default, Packer sets this to false.\n\n- `provider` (string) - The vagrant provider.\n  This parameter is required when source_path have more than one provider,\n  or when using vagrant-cloud post-processor. Defaults to unset.\n\n- `vagrantfile_template` (string) - What vagrantfile to use\n\n- `teardown_method` (string) - Whether to halt, suspend, or destroy the box when the build has\n  completed. Defaults to \"halt\"\n\n- `box_version` (string) - What box version to use when initializing Vagrant.\n\n- `template` (string) - a path to a golang template for a vagrantfile. Our default template can\n  be found [here](https://github.com/hashicorp/packer-plugin-vagrant/blob/main/builder/vagrant/step_create_vagrantfile.go#L39-L54). The template variables available to you are\n  `{{ .BoxName }}`, `{{ .SyncedFolder }}`, and `{{.InsertKey}}`, which\n  correspond to the Packer options box_name, synced_folder, and insert_key.\n  Alternatively, the template variable `{{.DefaultTemplate}}` is available for\n  use if you wish to extend the default generated template.\n\n- `synced_folder` (string) - Path to the folder to be synced to the guest. The path can be absolute\n  or relative to the directory Packer is being run from.\n\n- `skip_add` (bool) - Don't call \"vagrant add\" to add the box to your local environment; this\n  is necessary if you want to launch a box that is already added to your\n  vagrant environment.\n\n- `add_cacert` (string) - Equivalent to setting the\n  --cacert\n  option in vagrant add; defaults to unset.\n\n- `add_capath` (string) - Equivalent to setting the\n  --capath option\n  in vagrant add; defaults to unset.\n\n- `add_cert` (string) - Equivalent to setting the\n  --cert option in\n  vagrant add; defaults to unset.\n\n- `add_clean` (bool) - Equivalent to setting the\n  --clean flag in\n  vagrant add; defaults to unset.\n\n- `add_force` (bool) - Equivalent to setting the\n  --force flag in\n  vagrant add; defaults to unset.\n\n- `add_insecure` (bool) - Equivalent to setting the\n  --insecure flag in\n  vagrant add; defaults to unset.\n\n- `skip_package` (bool) - if true, Packer will not call vagrant package to\n  package your base box into its own standalone .box file.\n\n- `output_vagrantfile` (string) - Output Vagrantfile\n\n- `package_include` ([]string) - Equivalent to setting the\n  [`--include`](https://developer.hashicorp.com/vagrant/docs/cli/package#include-x-y-z) option\n  in `vagrant package`; defaults to unset\n\n<!-- End of code generated from the comments of the Config struct in builder/vagrant/builder.go; -->\n\n\n## Example\n\nSample for `hashicorp/precise64` with virtualbox provider.\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"communicator\": \"ssh\",\n      \"source_path\": \"hashicorp/precise64\",\n      \"provider\": \"virtualbox\",\n      \"add_force\": true,\n      \"type\": \"vagrant\"\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"vagrant\" \"example\" {\n  communicator = \"ssh\"\n  source_path = \"hashicorp/precise64\"\n  provider = \"virtualbox\"\n  add_force = true\n}\n\nbuild {\n  sources = [\"source.vagrant.example\"]\n}\n```\n\n\n## Regarding output directory and new box\n\nAfter Packer completes building and provisioning a new Vagrant Box file, it is worth\nnoting that the new box file will need to be added to Vagrant. For a beginner to Packer\nand Vagrant, it may seem as if a simple 'vagrant up' in the output directory will run the\nthe newly created Box. This is not the case.\n\nRather, create a new directory (to avoid Vagarant init collisions), add the new\npackage.box to Vagrant and init. Then run vagrant up to bring up the new box created\nby Packer. You will now be able to connect to the new box with provisioned changes.\n\n```\n'mkdir output2'\n'cp package.box ./output2'\n'vagrant box add new-box name-of-the-packer-box.box'\n'vagrant init new-box'\n'vagrant up'\n```\n\n## A note on SSH connections\n\nCurrently this builder only works for SSH connections, and automatically fills\nin all information needed for the SSH communicator using vagrant's ssh-config.\n\nIf you would like to connect via a different username or authentication method\nthan is produced when you call `vagrant ssh-config`, then you must provide the\n\n`ssh_username` and all other relevant authentication information (e.g.\n`ssh_password` or `ssh_private_key_file`)\n\nBy providing the `ssh_username`, you're telling Packer not to use the vagrant\nssh config, except for determining the host and port for the virtual machine to\nconnect to.\n","created_at":"2024-01-17T19:09:56.261Z","updated_at":"2024-02-05T15:25:01.899Z","name":"Vagrant","slug":"vagrant","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"a5831801-f174-42c1-9e31-168b1d464e94","integration_release_id":"3f95914e-81b4-4a49-836b-edbefa3f88cc","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":"Type: `vagrant-cloud`\nArtifact BuilderId: `pearkes.post-processor.vagrant-cloud`\n\n[Vagrant Cloud](https://app.vagrantup.com/boxes/search) hosts and serves boxes\nto Vagrant, allowing you to version and distribute boxes to an organization in a\nsimple way.\n\nThe Vagrant Cloud post-processor enables the upload of Vagrant boxes to Vagrant\nCloud. Currently, the Vagrant Cloud post-processor will accept and upload boxes\nsupplied to it from the [Vagrant](/docs/post-processor/vagrant.mdx) or\n[Artifice](https://developer.hashicorp.com/packer/docs/post-processor/artifice) post-processors and the\n[Vagrant](/docs/builder/vagrant.mdx) builder.\n\nYou'll need to be familiar with Vagrant Cloud, have an upgraded account to\nenable box hosting, and be distributing your box via the [shorthand name](https://developer.hashicorp.com/vagrant/docs/cli/box) configuration.\n\n## Workflow\n\nIt's important to understand the workflow that using this post-processor\nenforces in order to take full advantage of Vagrant and Vagrant Cloud.\n\nThe use of this processor assume that you currently distribute, or plan to\ndistribute, boxes via Vagrant Cloud. It also assumes you create Vagrant Boxes\nand deliver them to your team in some fashion.\n\nHere is an example workflow:\n\n1. You use Packer to build a Vagrant Box for the `virtualbox` provider\n2. The `vagrant-cloud` post-processor is configured to point to the box\n    `hashicorp/foobar` on Vagrant Cloud via the `box_tag` configuration\n3. The post-processor receives the box from the `vagrant` post-processor\n4. It then creates the configured version, or verifies the existence of it, on\n    Vagrant Cloud\n5. A provider matching the name of the Vagrant provider is then created\n6. The box is uploaded to Vagrant Cloud\n7. The upload is verified\n8. The version is released and available to users of the box\n\n~> The Vagrant Cloud box (`hashicorp/foobar` in this example) must already\nexist. Packer will not create the box automatically. If running Packer in\nautomation, consider using the\n[Vagrant Cloud API](https://developer.hashicorp.com/vagrant/vagrant-cloud/api)\nto create the Vagrant Cloud box if it doesn't already exist.\n\n## Configuration\n\nThe configuration allows you to specify the target box that you have access to\non Vagrant Cloud, as well as authentication and version information.\n\n### Required\n\n- `box_tag` (string) - The shorthand tag for your box that maps to Vagrant\n  Cloud, for example `hashicorp/precise64`, which is short for\n  `vagrantcloud.com/hashicorp/precise64`. This box must already exist in\n  Vagrant Cloud. Packer will not create the box automatically.\n\n- `version` (string) - The version number, typically incrementing a previous\n  version. The version string is validated based on [Semantic\n  Versioning](http://semver.org/). The string must match a pattern that could\n  be semver, and doesn't validate that the version comes after your previous\n  versions.\n\n- `access_token` (string) - Your access token for the Vagrant Cloud API. This\n  can be generated on your [tokens\n  page](https://app.vagrantup.com/settings/security). If not specified, the\n  environment will be searched. First, `VAGRANT_CLOUD_TOKEN` is checked, and\n  if nothing is found, finally `ATLAS_TOKEN` will be used. This is required\n  unless you are using a private hosting solution (i.e. `vagrant_cloud_url`\n  has been populated).\n\n  **or**\n\n- `vagrant_cloud_url` (string) - Override the base URL for Vagrant Cloud.\n  This is useful if you're using Vagrant Private Cloud in your own network.\n  Defaults to `https://vagrantcloud.com/api/v2`. If this value is set to something\n  other than the default then `access_token` can be left blank and no\n  `Authorization` header will be added to requests sent by this post-processor.\n\n### Optional\n- `architecture` (string) - The architecture of the Vagrant box. This will be\n  detected from the box if possible by default. Supported values: amd64, i386,\n  arm, arm64, ppc64le, ppc64, mips64le, mips64, mipsle, mips, and s390x.\n\n- `default_architecture` (string) - The architecture that should be flagged as\n  the default architecture for this provider. See the [Vagrant Cloud documentation](https://developer.hashicorp.com/vagrant/vagrant-cloud/boxes/architecture)\n  for more information.\n\n- `no_release` (boolean) - If set to true, does not release the version on\n  Vagrant Cloud, making it active. You can manually release the version via\n  the API or Web UI. Defaults to `false`.\n\n- `insecure_skip_tls_verify` (boolean) - If set to true _and_ `vagrant_cloud_url`\n  is set to something different than its default, it will set TLS InsecureSkipVerify\n  to true. In other words, this will disable security checks of SSL. You may need\n  to set this option to true if your host at `vagrant_cloud_url` is using a\n  self-signed certificate.\n\n- `keep_input_artifact` (boolean) - When true, preserve the local box\n  after uploading to Vagrant cloud. Defaults to `true`.\n\n- `version_description` (string) - Optional Markdown text used as a\n  full-length and in-depth description of the version, typically for denoting\n  changes introduced\n\n- `box_download_url` (string) - Optional URL for a self-hosted box.\n  If this is set the box will not be uploaded to the Vagrant Cloud.\n  This is a [template engine](https://developer.hashicorp.com/packer/docs/templates/legacy_json_templates/engine).\n  Therefore, you may use user variables and template functions in this field.\n  The following extra variables are also available in this engine:\n\n  - `Architecture`: The architecture of the Vagrant box\n  - `Provider`: The Vagrant provider the box is for\n  - `ArtifactId`: The ID of the input artifact.\n\n- `box_checksum` (string) - Optional checksum for the provider .box file.\n  The type of the checksum is specified within the checksum field as a prefix,\n  ex: \"md5:{$checksum}\". Valid values are:\n  - null or \"\"\n  - \"md5:{$checksum}\"\n  - \"sha1:{$checksum}\"\n  - \"sha256:{$checksum}\"\n  - \"sha512:{$checksum}\"\n  See <https://www.vagrantup.com/vagrant-cloud/api#arguments-7>\n\n- `no_direct_upload` (boolean) - When `true`, upload the box artifact through\n  Vagrant Cloud instead of directly to the backend storage.\n\n## Use with the Vagrant Post-Processor\n\nAn example configuration is shown below. Note the use of the [post-processors](https://developer.hashicorp.com/packer/docs/templates/hcl_templates/blocks/build/post-processors)\nblock that wraps both the Vagrant and Vagrant Cloud [post-processor](https://developer.hashicorp.com/packer/docs/templates/hcl_templates/blocks/build/post-processor) blocks within the post-processor section. Chaining\nthe post-processors together in this way tells Packer that the artifact\nproduced by the Vagrant post-processor should be passed directly to the Vagrant\nCloud Post-Processor. It also sets the order in which the post-processors\nshould run.\n\nFailure to chain the post-processors together in this way will result in the\nwrong artifact being supplied to the Vagrant Cloud post-processor. This will\nlikely cause the Vagrant Cloud post-processor to error and fail.\n\n**JSON**\n\n```json\n{\n  \"variables\": {\n    \"cloud_token\": \"{{ env `VAGRANT_CLOUD_TOKEN` }}\",\n    \"version\": \"1.0.{{timestamp}}\"\n    \"architecture\": \"amd64\",\n  },\n  \"post-processors\": [\n    {\n      \"type\": \"shell-local\",\n      \"inline\": [\"echo Doing stuff...\"]\n    },\n    [\n      {\n        \"type\": \"vagrant\",\n        \"include\": [\"image.iso\"],\n        \"vagrantfile_template\": \"vagrantfile.tpl\",\n        \"output\": \"proxycore_{{.Provider}}.box\"\n      },\n      {\n        \"type\": \"vagrant-cloud\",\n        \"box_tag\": \"hashicorp/precise64\",\n        \"access_token\": \"{{user `cloud_token`}}\",\n        \"version\": \"{{user `version`}}\",\n        \"architecture\": \"{{user `architecture`}}\"\n      }\n    ]\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nbuild {\n  sources = [\"source.null.autogenerated_1\"]\n\n  post-processor \"shell-local\" {\n    inline = [\"echo Doing stuff...\"]\n  }\n  post-processors {\n    post-processor \"vagrant\" {\n      include              = [\"image.iso\"]\n      output               = \"proxycore_{{.Provider}}.box\"\n      vagrantfile_template = \"vagrantfile.tpl\"\n    }\n    post-processor \"vagrant-cloud\" {\n      access_token = \"${var.cloud_token}\"\n      box_tag      = \"hashicorp/precise64\"\n      version      = \"${local.version}\"\n      architecture = \"${local.architecture}\"\n    }\n  }\n}\n```\n\n\n## Use with the Artifice Post-Processor\n\nAn example configuration is shown below. Note the use of the nested array that\nwraps both the Artifice and Vagrant Cloud post-processors within the\npost-processor section. Chaining the post-processors together in this way tells\nPacker that the artifact produced by the Artifice post-processor should be\npassed directly to the Vagrant Cloud Post-Processor. It also sets the order in\nwhich the post-processors should run.\n\nFailure to chain the post-processors together in this way will result in the\nwrong artifact being supplied to the Vagrant Cloud post-processor. This will\nlikely cause the Vagrant Cloud post-processor to error and fail.\n\nNote that the Vagrant box specified in the Artifice post-processor `files` array\nmust end in the `.box` extension. It must also be the first file in the array.\nAdditional files bundled by the Artifice post-processor will be ignored.\n\n**JSON**\n\n```json\n{\n  \"variables\": {\n    \"cloud_token\": \"{{ env `VAGRANT_CLOUD_TOKEN` }}\"\n  },\n\n  \"builders\": [\n    {\n      \"type\": \"null\",\n      \"communicator\": \"none\"\n    }\n  ],\n\n  \"post-processors\": [\n    {\n      \"type\": \"shell-local\",\n      \"inline\": [\"echo Doing stuff...\"]\n    },\n    [\n      {\n        \"type\": \"artifice\",\n        \"files\": [\"./path/to/my.box\"]\n      },\n      {\n        \"type\": \"vagrant-cloud\",\n        \"box_tag\": \"myorganisation/mybox\",\n        \"access_token\": \"{{user `cloud_token`}}\",\n        \"version\": \"0.1.0\",\n        \"architecture\": \"amd64\"\n      }\n    ]\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nvariable \"cloud_token\" {\n  type    = string\n  default = \"${env(\"VAGRANT_CLOUD_TOKEN\")}\"\n}\n\nsource \"null\" \"autogenerated_1\" {\n  communicator = \"none\"\n}\n\nbuild {\n  sources = [\"source.null.autogenerated_1\"]\n\n  post-processor \"shell-local\" {\n    inline = [\"echo Doing stuff...\"]\n  }\n  post-processors {\n    post-processor \"artifice\" {\n      files = [\"./path/to/my.box\"]\n    }\n    post-processor \"vagrant-cloud\" {\n      access_token = \"${var.cloud_token}\"\n      box_tag      = \"myorganisation/mybox\"\n      version      = \"0.1.0\"\n      architecture = \"amd64\"\n    }\n  }\n}\n```\n","created_at":"2024-01-17T19:09:56.454Z","updated_at":"2024-01-17T19:09:56.454Z","name":"Vagrant Cloud","slug":"vagrant-cloud","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]},{"id":"90477650-1843-4e74-8f22-ecebc12a15e6","integration_release_id":"3f95914e-81b4-4a49-836b-edbefa3f88cc","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":"Type: `vagrant`\nArtifact BuilderId: `mitchellh.post-processor.vagrant`\n\nThe Packer Vagrant post-processor takes a build and converts the artifact into\na valid [Vagrant](https://developer.hashicorp.com/vagrant) box, if it can. This lets you use\nPacker to automatically create arbitrarily complex Vagrant boxes, and is in\nfact how the official boxes distributed by Vagrant are created.\n\nIf you've never used a post-processor before, please read the documentation on\n[using post-processors](https://developer.hashicorp.com/packer/docs/post-processors).\nThis knowledge will be expected for the remainder of this document.\n\nBecause Vagrant boxes are\n[provider-specific](https://developer.hashicorp.com/vagrant/docs/boxes/format), the\nVagrant post-processor is hardcoded to understand how to convert the artifacts\nof certain builders into proper boxes for their respective providers.\n\nCurrently, the Vagrant post-processor can create boxes for the following\nproviders.\n\n- AWS\n- Azure\n- DigitalOcean\n- Docker\n- File\n- Hyper-V\n- LXC\n- Parallels\n- QEMU\n- VirtualBox\n- VMware\n\n-> **Support for additional providers** is planned. If the Vagrant\npost-processor doesn't support creating boxes for a provider you care about,\nplease help by contributing to Packer and adding support for it.\n\nPlease note that if you are using the Vagrant builder, then the Vagrant\npost-processor is unnecessary because the output of the Vagrant builder is\nalready a Vagrant box; using this post-processor with the Vagrant builder will\ncause your build to fail.\n\n## Configuration\n\nThe simplest way to use the post-processor is to just enable it. No\nconfiguration is required by default. This will mostly do what you expect and\nwill build functioning boxes for many of the built-in builders of Packer.\n\nHowever, if you want to configure things a bit more, the post-processor does\nexpose some configuration options. The available options are listed below, with\nmore details about certain options in following sections.\n\n- `architecture` (string) - The architecture of the Vagrant box. This will be\n  set to the detected architecture of the builder host by default. Supported\n  values: amd64, i386, arm, arm64, ppc64le, ppc64, mips64le, mips64, mipsle,\n  mips, and s390x.\n\n- `compression_level` (number) - An integer representing the compression\n  level to use when creating the Vagrant box. Valid values range from 0 to 9,\n  with 0 being no compression and 9 being the best compression. By default,\n  compression is enabled at level 6.\n\n- `include` (array of strings) - Paths to files to include in the Vagrant\n  box. These files will each be copied into the top level directory of the\n  Vagrant box (regardless of their paths). They can then be used from the\n  Vagrantfile.\n\n- `keep_input_artifact` (boolean) - When true, preserve the artifact we use to\n  create the vagrant box. Defaults to `false`, except when you set a cloud\n  provider (e.g. aws, azure, google, digitalocean). In these cases deleting\n  the input artifact would render the vagrant box useless, so we always keep\n  these artifacts -- even if you specifically set\n  `\"keep_input_artifact\":false`\n\n- `output` (string) - The full path to the box file that will be created by\n  this post-processor. This is a\n  [template engine](https://developer.hashicorp.com/packer/docs/templates/legacy_json_templates/engine). Therefore, you may use user\n  variables and template functions in this field. The following extra\n  variables are also available in this engine:\n\n  - `Architecture`: The architecture of the Vagrant box\n  - `Provider`: The Vagrant provider the box is for\n  - `ArtifactId`: The ID of the input artifact.\n  - `BuildName`: The name of the build.\n\n  By default, the value of this config is\n  `packer_{{.BuildName}}_{{.Provider}}_{{.Architecture}}.box`.\n\n- `provider_override` (string) - this option will override the internal logic\n  that decides which Vagrant provider to set for a particular Packer builder's\n  or post-processor's artifact. It is required when the artifact comes from the\n  Artifice post-processor, but is otherwise optional. Valid options are:\n  `digitalocean`, `virtualbox`, `azure`, `vmware`, `libvirt`, `docker`,\n  `lxc`, `scaleway`, `hyperv`, `parallels`, `aws`, or `google`.\n\n- `vagrantfile_template` (string) - Path to a template to use for the\n  Vagrantfile that is packaged with the box. This option supports the usage of the [template engine](https://developer.hashicorp.com/packer/docs/templates/legacy_json_templates/engine)\n  for JSON and the [contextual variables](https://developer.hashicorp.com/packer/docs/templates/hcl_templates/contextual-variables) for HCL2.\n\n- `vagrantfile_template_generated` (boolean) - By default, Packer will\n  exit with an error if the file specified using the\n  `vagrantfile_template` variable is not found. However, under certain\n  circumstances, it may be desirable to dynamically generate the\n  Vagrantfile during the course of the build. Setting this variable to\n  `true` skips the start up check and allows the user to script the\n  creation of the Vagrantfile at some previous point in the build.\n  Defaults to `false`.\n\n## Using together with the Artifice post-processor\n\nSometimes you may want to run several builds in a pipeline rather than running\nthis post-processor inside a long-running Packer build. Here is an example of\nhow to do this:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"null\",\n      \"communicator\": \"none\"\n    }\n  ],\n  \"post-processors\": [\n    [\n      {\n        \"type\": \"artifice\",\n        \"files\": [\n          \"output-virtualbox-iso/vbox-example-disk001.vmdk\",\n          \"output-virtualbox-iso/vbox-example.ovf\"\n        ]\n      },\n      {\n        \"type\": \"vagrant\",\n        \"keep_input_artifact\": true,\n        \"provider_override\": \"virtualbox\"\n      }\n    ]\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"null\" \"example\" {\n    communicator = \"none\"\n}\n\nbuild {\n  sources = [\n    \"source.null.example\"\n  ]\n  post-processors {\n    post-processor \"artifice\" {\n      files = [\n        \"output-virtualbox-iso/vbox-example-disk001.vmdk\",\n        \"output-virtualbox-iso/vbox-example.ovf\"\n      ]\n    }\n    post-processor \"vagrant\" {\n      keep_input_artifact = true\n      provider_override   = \"virtualbox\"\n    }\n  }\n}\n```\n\n\n## Provider-Specific Overrides\n\nIf you have a Packer template with multiple builder types within it, you may\nwant to configure the box creation for each type a little differently. For\nexample, the contents of the Vagrantfile for a Vagrant box for AWS might be\ndifferent from the contents of the Vagrantfile you want for VMware. The\npost-processor lets you do this.\n\nSpecify overrides within the `override` configuration by provider name:\n\n**JSON**\n\n```json\n{\n  \"type\": \"vagrant\",\n  \"compression_level\": 1,\n  \"override\": {\n    \"vmware\": {\n      \"compression_level\": 0\n    }\n  }\n}\n```\n\n**HCL2**\n\n```hcl\n## This feature is not implemented in HCL.\n```\n\n\nIn the example above, the compression level will be set to 1 except for VMware,\nwhere it will be set to 0.\n\nThe available provider names are:\n\n- `aws`\n- `azure`\n- `digitalocean`\n- `file`\n- `google`\n- `hyperv`\n- `parallels`\n- `libvirt`\n- `lxc`\n- `scaleway`\n- `virtualbox`\n- `vmware`\n- `docker`\n\n## Input Artifacts\n\nBy default, Packer will delete the original input artifact, assuming you only\nwant the final Vagrant box as the result. If you wish to keep the input\nartifact (the raw virtual machine, for example), then you must configure Packer\nto keep it.\n\nPlease see the [documentation on input artifacts](https://developer.hashicorp.com/packer/docs/templates/legacy_json_templates/post-processors#input-artifacts)\nfor more information.\n\n### Docker\n\nUsing a Docker input artifact will include a reference to the image in the\n`Vagrantfile`. If the image tag is not specified in the post-processor, the\nsha256 hash will be used.\n\nThe following Docker input artifacts are supported:\n\n- `docker` builder with `commit: true`, always uses the sha256 hash\n- `docker-import`\n- `docker-tag`\n- `docker-push`\n\n### QEMU/libvirt\n\nThe `libvirt` provider supports QEMU artifacts built using any these\naccelerators: none, kvm, tcg, or hvf.\n\n### VMWare\n\nIf you are using the Vagrant post-processor with the `vmware-esxi` builder, you\nmust export the builder artifact locally; the Vagrant post-processor will\nnot work on remote artifacts.\n\n### Artifice\n\nIf you are using this post-processor after defining an artifact using the\nArtifice post-processor, then you must set the \"provider_override\" template\noption so that the Vagrant post-processor knows what provider to use to create\nthe Vagrant box.\n","created_at":"2024-01-17T19:09:56.674Z","updated_at":"2024-01-17T19:09:56.674Z","name":"Vagrant","slug":"vagrant","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]}]},"component":{"id":"63472383-5372-4590-8820-49f4993750c7","integration_release_id":"3f95914e-81b4-4a49-836b-edbefa3f88cc","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vagrant`\nArtifact BuilderId: `vagrant`\n\nThe Vagrant builder is intended for building new boxes from already-existing\nboxes. Your source should be a URL or path to a .box file or a Vagrant Cloud\nbox name such as `hashicorp/precise64`.\n\nPacker will not install vagrant, nor will it install the underlying\nvirtualization platforms or extra providers; We expect when you run this\nbuilder that you have already installed what you need.\n\nBy default, this builder will initialize a new Vagrant workspace, launch your\nbox from that workspace, provision it, call `vagrant package` to package it\ninto a new box, and then destroy the original box. Please note that vagrant\nwill _not_ remove the box file from your system (we don't call\n`vagrant box remove`).\n\nYou can change the behavior so that the builder doesn't destroy the box by\nsetting the `teardown_method` option. You can change the behavior so the builder\ndoesn't package it (not all provisioners support the `vagrant package` command)\nby setting the `skip package` option. You can also change the behavior so that\nrather than initializing a new Vagrant workspace, you use an already defined\none, by using `global_id` instead of `source_box`.\n\nPlease note that if you are using the Vagrant builder, then the Vagrant\npost-processor is unnecessary because the output of the Vagrant builder is\nalready a Vagrant box; using that post-processor with the Vagrant builder will\ncause your build to fail. Similarly, since Vagrant boxes are already compressed,\nthe Compress post-processor will not work with this builder.\n\n## Configuration Reference\n\n### Required\n\n- `source_path` (string) - URL of the vagrant box to use, or the name of the\n  vagrant box. `hashicorp/precise64`, `./mylocalbox.box` and\n  `https://example.com/my-box.box` are all valid source boxes. If your\n  source is a .box file, whether locally or from a URL like the latter example\n  above, you will also need to provide a `box_name`. This option is required,\n  unless you set `global_id`. You may only set one or the other, not both.\n\n  or\n\n- `global_id` (string) - the global id of a Vagrant box already added to Vagrant\n  on your system. You can find the global id of your Vagrant boxes using the\n  command `vagrant global-status`; your global_id will be a 7-digit number and\n  letter combination that you'll find in the leftmost column of the\n  global-status output. If you choose to use `global_id` instead of\n  `source_box`, Packer will skip the Vagrant initialize and add steps, and\n  simply launch the box directly using the global id.\n\n### Optional\n\n<!-- Code generated from the comments of the Config struct in builder/vagrant/builder.go; DO NOT EDIT MANUALLY -->\n\n- `output_dir` (string) - The directory to create that will contain your output box. We always\n  create this directory and run from inside of it to prevent Vagrant init\n  collisions. If unset, it will be set to packer- plus your buildname.\n\n- `checksum` (string) - The checksum for the .box file. The type of the checksum is specified\n  within the checksum field as a prefix, ex: \"md5:{$checksum}\". The type\n  of the checksum can also be omitted and Packer will try to infer it\n  based on string length. Valid values are \"none\", \"{$checksum}\",\n  \"md5:{$checksum}\", \"sha1:{$checksum}\", \"sha256:{$checksum}\",\n  \"sha512:{$checksum}\" or \"file:{$path}\". Here is a list of valid checksum\n  values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `box_name` (string) - if your source_box is a boxfile that we need to add to Vagrant, this is\n  the name to give it. If left blank, will default to \"packer_\" plus your\n  buildname.\n\n- `insert_key` (bool) - If true, Vagrant will automatically insert a keypair to use for SSH,\n  replacing Vagrant's default insecure key inside the machine if detected.\n  By default, Packer sets this to false.\n\n- `provider` (string) - The vagrant provider.\n  This parameter is required when source_path have more than one provider,\n  or when using vagrant-cloud post-processor. Defaults to unset.\n\n- `vagrantfile_template` (string) - What vagrantfile to use\n\n- `teardown_method` (string) - Whether to halt, suspend, or destroy the box when the build has\n  completed. Defaults to \"halt\"\n\n- `box_version` (string) - What box version to use when initializing Vagrant.\n\n- `template` (string) - a path to a golang template for a vagrantfile. Our default template can\n  be found [here](https://github.com/hashicorp/packer-plugin-vagrant/blob/main/builder/vagrant/step_create_vagrantfile.go#L39-L54). The template variables available to you are\n  `{{ .BoxName }}`, `{{ .SyncedFolder }}`, and `{{.InsertKey}}`, which\n  correspond to the Packer options box_name, synced_folder, and insert_key.\n  Alternatively, the template variable `{{.DefaultTemplate}}` is available for\n  use if you wish to extend the default generated template.\n\n- `synced_folder` (string) - Path to the folder to be synced to the guest. The path can be absolute\n  or relative to the directory Packer is being run from.\n\n- `skip_add` (bool) - Don't call \"vagrant add\" to add the box to your local environment; this\n  is necessary if you want to launch a box that is already added to your\n  vagrant environment.\n\n- `add_cacert` (string) - Equivalent to setting the\n  --cacert\n  option in vagrant add; defaults to unset.\n\n- `add_capath` (string) - Equivalent to setting the\n  --capath option\n  in vagrant add; defaults to unset.\n\n- `add_cert` (string) - Equivalent to setting the\n  --cert option in\n  vagrant add; defaults to unset.\n\n- `add_clean` (bool) - Equivalent to setting the\n  --clean flag in\n  vagrant add; defaults to unset.\n\n- `add_force` (bool) - Equivalent to setting the\n  --force flag in\n  vagrant add; defaults to unset.\n\n- `add_insecure` (bool) - Equivalent to setting the\n  --insecure flag in\n  vagrant add; defaults to unset.\n\n- `skip_package` (bool) - if true, Packer will not call vagrant package to\n  package your base box into its own standalone .box file.\n\n- `output_vagrantfile` (string) - Output Vagrantfile\n\n- `package_include` ([]string) - Equivalent to setting the\n  [`--include`](https://developer.hashicorp.com/vagrant/docs/cli/package#include-x-y-z) option\n  in `vagrant package`; defaults to unset\n\n<!-- End of code generated from the comments of the Config struct in builder/vagrant/builder.go; -->\n\n\n## Example\n\nSample for `hashicorp/precise64` with virtualbox provider.\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"communicator\": \"ssh\",\n      \"source_path\": \"hashicorp/precise64\",\n      \"provider\": \"virtualbox\",\n      \"add_force\": true,\n      \"type\": \"vagrant\"\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"vagrant\" \"example\" {\n  communicator = \"ssh\"\n  source_path = \"hashicorp/precise64\"\n  provider = \"virtualbox\"\n  add_force = true\n}\n\nbuild {\n  sources = [\"source.vagrant.example\"]\n}\n```\n\n\n## Regarding output directory and new box\n\nAfter Packer completes building and provisioning a new Vagrant Box file, it is worth\nnoting that the new box file will need to be added to Vagrant. For a beginner to Packer\nand Vagrant, it may seem as if a simple 'vagrant up' in the output directory will run the\nthe newly created Box. This is not the case.\n\nRather, create a new directory (to avoid Vagarant init collisions), add the new\npackage.box to Vagrant and init. Then run vagrant up to bring up the new box created\nby Packer. You will now be able to connect to the new box with provisioned changes.\n\n```\n'mkdir output2'\n'cp package.box ./output2'\n'vagrant box add new-box name-of-the-packer-box.box'\n'vagrant init new-box'\n'vagrant up'\n```\n\n## A note on SSH connections\n\nCurrently this builder only works for SSH connections, and automatically fills\nin all information needed for the SSH communicator using vagrant's ssh-config.\n\nIf you would like to connect via a different username or authentication method\nthan is produced when you call `vagrant ssh-config`, then you must provide the\n\n`ssh_username` and all other relevant authentication information (e.g.\n`ssh_password` or `ssh_private_key_file`)\n\nBy providing the `ssh_username`, you're telling Packer not to use the vagrant\nssh config, except for determining the host and port for the virtual machine to\nconnect to.\n","created_at":"2024-01-17T19:09:56.261Z","updated_at":"2024-02-05T15:25:01.899Z","name":"Vagrant","slug":"vagrant","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"configuration-reference","level":2,"title":"Configuration Reference"},{"id":"required","level":3,"title":"Required"},{"id":"optional","level":3,"title":"Optional"},{"id":"example","level":2,"title":"Example"},{"id":"regarding-output-directory-and-new-box","level":2,"title":"Regarding output directory and new box"},{"id":"a-note-on-ssh-connections","level":2,"title":"A note on SSH connections"}],"serializedREADME":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var s=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))l.call(n,t)&&s(a,t,n[t]);if(i)for(var t of i(n))p.call(n,t)&&s(a,t,n[t]);return a},r=(a,n)=>m(a,u(n));var d=(a,n)=>{var t={};for(var o in a)l.call(a,o)&&n.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&i)for(var o of i(a))n.indexOf(o)<0&&p.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,n=d(o,[\"components\"]);return mdx(MDXLayout,r(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Type: \",mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant\"),`\nArtifact BuilderId: `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The Vagrant builder is intended for building new boxes from already-existing\nboxes. Your source should be a URL or path to a .box file or a Vagrant Cloud\nbox name such as `,mdx(\"inlineCode\",{parentName:\"p\"},\"hashicorp/precise64\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Packer will not install vagrant, nor will it install the underlying\nvirtualization platforms or extra providers; We expect when you run this\nbuilder that you have already installed what you need.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`By default, this builder will initialize a new Vagrant workspace, launch your\nbox from that workspace, provision it, call `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant package\"),` to package it\ninto a new box, and then destroy the original box. Please note that vagrant\nwill `,mdx(\"em\",{parentName:\"p\"},\"not\"),` remove the box file from your system (we don't call\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant box remove\"),\").\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You can change the behavior so that the builder doesn't destroy the box by\nsetting the `,mdx(\"inlineCode\",{parentName:\"p\"},\"teardown_method\"),` option. You can change the behavior so the builder\ndoesn't package it (not all provisioners support the `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant package\"),` command)\nby setting the `,mdx(\"inlineCode\",{parentName:\"p\"},\"skip package\"),` option. You can also change the behavior so that\nrather than initializing a new Vagrant workspace, you use an already defined\none, by using `,mdx(\"inlineCode\",{parentName:\"p\"},\"global_id\"),\" instead of \",mdx(\"inlineCode\",{parentName:\"p\"},\"source_box\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Please note that if you are using the Vagrant builder, then the Vagrant\npost-processor is unnecessary because the output of the Vagrant builder is\nalready a Vagrant box; using that post-processor with the Vagrant builder will\ncause your build to fail. Similarly, since Vagrant boxes are already compressed,\nthe Compress post-processor will not work with this builder.`),mdx(\"h2\",e({},{id:\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",className:\"g-type-display-3\"}),\"Configuration Reference\"),mdx(\"h3\",e({},{id:\"user-content-required\",\"data-text-content\":\"Required\",className:\"g-type-display-4\"}),\"Required\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"source_path\"),` (string) - URL of the vagrant box to use, or the name of the\nvagrant box. `,mdx(\"inlineCode\",{parentName:\"p\"},\"hashicorp/precise64\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"./mylocalbox.box\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"https://example.com/my-box.box\"),` are all valid source boxes. If your\nsource is a .box file, whether locally or from a URL like the latter example\nabove, you will also need to provide a `,mdx(\"inlineCode\",{parentName:\"p\"},\"box_name\"),`. This option is required,\nunless you set `,mdx(\"inlineCode\",{parentName:\"p\"},\"global_id\"),\". You may only set one or the other, not both.\"),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),\"or\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"global_id\"),` (string) - the global id of a Vagrant box already added to Vagrant\non your system. You can find the global id of your Vagrant boxes using the\ncommand `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant global-status\"),`; your global_id will be a 7-digit number and\nletter combination that you'll find in the leftmost column of the\nglobal-status output. If you choose to use `,mdx(\"inlineCode\",{parentName:\"p\"},\"global_id\"),` instead of\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"source_box\"),`, Packer will skip the Vagrant initialize and add steps, and\nsimply launch the box directly using the global id.`))),mdx(\"h3\",e({},{id:\"user-content-optional\",\"data-text-content\":\"Optional\",className:\"g-type-display-4\"}),\"Optional\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"output_dir\"),` (string) - The directory to create that will contain your output box. We always\ncreate this directory and run from inside of it to prevent Vagrant init\ncollisions. If unset, it will be set to packer- plus your buildname.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"checksum\"),` (string) - The checksum for the .box file. The type of the checksum is specified\nwithin the checksum field as a prefix, ex: \"md5:{$checksum}\". The type\nof the checksum can also be omitted and Packer will try to infer it\nbased on string length. Valid values are \"none\", \"{$checksum}\",\n\"md5:{$checksum}\", \"sha1:{$checksum}\", \"sha256:{$checksum}\",\n\"sha512:{$checksum}\" or \"file:{$path}\". Here is a list of valid checksum\nvalues:`),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"md5:090992ba9fd140077b0661cb75f7ce13\"),mdx(\"li\",{parentName:\"ul\"},\"090992ba9fd140077b0661cb75f7ce13\"),mdx(\"li\",{parentName:\"ul\"},\"sha1:ebfb681885ddf1234c18094a45bbeafd91467911\"),mdx(\"li\",{parentName:\"ul\"},\"ebfb681885ddf1234c18094a45bbeafd91467911\"),mdx(\"li\",{parentName:\"ul\"},\"sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\"),mdx(\"li\",{parentName:\"ul\"},\"ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\"),mdx(\"li\",{parentName:\"ul\"},\"file:\",mdx(\"a\",e({parentName:\"li\"},{href:\"http://releases.ubuntu.com/20.04/SHA256SUMS\"}),\"http://releases.ubuntu.com/20.04/SHA256SUMS\")),mdx(\"li\",{parentName:\"ul\"},\"file:file://./local/path/file.sum\"),mdx(\"li\",{parentName:\"ul\"},\"file:./local/path/file.sum\"),mdx(\"li\",{parentName:\"ul\"},`none\nAlthough the checksum will not be verified when it is set to \"none\",\nthis is not recommended since these files can be very large and\ncorruption does happen from time to time.`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"box_name\"),\" (string) - if your source\",mdx(\"em\",{parentName:\"p\"},`box is a boxfile that we need to add to Vagrant, this is\nthe name to give it. If left blank, will default to \"packer`),`\" plus your\nbuildname.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"insert_key\"),` (bool) - If true, Vagrant will automatically insert a keypair to use for SSH,\nreplacing Vagrant's default insecure key inside the machine if detected.\nBy default, Packer sets this to false.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"provider\"),` (string) - The vagrant provider.\nThis parameter is required when source_path have more than one provider,\nor when using vagrant-cloud post-processor. Defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vagrantfile_template\"),\" (string) - What vagrantfile to use\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"teardown_method\"),` (string) - Whether to halt, suspend, or destroy the box when the build has\ncompleted. Defaults to \"halt\"`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"box_version\"),\" (string) - What box version to use when initializing Vagrant.\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"template\"),` (string) - a path to a golang template for a vagrantfile. Our default template can\nbe found `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/hashicorp/packer-plugin-vagrant/blob/main/builder/vagrant/step_create_vagrantfile.go#L39-L54\"}),\"here\"),`. The template variables available to you are\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .BoxName }}\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"{{ .SyncedFolder }}\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"{{.InsertKey}}\"),`, which\ncorrespond to the Packer options box_name, synced_folder, and insert_key.\nAlternatively, the template variable `,mdx(\"inlineCode\",{parentName:\"p\"},\"{{.DefaultTemplate}}\"),` is available for\nuse if you wish to extend the default generated template.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"synced_folder\"),` (string) - Path to the folder to be synced to the guest. The path can be absolute\nor relative to the directory Packer is being run from.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"skip_add\"),` (bool) - Don't call \"vagrant add\" to add the box to your local environment; this\nis necessary if you want to launch a box that is already added to your\nvagrant environment.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_cacert\"),` (string) - Equivalent to setting the\n--cacert\noption in vagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_capath\"),` (string) - Equivalent to setting the\n--capath option\nin vagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_cert\"),` (string) - Equivalent to setting the\n--cert option in\nvagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_clean\"),` (bool) - Equivalent to setting the\n--clean flag in\nvagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_force\"),` (bool) - Equivalent to setting the\n--force flag in\nvagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"add_insecure\"),` (bool) - Equivalent to setting the\n--insecure flag in\nvagrant add; defaults to unset.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"skip_package\"),` (bool) - if true, Packer will not call vagrant package to\npackage your base box into its own standalone .box file.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"output_vagrantfile\"),\" (string) - Output Vagrantfile\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"package_include\"),` ([]string) - Equivalent to setting the\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://developer.hashicorp.com/vagrant/docs/cli/package#include-x-y-z\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"--include\")),` option\nin `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant package\"),\"; defaults to unset\"))),mdx(\"h2\",e({},{id:\"user-content-example\",\"data-text-content\":\"Example\",className:\"g-type-display-3\"}),\"Example\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Sample for \",mdx(\"inlineCode\",{parentName:\"p\"},\"hashicorp/precise64\"),\" with virtualbox provider.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"JSON\")),mdx(\"pre\",e({},{className:\"language-json\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"builders\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"communicator\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ssh\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"source_path\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hashicorp/precise64\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"provider\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"add_force\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\",\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),'\"type\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token operator\"}),\":\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"HCL2\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"source \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vagrant\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"example\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"communicator\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"ssh\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source_path\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"hashicorp/precise64\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"provider\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"virtualbox\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"add_force\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token boolean\"}),\"true\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"build\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"sources\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"source.vagrant.example\"'),mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h2\",e({},{id:\"user-content-regarding-output-directory-and-new-box\",\"data-text-content\":\"Regarding output directory and new box\",className:\"g-type-display-3\"}),\"Regarding output directory and new box\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`After Packer completes building and provisioning a new Vagrant Box file, it is worth\nnoting that the new box file will need to be added to Vagrant. For a beginner to Packer\nand Vagrant, it may seem as if a simple 'vagrant up' in the output directory will run the\nthe newly created Box. This is not the case.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Rather, create a new directory (to avoid Vagarant init collisions), add the new\npackage.box to Vagrant and init. Then run vagrant up to bring up the new box created\nby Packer. You will now be able to connect to the new box with provisioned changes.`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},\"'mkdir output2'\",`\n`,\"'cp package.box ./output2'\",`\n`,\"'vagrant box add new-box name-of-the-packer-box.box'\",`\n`,\"'vagrant init new-box'\",`\n`,\"'vagrant up'\",`\n`)),mdx(\"h2\",e({},{id:\"user-content-a-note-on-ssh-connections\",\"data-text-content\":\"A note on SSH connections\",className:\"g-type-display-3\"}),\"A note on SSH connections\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Currently this builder only works for SSH connections, and automatically fills\nin all information needed for the SSH communicator using vagrant's ssh-config.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`If you would like to connect via a different username or authentication method\nthan is produced when you call `,mdx(\"inlineCode\",{parentName:\"p\"},\"vagrant ssh-config\"),\", then you must provide the\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_username\"),` and all other relevant authentication information (e.g.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_password\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_private_key_file\"),\")\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"By providing the \",mdx(\"inlineCode\",{parentName:\"p\"},\"ssh_username\"),`, you're telling Packer not to use the vagrant\nssh config, except for determining the host and port for the virtual machine to\nconnect to.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"Vagrant","url":"/packer/integrations/hashicorp/vagrant","isCurrentPage":false},{"title":"v1.1.2","url":"/packer/integrations/hashicorp/vagrant/v1.1.2","isCurrentPage":false},{"title":"Components"},{"title":"Builder"},{"title":"Vagrant","url":"/packer/integrations/hashicorp/vagrant/latest/components/builder/vagrant","isCurrentPage":true}]},"__N_SSG":true}