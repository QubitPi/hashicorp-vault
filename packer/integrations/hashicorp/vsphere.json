{"pageProps":{"metadata":{"title":"VMware vSphere | Integrations","description":"The vSphere plugin is able to create vSphere virtual machines for use with any VMware product."},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiConf","url":"https://hashiconf.com/2023?utm_source=direct&utm_medium=banner&utm_campaign=23Q3_HASHICONFGLOBAL_EVENT&utm_content=&utm_offer=event","text":"Our community conference is taking place in San Francisco and online October 10-12.","linkText":"Register now","expirationDate":""},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"568a9dbc-01e4-4277-847f-412aebfb97f7","slug":"vsphere","name":"VMware vSphere","description":"The vSphere plugin is able to create vSphere virtual machines for use with any VMware product.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"official","repo_url":"https://github.com/hashicorp/packer-plugin-vsphere","subdirectory":"/.web-docs","created_at":"2023-06-15T19:03:11.209Z","updated_at":"2023-08-08T17:01:21.911Z","hide_versions":false,"organization":{"id":"a4a0551a-1451-4d89-9f56-8031c8350c77","slug":"hashicorp","created_at":"2022-11-09T22:56:32.391Z","updated_at":"2022-11-09T22:56:32.391Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["1.2.5","1.2.4","1.2.3","1.2.2","1.2.1","1.2.0"],"components":[{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"},{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"},{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders"}],"flags":[{"id":"3709e036-b45f-4be8-9043-f7c8cc2af00f","slug":"hcp-ready","name":"HCP Ready","description":"This integration has been tested to work with HashiCorp Cloud Platform (HCP)","created_at":"2022-11-09T22:56:30.673Z","updated_at":"2022-11-09T22:56:30.673Z"}],"integration_type":null},"activeRelease":{"id":"fc4ff907-7d36-426e-a167-df93b93f00f5","integration_id":"568a9dbc-01e4-4277-847f-412aebfb97f7","version":"1.2.5","readme":"The vSphere plugin is able to create vSphere virtual machines for use with any VMware product. \nTo achieve this, the plugin comes with three builders, and two post-processors\nto build the VM depending on the strategy you want to use.\n\n### Installation\nTo install this plugin add this code into your Packer configuration and run [packer init](/packer/docs/commands/init)\n\n```hcl\npacker {\n  required_plugins {\n    vsphere = {\n      version = \"~> 1\"\n      source  = \"github.com/hashicorp/vsphere\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\npacker plugins install github.com/hashicorp/vsphere\n```\n\n### Components\n#### Builders:\n- [vsphere-iso](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso) - This builder starts from an\n  ISO file and utilizes the vSphere API to build on a remote esx instance.\n  This allows you to build vms even if you do not have SSH access to your vSphere cluster.\n\n- [vsphere-clone](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone) - This builder clones a\n  vm from an existing template, then modifies it and saves it as a new\n  template. It uses the vSphere API to build on a remote esx instance.\n  This allows you to build vms even if you do not have SSH access to your vSphere cluster.\n\n- [vsphere-supervisor](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-supervisor) - This builder deploys a\n  vm to a vSphere Supervisor cluster, using the VM-Service API. This allows you to build\n  vms without spec yaml files and configure them after using the Packer provisioners.\n\n#### Post-Processors\n- [vsphere](/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere) - The Packer vSphere post-processor takes an artifact \n  and uploads it to a vSphere endpoint.\n\n- [vsphere-template](/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere-template) - The Packer vSphere Template post-processor takes an \n  artifact from the vmware-iso builder, built on an ESXi host (i.e. remote) or an artifact from the \n  [vSphere](/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere) post-processor, marks the VM as a template, and leaves it in the path of \n  your choice.\n","created_at":"2024-03-07T20:36:33.417Z","updated_at":"2024-03-07T20:36:33.417Z","components":[{"id":"dbac81d0-1b81-4ba9-ac60-d95ffdbacd66","integration_release_id":"fc4ff907-7d36-426e-a167-df93b93f00f5","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vsphere-clone`\nArtifact BuilderId: `jetbrains.vsphere`\n\nThis builder clones VMs from existing templates.\n\n- VMware Player is not required.\n- It uses the official vCenter Server API, and does not require ESXi host [modification](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso#building-on-a-remote-vsphere-hypervisor)\n- The builder supports versions following the VMware Product Lifecycle Matrix\n  from General Availability to End of General Support. Builds on versions that\n  are end of support may work, but configuration options may throw errors if\n  they do not exist in the vSphere API for those versions.\n\n## Examples\n\nSee example templates in the [examples folder](https://github.com/hashicorp/packer-plugin-vsphere/tree/main/builder/vsphere/examples/).\n\n## Configuration Reference\n\nThere are many configuration options available for this builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [Hardware](#hardware-configuration),\n[Output](#output-configuration),\n[Boot](#boot-configuration),\n[Run](#run-configuration),\n[Shutdown](#shutdown-configuration),\n[Communicator](#communicator-configuration),\n[Export](#export-configuration),\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n<!-- Code generated from the comments of the Config struct in builder/vsphere/clone/config.go; DO NOT EDIT MANUALLY -->\n\n- `create_snapshot` (bool) - Specifies to create a snapshot of the virtual machine to use as a base for linked clones.\n  Defaults to `false`.\n\n- `snapshot_name` (string) - Specifies the name of the snapshot when `create_snapshot` is `true`.\n  Defaults to `Created By Packer`.\n\n- `convert_to_template` (bool) - Specifies to convert the cloned virtual machine to a template after the build is complete.\n  Defaults to `false`.\n  If set to `true`, the virtual machine can not be imported to a content library.\n\n- `export` (\\*common.ExportConfig) - Specifies the configuration for exporting the virtual machine to an OVF.\n  The virtual machine is not exported if [export configuration](#export-configuration) is not specified.\n\n- `content_library_destination` (\\*common.ContentLibraryDestinationConfig) - Specifies the configuration for importing a VM template or OVF template to a content library.\n  The template will not be imported if no [content library import configuration](#content-library-import-configuration) is specified.\n  If set, `convert_to_template` must be set to `false`.\n\n- `customize` (\\*CustomizeConfig) - Specifies the customization options for the virtual machine.\n  Refer to the [customization options](#customization) section for more information.\n\n<!-- End of code generated from the comments of the Config struct in builder/vsphere/clone/config.go; -->\n\n\n### Clone Configuration\n\n<!-- Code generated from the comments of the CloneConfig struct in builder/vsphere/clone/step_clone.go; DO NOT EDIT MANUALLY -->\n\n- `template` (string) - Specifies the name of the source virtual machine to clone.\n\n- `disk_size` (int64) - Specifies the size of the primary disk in MiB.\n  Cannot be used with `linked_clone`.\n\n- `linked_clone` (bool) - Specifies that the virtual machine is created as a linked clone from the latest snapshot. Defaults to `false`.\n  Cannot be used with `disk_size`.`\n\n- `network` (string) - Specifies the network to which the virtual machine will connect. If no network is specified,\n  provide 'host' to allow Packer to search for an available network. For networks placed\n  within a network folder vCenter Server, provider the object path to the network.\n  For example, `network = \"/<DatacenterName>/<FolderName>/<NetworkName>\"`.\n\n- `mac_address` (string) - Specifies the network card MAC address. For example `00:50:56:00:00:00`.\n  If set, the `network` must be also specified.\n\n- `notes` (string) - Specifies the annotations for the virtual machine.\n\n- `destroy` (bool) - Specifies whether to destroy the virtual machine after the build is complete.\n\n- `vapp` (vAppConfig) - Specifies the vApp Options for the virtual machine. For more information, refer to the\n  [vApp Options Configuration](/packer/integrations/hashicorp/vmware/latest/components/builder/vsphere-clone#vapp-options-configuration)\n  section.\n\n<!-- End of code generated from the comments of the CloneConfig struct in builder/vsphere/clone/step_clone.go; -->\n\n\n<!-- Code generated from the comments of the StorageConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_controller_type` ([]string) - Set VM disk controller type. Example `lsilogic`, `lsilogic-sas`, `pvscsi`, `nvme`, or `scsi`. Use a list to define additional controllers.\n  Defaults to `lsilogic`. See\n  [SCSI, SATA, and NVMe Storage Controller Conditions, Limitations, and Compatibility](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-5872D173-A076-42FE-8D0B-9DB0EB0E7362.html)\n  for additional details.\n\n- `storage` ([]DiskConfig) - Configures a collection of one or more disks to be provisioned along with the VM. See the [Storage Configuration](#storage-configuration).\n\n<!-- End of code generated from the comments of the StorageConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n### Storage Configuration\n\nWhen cloning a VM, the storage configuration can be used to add additional storage and disk controllers. The resulting VM\nwill contain the origin VM storage and disk controller plus the new configured ones.\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\nDefines the disk storage for a VM.\n\nExample that will create a 15GB and a 20GB disk on the VM. The second disk will be thin provisioned:\n\nIn JSON:\n```json\n\n\t\"storage\": [\n\t  {\n\t    \"disk_size\": 15000\n\t  },\n\t  {\n\t    \"disk_size\": 20000,\n\t    \"disk_thin_provisioned\": true\n\t  }\n\t],\n\n```\nIn HCL2:\n```hcl\n\n\tstorage {\n\t    disk_size = 15000\n\t}\n\tstorage {\n\t    disk_size = 20000\n\t    disk_thin_provisioned = true\n\t}\n\n```\n\nExample that creates 2 pvscsi controllers and adds 2 disks to each one:\n\nIn JSON:\n```json\n\n\t\"disk_controller_type\": [\"pvscsi\", \"pvscsi\"],\n\t\"storage\": [\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 0\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 0\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 1\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 1\n\t  }\n\t],\n\n```\n\nIn HCL2:\n```hcl\n\n\tdisk_controller_type = [\"pvscsi\", \"pvscsi\"]\n\tstorage {\n\t   disk_size = 15000,\n\t   disk_controller_index = 0\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 0\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 1\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 1\n\t}\n\n```\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_size` (int64) - The size of the disk in MiB.\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n#### Optional\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_thin_provisioned` (bool) - Enable VMDK thin provisioning for VM. Defaults to `false`.\n\n- `disk_eagerly_scrub` (bool) - Enable VMDK eager scrubbing for VM. Defaults to `false`.\n\n- `disk_controller_index` (int) - The assigned disk controller. Defaults to the first one (0).\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n### vApp Options Configuration\n\n<!-- Code generated from the comments of the vAppConfig struct in builder/vsphere/clone/step_clone.go; DO NOT EDIT MANUALLY -->\n\n- `properties` (map[string]string) - Specifies the values for the available vApp properties. These are used to supply\n  configuration parameters to a virtual machine. This machine is cloned from a template\n  that originated from an imported OVF or OVA file.\n  \n  -> **Note:** The only supported usage path for vApp properties is for existing\n  user-configurable keys. These generally come from an existing template that was\n  created from an imported OVF or OVA file.\n  \n  You cannot set values for vApp properties on virtual machines created from scratch,\n  on virtual machines that lack a vApp configuration, or on property keys that do not exist.\n\n<!-- End of code generated from the comments of the vAppConfig struct in builder/vsphere/clone/step_clone.go; -->\n\n\nExample of usage:\n\n**JSON**\n\n```json\n \"vapp\": {\n     \"properties\": {\n         \"hostname\": \"{{ user `hostname`}}\",\n         \"user-data\": \"{{ env `USERDATA`}}\"\n     }\n }\n```\n\nA `user-data` field requires the content of a yaml file to be encoded with base64. This\ncan be done via environment variable:\n`export USERDATA=$(gzip -c9 <userdata.yaml | { base64 -w0 2>/dev/null || base64; })`\n\n**HCL2**\n\n```hcl\n   vapp {\n     properties = {\n        hostname  = var.hostname\n        user-data = base64encode(var.user_data)\n     }\n   }\n```\n\n\n### Extra Configuration Parameters\n\n<!-- Code generated from the comments of the ConfigParamsConfig struct in builder/vsphere/common/step_config_params.go; DO NOT EDIT MANUALLY -->\n\n- `configuration_parameters` (map[string]string) - configuration_parameters is a direct passthrough to the vSphere API's\n  ConfigSpec: https://vdc-download.vmware.com/vmwb-repository/dcr-public/bf660c0a-f060-46e8-a94d-4b5e6ffc77ad/208bc706-e281-49b6-a0ce-b402ec19ef82/SDK/vsphere-ws/docs/ReferenceGuide/vim.vm.ConfigSpec.html\n\n- `tools_sync_time` (bool) - Enables time synchronization with the host. Defaults to false.\n\n- `tools_upgrade_policy` (bool) - If sets to true, vSphere will automatically check and upgrade VMware Tools upon a system power cycle.\n  If not set, defaults to manual upgrade.\n\n<!-- End of code generated from the comments of the ConfigParamsConfig struct in builder/vsphere/common/step_config_params.go; -->\n\n\n### Customization\n\n<!-- Code generated from the comments of the CustomizeConfig struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\nA cloned virtual machine can be [customized](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-58E346FF-83AE-42B8-BE58-253641D257BC.html)\nto configure host, network, or licensing settings.\n\nTo perform virtual machine customization as a part of the clone process, specify the customize block with the\nrespective customization options. Windows guests are customized using Sysprep, which will result in the machine SID being reset.\nBefore using customization, check that your source virtual machine meets the\n[requirements](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-E63B6FAA-8D35-428D-B40C-744769845906.html)\nfor guest OS customization on vSphere. Refer to the [customization example](#customization-example) for a usage synopsis.\n\nThe settings for guest customization include:\n\n<!-- End of code generated from the comments of the CustomizeConfig struct in builder/vsphere/clone/step_customize.go; -->\n\n\n<!-- Code generated from the comments of the CustomizeConfig struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\n- `linux_options` (\\*LinuxOptions) - Settings for the guest customization of Linux operating systems. Refer to the [Linux options](#linux-options) section for additional details.\n\n- `windows_options` (\\*WindowsOptions) - Settings for the guest customization of Windows operating systems. Refer to the [Windows options](#windows-options) section for additional details.\n\n- `windows_sysprep_file` (string) - Provide a `sysprep.xml` file to allow control of the customization process independent of vSphere. This option is deprecated, please use `windows_sysprep_text`.\n\n- `windows_sysprep_text` (string) - Provide the text for the `sysprep.xml` content to allow control of the customization process independent of vSphere. This option is intended to be used with HCL templates.\n  \n  Example usage:\n  \n  In HCL2:\n  \n  ```hcl\n  customize {\n     windows_sysprep_text = file(\"<path-to-sysprep.xml>\")\n  }\n  ```\n  \n  ```hcl\n  customize {\n     windows_sysprep_text = templatefile(\"<path-to-sysprep.xml>\", {\n        var1=\"example\"\n        var2=\"example-2\"\n     })\n  }\n  ```\n\n- `network_interface` (NetworkInterfaces) - Set up network interfaces individually to correspond with the network adapters on the virtual machine.\n  To use DHCP, specify an empty `network_interface` for each configured adapter. This field is mandatory.\n  Refer to the [network interface](#network-interface-settings) section for additional details.\n\n<!-- End of code generated from the comments of the CustomizeConfig struct in builder/vsphere/clone/step_customize.go; -->\n\n\n#### Network Interface Settings\n\n<!-- Code generated from the comments of the NetworkInterface struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\n- `dns_server_list` ([]string) - Specifies the DNS servers for a specific network interface on a Windows guest operating system.\n  Ignored on Linux. Refer to the [global DNS settings](#global-dns-settings) section for additional details.\n\n- `dns_domain` (string) - Specifies the DNS search domain for a specific network interface on a Windows guest operating system.\n  Ignored on Linux. Refer to the [global DNS settings](#global-dns-settings) section for additional details.\n\n- `ipv4_address` (string) - Specifies the IPv4 address assigned to the network adapter. If left blank or not included, DHCP is used.\n\n- `ipv4_netmask` (int) - Specifies the IPv4 subnet mask, in bits, for the network adapter. For example, `24` for a `/24` subnet.\n\n- `ipv6_address` (string) - Specifies the IPv6 address assigned to the network adapter. If left blank or not included, auto-configuration is used.\n\n- `ipv6_netmask` (int) - Specifies the IPv6 subnet mask, in bits, for the network adapter. For example, `64` for a `/64` subnet.\n\n<!-- End of code generated from the comments of the NetworkInterface struct in builder/vsphere/clone/step_customize.go; -->\n\n\n#### Global Routing Settings\n\n<!-- Code generated from the comments of the GlobalRoutingSettings struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\nThe settings must match the IP address and subnet mask of at least one `network_interface` for the customization.\n\n<!-- End of code generated from the comments of the GlobalRoutingSettings struct in builder/vsphere/clone/step_customize.go; -->\n\n\n<!-- Code generated from the comments of the GlobalRoutingSettings struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\n- `ipv4_gateway` (string) - Specifies the IPv4 default gateway when using `network_interface` customization.\n\n- `ipv6_gateway` (string) - Specifies the IPv6 default gateway when using `network_interface` customization.\n\n<!-- End of code generated from the comments of the GlobalRoutingSettings struct in builder/vsphere/clone/step_customize.go; -->\n\n\n#### Global DNS Settings\n\n<!-- Code generated from the comments of the GlobalDnsSettings struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\nThe following settings configure DNS globally for Linux guest operating systems.\nFor Windows guest operating systems, this is set for each network interface. Refer to the [network interface](#network_interface) section for additional details.\n\n<!-- End of code generated from the comments of the GlobalDnsSettings struct in builder/vsphere/clone/step_customize.go; -->\n\n\n<!-- Code generated from the comments of the GlobalDnsSettings struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\n- `dns_server_list` ([]string) - Specifies a list of DNS servers to configure on the guest operating system.\n\n- `dns_suffix_list` ([]string) - Specifies a list of DNS search domains to add to the DNS configuration on the guest operating system.\n\n<!-- End of code generated from the comments of the GlobalDnsSettings struct in builder/vsphere/clone/step_customize.go; -->\n\n\n#### Linux Customization Settings\n\n<!-- Code generated from the comments of the LinuxOptions struct in builder/vsphere/clone/step_customize.go; DO NOT EDIT MANUALLY -->\n\n- `domain` (string) - Specifies the domain name for the guest operating system. Used with [host_name](#host_name) to construct the fully qualified domain name (FQDN).\n\n- `host_name` (string) - Specifies the hostname for the guest operating system. Used with [domain](#domain) to construct the fully qualified domain name (FQDN).\n\n- `hw_clock_utc` (boolean) - Specifies whether the hardware clock is set to Coordinated Universal Time (UTC). Defaults to `true`.\n\n- `time_zone` (string) - Specifies the time zone for the guest operating system.\n\n<!-- End of code generated from the comments of the LinuxOptions struct in builder/vsphere/clone/step_customize.go; -->\n\n\n#### Customization Example\n\n**JSON**\n\n```json\n \"customize\": {\n          \"linux_options\": {\n            \"host_name\": \"packer-test\",\n            \"domain\": \"test.internal\"\n          },\n          \"network_interface\": {\n            \"ipv4_address\": \"10.0.0.10\",\n            \"ipv4_netmask\": \"24\"\n          },\n          \"ipv4_gateway\": \"10.0.0.1\",\n          \"dns_server_list\": [\"10.0.0.18\"]\n }\n```\n\n**HCL2**\n\n```hcl\n   customize {\n         linux_options {\n           host_name = \"packer-test\"\n           domain = \"test.internal\"\n         }\n\n         network_interface {\n           ipv4_address = \"10.0.0.10\"\n           ipv4_netmask = \"24\"\n         }\n\n         ipv4_gateway = 10.0.0.1\n         dns_server_list = [\"10.0.0.18\"]\n   }\n```\n\n\n### Boot configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the BootConfig struct in builder/vsphere/common/step_boot_command.go; DO NOT EDIT MANUALLY -->\n\n- `http_ip` (string) - The IP address to use for the HTTP server started to serve the `http_directory`.\n  If unset, Packer will automatically discover and assign an IP.\n\n<!-- End of code generated from the comments of the BootConfig struct in builder/vsphere/common/step_boot_command.go; -->\n\n\n### Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n### Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in builder/vsphere/common/step_add_floppy.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_img_path` (string) - Datastore path to a floppy image that will be mounted to the VM.\n  Example: `[datastore1] ISO/pvscsi-Windows8.flp`.\n\n- `floppy_files` ([]string) - List of local files to be mounted to the VM floppy drive. Can be used to\n  make Debian preseed or RHEL kickstart files available to the VM.\n\n- `floppy_dirs` ([]string) - List of directories to copy files from.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  ```\n\n- `floppy_label` (string) - The label to use for the floppy disk that\n  is attached when the VM is booted. This is most useful for cloud-init,\n  Kickstart or other early initialization tools, which can benefit from labelled floppy disks.\n  By default, the floppy label will be 'packer'.\n\n<!-- End of code generated from the comments of the FloppyConfig struct in builder/vsphere/common/step_add_floppy.go; -->\n\n\n### Connection Configuration\n\n<!-- Code generated from the comments of the ConnectConfig struct in builder/vsphere/common/step_connect.go; DO NOT EDIT MANUALLY -->\n\n- `vcenter_server` (string) - vCenter Server hostname.\n\n- `username` (string) - vSphere username.\n\n- `password` (string) - vSphere password.\n\n- `insecure_connection` (bool) - Do not validate the vCenter Server TLS certificate. Defaults to `false`.\n\n- `datacenter` (string) - vSphere datacenter name. Required if there is more than one datacenter in the vSphere inventory.\n\n<!-- End of code generated from the comments of the ConnectConfig struct in builder/vsphere/common/step_connect.go; -->\n\n\n### Hardware Configuration\n\n<!-- Code generated from the comments of the HardwareConfig struct in builder/vsphere/common/step_hardware.go; DO NOT EDIT MANUALLY -->\n\n- `CPUs` (int32) - Number of CPU cores.\n\n- `cpu_cores` (int32) - Number of CPU cores per socket.\n\n- `CPU_reservation` (int64) - Amount of reserved CPU resources in MHz.\n\n- `CPU_limit` (int64) - Upper limit of available CPU resources in MHz.\n\n- `CPU_hot_plug` (bool) - Enable CPU hot plug setting for virtual machine. Defaults to `false`.\n\n- `RAM` (int64) - Amount of RAM in MB.\n\n- `RAM_reservation` (int64) - Amount of reserved RAM in MB.\n\n- `RAM_reserve_all` (bool) - Reserve all available RAM. Defaults to `false`. Cannot be used together\n  with `RAM_reservation`.\n\n- `RAM_hot_plug` (bool) - Enable RAM hot plug setting for virtual machine. Defaults to `false`.\n\n- `video_ram` (int64) - Amount of video memory in KB. See [vSphere documentation](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-789C3913-1053-4850-A0F0-E29C3D32B6DA.html)\n  for supported maximums. Defaults to 4096 KB.\n\n- `displays` (int32) - Number of video displays. See [vSphere documentation](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-789C3913-1053-4850-A0F0-E29C3D32B6DA.html)\n  for supported maximums. Defaults to 1.\n\n- `vgpu_profile` (string) - vGPU profile for accelerated graphics. See [NVIDIA GRID vGPU documentation](https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/index.html#configure-vmware-vsphere-vm-with-vgpu)\n  for examples of profile names. Defaults to none.\n\n- `NestedHV` (bool) - Enable nested hardware virtualization for VM. Defaults to `false`.\n\n- `firmware` (string) - Set the Firmware for virtual machine. Supported values: `bios`, `efi` or `efi-secure`. Defaults to `bios`.\n\n- `force_bios_setup` (bool) - During the boot, force entry into the BIOS setup screen. Defaults to `false`.\n\n- `vTPM` (bool) - Add virtual TPM device for virtual machine. Defaults to `false`.\n\n- `precision_clock` (string) - Add a precision clock device for virtual machine. Defaults to `none`.\n\n<!-- End of code generated from the comments of the HardwareConfig struct in builder/vsphere/common/step_hardware.go; -->\n\n\n### Location Configuration\n\n<!-- Code generated from the comments of the LocationConfig struct in builder/vsphere/common/config_location.go; DO NOT EDIT MANUALLY -->\n\n- `vm_name` (string) - Name of the virtual machine.\n\n- `folder` (string) - VM folder where the virtual machine is created.\n\n- `cluster` (string) - vSphere cluster where the virtual machine is created. See the\n  [Working With Clusters And Hosts](#working-with-clusters-and-hosts)\n  section above for more details.\n\n- `host` (string) - ESXi host where the virtual machine is created. A full path must be\n  specified if the host is in a folder. For example `folder/host`. See the\n  [Working With Clusters And Hosts](#working-with-clusters-and-hosts)\n  section above for more details.\n\n- `resource_pool` (string) - vSphere resource pool where the virtual machine is created.\n  If this is not specified, the root resource pool associated with the\n  `host` or `cluster` is used.\n  Note that the full path to the resource pool must be provided.\n  For example, a simple resource pool path might resemble `rp-packer` and\n  a nested path might resemble 'rp-packer/rp-linux-images'.\n\n- `datastore` (string) - vSphere datastore where the virtual machine is created.\n  Required if `host` is a cluster, or if `host` has multiple datastores.\n\n- `set_host_for_datastore_uploads` (bool) - Specifies that the host is used for uploading files to the datastore.\n  Defaults to false.\n\n<!-- End of code generated from the comments of the LocationConfig struct in builder/vsphere/common/config_location.go; -->\n\n\n### Run Configuration\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vsphere/common/step_run.go; DO NOT EDIT MANUALLY -->\n\n- `boot_order` (string) - Priority of boot devices. Defaults to `disk,cdrom`\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vsphere/common/step_run.go; -->\n\n\n### Shutdown Configuration\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/vsphere/common/step_shutdown.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - Specify a VM guest shutdown command. This command will be executed using\n  the `communicator`. Otherwise, the VMware Tools are used to gracefully shutdown\n  the VM.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for graceful VM shutdown.\n  Defaults to 5m or five minutes.\n  This will likely need to be modified if the `communicator` is 'none'.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined. If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through a preseed.cfg, a script or the final provisioner.\n  Packer will wait for a default of five minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/vsphere/common/step_shutdown.go; -->\n\n\n### Wait Configuration\n\n<!-- Code generated from the comments of the WaitIpConfig struct in builder/vsphere/common/step_wait_for_ip.go; DO NOT EDIT MANUALLY -->\n\n- `ip_wait_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for VM's IP, similar to 'ssh_timeout'.\n  Defaults to 30m (30 minutes). See the Golang\n  [ParseDuration](https://golang.org/pkg/time/#ParseDuration) documentation\n  for full details.\n\n- `ip_settle_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for VM's IP to settle down, sometimes VM may\n  report incorrect IP initially, then its recommended to set that\n  parameter to apx. 2 minutes. Examples 45s and 10m. Defaults to\n  5s(5 seconds). See the Golang\n  [ParseDuration](https://golang.org/pkg/time/#ParseDuration) documentation\n   for full details.\n\n- `ip_wait_address` (\\*string) - Set this to a CIDR address to cause the service to wait for an address that is contained in\n  this network range. Defaults to \"0.0.0.0/0\" for any ipv4 address. Examples include:\n  \n  * empty string (\"\") - remove all filters\n  * `0:0:0:0:0:0:0:0/0` - allow only ipv6 addresses\n  * `192.168.1.0/24` - only allow ipv4 addresses from 192.168.1.1 to 192.168.1.254\n\n<!-- End of code generated from the comments of the WaitIpConfig struct in builder/vsphere/common/step_wait_for_ip.go; -->\n\n\n### CDRom Configuration\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n<!-- Code generated from the comments of the CDRomConfig struct in builder/vsphere/common/step_add_cdrom.go; DO NOT EDIT MANUALLY -->\n\n- `cdrom_type` (string) - Which controller to use. Example: `sata`. Defaults to `ide`.\n\n- `iso_paths` ([]string) - A list of paths to ISO files in either a datastore or a content library that will be mounted to the VM.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  iso_paths = [\n    \"[nfs] iso/ubuntu-server-amd64.iso\",\n    \"Packer/ubuntu-server-amd64/ubuntu-server-amd64.iso\"\n  ]\n  ```\n  \n  Two ISOs are referenced:\n  1. An ISO in the \"_iso_\" folder of the \"_nfs_\" datastore with the file name of \"_ubuntu-server-amd64.iso_\".\n  2. An ISO in the \"_Packer_\" content library with the item name of \"_ubuntu-server-amd64_\".\n  \n  -> **Note:** All files in a content library have an associated item name.\n  To determine the file name, view the datastore backing the content library or use the `govc` vSphere CLI.\n\n<!-- End of code generated from the comments of the CDRomConfig struct in builder/vsphere/common/step_add_cdrom.go; -->\n\n\n<!-- Code generated from the comments of the RemoveCDRomConfig struct in builder/vsphere/common/step_remove_cdrom.go; DO NOT EDIT MANUALLY -->\n\n- `remove_cdrom` (bool) - Remove CD-ROM devices from template. Defaults to `false`.\n\n<!-- End of code generated from the comments of the RemoveCDRomConfig struct in builder/vsphere/common/step_remove_cdrom.go; -->\n\n\n### Communicator configuration\n\n#### Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n#### Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n- `ssh_keypair_name` (string) - If specified, this is the key that will be used for SSH with the\n  machine. The key must match a key pair name loaded up into the remote.\n  By default, this is blank, and Packer will generate a temporary keypair\n  unless [`ssh_password`](#ssh_password) is used.\n  [`ssh_private_key_file`](#ssh_private_key_file) or\n  [`ssh_agent_auth`](#ssh_agent_auth) must be specified when\n  [`ssh_keypair_name`](#ssh_keypair_name) is utilized.\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n- `ssh_agent_auth` (bool) - If true, the local SSH agent will be used to authenticate connections to\n  the source instance. No temporary keypair will be created, and the\n  values of [`ssh_password`](#ssh_password) and\n  [`ssh_private_key_file`](#ssh_private_key_file) will be ignored. The\n  environment variable `SSH_AUTH_SOCK` must be set for this option to work\n  properly.\n\n\n-> **NOTE:** Packer uses vApp Options to inject ssh public keys to the virtual machine.\nThe [temporary_key_pair_name](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone#temporary_key_pair_name) will only work\nif the template being cloned contains the vApp property `public-keys`.\nIf using [ssh_private_key_file](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone#ssh_private_key_file), provide\nthe public key via [configuration_parameters](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone#configuration_parameters) or\n[vApp Options Configuration](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone#vapp-options-configuration) whenever the `guestinto.userdata`\nis available. See [DataSourceVMware](https://cloudinit.readthedocs.io/en/latest/topics/data-source/vmware.html) in\ncloud-init 21.3 and later for more information.\n\n#### Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n### Export Configuration\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; DO NOT EDIT MANUALLY -->\n\nYou can export an image in Open Virtualization Format (OVF) to the Packer host.\n\nExample usage:\n\nIn JSON:\n```json\n...\n\n\t\"vm_name\": \"example-ubuntu\",\n\n...\n\n\t\"export\": {\n\t  \"force\": true,\n\t  \"output_directory\": \"./output-artifacts\"\n\t},\n\n```\nIn HCL2:\n```hcl\n\n\t# ...\n\tvm_name = \"example-ubuntu\"\n\t# ...\n\texport {\n\t  force = true\n\t  output_directory = \"./output-artifacts\"\n\t}\n\n```\nThe above configuration would create the following files:\n\n```text\n./output-artifacts/example-ubuntu-disk-0.vmdk\n./output-artifacts/example-ubuntu.mf\n./output-artifacts/example-ubuntu.ovf\n```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; -->\n\n\n#### Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; DO NOT EDIT MANUALLY -->\n\n- `name` (string) - Name of the exported image in Open Virtualization Format (OVF).\n  The name of the virtual machine with the `.ovf` extension is used if this option is not specified.\n\n- `force` (bool) - Forces the export to overwrite existing files. Defaults to false.\n  If set to false, the export will fail if the files already exists.\n\n- `image_files` (bool) - Include additional image files that are that are associated with the virtual machine. Defaults to false.\n  For example, `.nvram` and `.log` files.\n\n- `manifest` (string) - Generate a manifest file with the specified hash algorithm. Defaults to `sha256`.\n  Available options include `none`, `sha1`, `sha256`, and `sha512`. Use `none` for no manifest.\n\n- `options` ([]string) - Advanced image export options. Options can include:\n  * mac - MAC address is exported for each Ethernet device.\n  * uuid - UUID is exported for the virtual machine.\n  * extraconfig - Extra configuration options are exported for the virtual machine.\n  * nodevicesubtypes - Resource subtypes for CD/DVD drives, floppy drives, and serial and parallel ports are not exported.\n  \n  For example, adding the following export config option outputs the MAC addresses for each Ethernet device in the OVF descriptor:\n  \n  In JSON:\n  ```json\n  ...\n    \"export\": {\n      \"options\": [\"mac\"]\n    },\n  ```\n  In HCL2:\n  ```hcl\n  ...\n    export {\n      options = [\"mac\"]\n    }\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; -->\n\n\n#### Output Configuration:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/vsphere/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This setting specifies the directory that\n  artifacts from the build, such as the virtual machine files and disks,\n  will be output to. The path to the directory may be relative or\n  absolute. If relative, the path is relative to the working directory\n  packer is executed from. This directory must not exist or, if\n  created, must be empty prior to running the builder. By default this is\n  \"output-BUILDNAME\" where \"BUILDNAME\" is the name of the build.\n\n- `directory_permission` (os.FileMode) - The permissions to apply to the \"output_directory\", and to any parent\n  directories that get created for output_directory.  By default this is\n  \"0750\". You should express the permission as quoted string with a\n  leading zero such as \"0755\" in JSON file, because JSON does not support\n  octal value. In Unix-like OS, the actual permission may differ from\n  this value because of umask.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/vsphere/common/output_config.go; -->\n\n\n### Content Library Import Configuration\n\n<!-- Code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; DO NOT EDIT MANUALLY -->\n\nWith this configuration Packer creates a library item in a content library whose content is a VM template\nor an OVF template created from the just built VM.\nThe template is stored in a existing or newly created library item.\n\n<!-- End of code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; -->\n\n\n<!-- Code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; DO NOT EDIT MANUALLY -->\n\n- `library` (string) - Name of the library in which the new library item containing the template should be created/updated.\n  The Content Library should be of type Local to allow deploying virtual machines.\n\n- `name` (string) - Name of the library item that will be created or updated.\n  For VM templates, the name of the item should be different from [vm_name](#vm_name) and\n  the default is [vm_name](#vm_name) + timestamp when not set. VM templates will be always imported to a new library item.\n  For OVF templates, the name defaults to [vm_name](#vm_name) when not set, and if an item with the same name already\n  exists it will be then updated with the new OVF template, otherwise a new item will be created.\n  \n  ~> **Note**: It's not possible to update existing library items with a new VM template. If updating an existing library\n  item is necessary, use an OVF template instead by setting the [ovf](#ovf) option as `true`.\n\n- `description` (string) - Description of the library item that will be created.\n  Defaults to \"Packer imported [vm_name](#vm_name) VM template\".\n\n- `cluster` (string) - Cluster onto which the virtual machine template should be placed.\n  If cluster and resource_pool are both specified, resource_pool must belong to cluster.\n  If cluster and host are both specified, host must be a member of cluster.\n  This option is not used when importing OVF templates.\n  Defaults to [cluster](#cluster).\n\n- `folder` (string) - Virtual machine folder into which the virtual machine template should be placed.\n  This option is not used when importing OVF templates.\n  Defaults to the same folder as the source virtual machine.\n\n- `host` (string) - Host onto which the virtual machine template should be placed.\n  If host and resource_pool are both specified, resource_pool must belong to host.\n  If host and cluster are both specified, host must be a member of cluster.\n  This option is not used when importing OVF templates.\n  Defaults to [host](#host).\n\n- `resource_pool` (string) - Resource pool into which the virtual machine template should be placed.\n  Defaults to [resource_pool](#resource_pool). if [resource_pool](#resource_pool) is also unset,\n  the system will attempt to choose a suitable resource pool for the virtual machine template.\n\n- `datastore` (string) - The datastore for the virtual machine template's configuration and log files.\n  This option is not used when importing OVF templates.\n  Defaults to the storage backing associated with the library specified by library.\n\n- `destroy` (bool) - If set to true, the VM will be destroyed after deploying the template to the Content Library.\n  Defaults to `false`.\n\n- `ovf` (bool) - When set to true, Packer will import and OVF template to the content library item. Defaults to `false`.\n\n- `skip_import` (bool) - When set to true, the VM won't be imported to the content library item. Useful for setting to `true` during a build test stage. Defaults to `false`.\n\n- `ovf_flags` ([]string) - Flags to use for OVF package creation. The supported flags can be obtained using ExportFlag.list. If unset, no flags will be used. Known values: EXTRA_CONFIG, PRESERVE_MAC\n\n<!-- End of code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; -->\n\n\nMinimal example of usage:\n\n**JSON**\n\n```json\n\t\"content_library_destination\" : {\n\t    \"library\": \"Packer Library Test\"\n\t}\n```\n\n**HCL2**\n\n```hcl\n\tcontent_library_destination {\n\t\t\tlibrary = \"Packer Library Test\"\n\t}\n```\n\n\n## Working With Clusters And Hosts\n\n### Standalone Hosts\n\nOnly use the `host` option. Optionally specify a `resource_pool`:\n\n**JSON**\n\n```json\n\"host\": \"esxi-01.example.com\",\n\"resource_pool\": \"pool1\",\n```\n\n**HCL2**\n\n```hcl\nhost = \"esxi-01.example.com\"\nresource_pool = \"pool1\"\n```\n\n\n### Clusters Without DRS\n\nUse the `cluster` and `host`parameters:\n\n**JSON**\n\n```json\n\"cluster\": \"cluster1\",\n\"host\": \"esxi-02.example.com\",\n```\n\n**HCL2**\n\n```hcl\ncluster = \"cluster1\"\nhost = \"esxi-02.example.com\"\n```\n\n\n### Clusters With DRS\n\nOnly use the `cluster` option. Optionally specify a `resource_pool`:\n\n**JSON**\n\n```json\n\"cluster\": \"cluster2\",\n\"resource_pool\": \"pool1\",\n```\n\n**HCL2**\n\n```hcl\ncluster = \"cluster2\"\nresource_pool = \"pool1\"\n```\n\n\n## Required vSphere Privileges\n\n- VM folder (this object and children):\n  ```text\n  Virtual machine -> Inventory\n  Virtual machine -> Configuration\n  Virtual machine -> Interaction\n  Virtual machine -> Snapshot management\n  Virtual machine -> Provisioning\n  ```\n  Individual privileges are listed in https://github.com/jetbrains-infra/packer-builder-vsphere/issues/97#issuecomment-436063235.\n- Resource pool, host, or cluster (this object):\n  ```text\n  Resource -> Assign virtual machine to resource pool\n  ```\n- Host in clusters without DRS (this object):\n  ```text\n  Read-only\n  ```\n- Datastore (this object):\n  ```text\n  Datastore -> Allocate space\n  Datastore -> Browse datastore\n  Datastore -> Low level file operations\n  ```\n- Network (this object):\n  ```text\n  Network -> Assign network\n  ```\n- Distributed switch (this object):\n  ```text\n  Read-only\n  ```\n\nFor floppy image upload:\n\n- Datacenter (this object):\n  ```text\n  Datastore -> Low level file operations\n  ```\n- Host (this object):\n  ```text\n  Host -> Configuration -> System Management\n  ```\n","created_at":"2024-03-07T20:36:33.919Z","updated_at":"2024-03-07T20:36:33.919Z","name":"vSphere Clone","slug":"vsphere-clone","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"dce33419-418f-4d33-8add-5cd888fdf482","integration_release_id":"fc4ff907-7d36-426e-a167-df93b93f00f5","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vsphere-iso`\nArtifact BuilderId: `jetbrains.vsphere`\n\nThis builder uses the vSphere API, and creates virtual machines remotely. It\nstarts from an ISO file and creates new VMs from scratch.\n\n- VMware Player is not required.\n- It uses the official vCenter Server API, and does not require ESXi host [modification](/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso#building-on-a-remote-vsphere-hypervisor)\n- The builder supports versions following the VMware Product Lifecycle Matrix\n  from General Availability to End of General Support. Builds on versions that\n  are end of support may work, but configuration options may throw errors if\n  they do not exist in the vSphere API for those versions.\n\n## Examples\n\nSee example templates in the [examples folder](https://github.com/hashicorp/packer-plugin-vsphere/tree/main/builder/vsphere/examples/).\n\n# Configuration Reference\n\nThere are many configuration options available for this builder. In addition to\nthe items listed here, you will want to look at the general configuration\nreferences for [HTTP](#http-directory-configuration),\n[Floppy](#floppy-configuration),\n[Boot](#boot-configuration),\n[Hardware](#hardware-configuration),\n[Output](#output-configuration),\n[Run](#run-configuration),\n[Shutdown](#shutdown-configuration),\n[Communicator](#communicator-configuration),\n[Export](#export-configuration),\nconfiguration references, which are\nnecessary for this build to succeed and can be found further down the page.\n\n<!-- Code generated from the comments of the Config struct in builder/vsphere/iso/config.go; DO NOT EDIT MANUALLY -->\n\n- `create_snapshot` (bool) - Specifies to create a snapshot of the virtual machine to use as a base for linked clones.\n  Defaults to `false`.\n\n- `snapshot_name` (string) - Specifies the name of the snapshot when `create_snapshot` is `true`.\n  Defaults to `Created By Packer`.\n\n- `convert_to_template` (bool) - Specifies to convert the cloned virtual machine to a template after the build is complete.\n  Defaults to `false`.\n  If set to `true`, the virtual machine can not be imported to a content library.\n\n- `export` (\\*common.ExportConfig) - Specifies the configuration for exporting the virtual machine to an OVF.\n  The virtual machine is not exported if [export configuration](#export-configuration) is not specified.\n\n- `content_library_destination` (\\*common.ContentLibraryDestinationConfig) - Specifies the configuration for importing a VM template or OVF template to a content library.\n  The template will not be imported if no [content library import configuration](#content-library-import-configuration) is specified.\n  If set, `convert_to_template` must be set to `false`.\n\n<!-- End of code generated from the comments of the Config struct in builder/vsphere/iso/config.go; -->\n\n\n## Boot Configuration\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\nThe boot configuration is very important: `boot_command` specifies the keys\nto type when the virtual machine is first booted in order to start the OS\ninstaller. This command is typed after boot_wait, which gives the virtual\nmachine some time to actually load.\n\nThe boot_command is an array of strings. The strings are all typed in\nsequence. It is an array only to improve readability within the template.\n\nThere are a set of special keys available. If these are in your boot\ncommand, they will be replaced by the proper key:\n\n-   `<bs>` - Backspace\n\n-   `<del>` - Delete\n\n-   `<enter> <return>` - Simulates an actual \"enter\" or \"return\" keypress.\n\n-   `<esc>` - Simulates pressing the escape key.\n\n-   `<tab>` - Simulates pressing the tab key.\n\n-   `<f1> - <f12>` - Simulates pressing a function key.\n\n-   `<up> <down> <left> <right>` - Simulates pressing an arrow key.\n\n-   `<spacebar>` - Simulates pressing the spacebar.\n\n-   `<insert>` - Simulates pressing the insert key.\n\n-   `<home> <end>` - Simulates pressing the home and end keys.\n\n  - `<pageUp> <pageDown>` - Simulates pressing the page up and page down\n    keys.\n\n-   `<menu>` - Simulates pressing the Menu key.\n\n-   `<leftAlt> <rightAlt>` - Simulates pressing the alt key.\n\n-   `<leftCtrl> <rightCtrl>` - Simulates pressing the ctrl key.\n\n-   `<leftShift> <rightShift>` - Simulates pressing the shift key.\n\n-   `<leftSuper> <rightSuper>` - Simulates pressing the ⌘ or Windows key.\n\n  - `<wait> <wait5> <wait10>` - Adds a 1, 5 or 10 second pause before\n    sending any additional keys. This is useful if you have to generally\n    wait for the UI to update before typing more.\n\n  - `<waitXX>` - Add an arbitrary pause before sending any additional keys.\n    The format of `XX` is a sequence of positive decimal numbers, each with\n    optional fraction and a unit suffix, such as `300ms`, `1.5h` or `2h45m`.\n    Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. For\n    example `<wait10m>` or `<wait1m20s>`.\n\n  - `<XXXOn> <XXXOff>` - Any printable keyboard character, and of these\n    \"special\" expressions, with the exception of the `<wait>` types, can\n    also be toggled on or off. For example, to simulate ctrl+c, use\n    `<leftCtrlOn>c<leftCtrlOff>`. Be sure to release them, otherwise they\n    will be held down until the machine reboots. To hold the `c` key down,\n    you would use `<cOn>`. Likewise, `<cOff>` to release.\n\n  - `{{ .HTTPIP }} {{ .HTTPPort }}` - The IP and port, respectively of an\n    HTTP server that is started serving the directory specified by the\n    `http_directory` configuration parameter. If `http_directory` isn't\n    specified, these will be blank!\n\n-   `{{ .Name }}` - The name of the VM.\n\nExample boot command. This is actually a working boot command used to start an\nCentOS 6.4 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t   \"<tab><wait>\",\n\t   \" ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos6-ks.cfg<enter>\"\n\t]\n\n```\n\nThe example shown below is a working boot command used to start an Ubuntu\n12.04 installer:\n\nIn JSON:\n\n```json\n\"boot_command\": [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nIn HCL2:\n\n```hcl\nboot_command = [\n\n\t\"<esc><esc><enter><wait>\",\n\t\"/install/vmlinuz noapic \",\n\t\"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg \",\n\t\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us \",\n\t\"hostname={{ .Name }} \",\n\t\"fb=false debconf/frontend=noninteractive \",\n\t\"keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA \",\n\t\"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n\t\"initrd=/install/initrd.gz -- <enter>\"\n\n]\n```\n\nFor more examples of various boot commands, see the sample projects from our\n[community templates page](https://packer.io/community-tools#templates).\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\nWe send each character to the VM with a default delay of 100ms between groups.\nThe delay alleviates possible issues with latency and CPU\ncontention. If you notice missing keys, you can tune this delay by specifying\n\"boot_keygroup_interval\" in your Packer template, for example:\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vsphere-iso\",\n      \"boot_keygroup_interval\": \"500ms\"\n      ...\n    }\n  ]\n}\n```\n\n**HCL2**\n\n```hcl\nsource \"vsphere-iso\" \"example\" {\n    boot_keygroup_interval = \"500ms\"\n    # ...\n}\n```\n\n\n## Optional:\n\n<!-- Code generated from the comments of the BootConfig struct in bootcommand/config.go; DO NOT EDIT MANUALLY -->\n\n- `boot_keygroup_interval` (duration string | ex: \"1h5m2s\") - Time to wait after sending a group of key pressses. The value of this\n  should be a duration. Examples are `5s` and `1m30s` which will cause\n  Packer to wait five seconds and one minute 30 seconds, respectively. If\n  this isn't specified, a sensible default value is picked depending on\n  the builder type.\n\n- `boot_wait` (duration string | ex: \"1h5m2s\") - The time to wait after booting the initial virtual machine before typing\n  the `boot_command`. The value of this should be a duration. Examples are\n  `5s` and `1m30s` which will cause Packer to wait five seconds and one\n  minute 30 seconds, respectively. If this isn't specified, the default is\n  `10s` or 10 seconds. To set boot_wait to 0s, use a negative number, such\n  as \"-1s\"\n\n- `boot_command` ([]string) - This is an array of commands to type when the virtual machine is first\n  booted. The goal of these commands should be to type just enough to\n  initialize the operating system installer. Special keys can be typed as\n  well, and are covered in the section below on the boot command. If this\n  is not specified, it is assumed the installer will start itself.\n\n<!-- End of code generated from the comments of the BootConfig struct in bootcommand/config.go; -->\n\n\n<!-- Code generated from the comments of the BootConfig struct in builder/vsphere/common/step_boot_command.go; DO NOT EDIT MANUALLY -->\n\n- `http_ip` (string) - The IP address to use for the HTTP server started to serve the `http_directory`.\n  If unset, Packer will automatically discover and assign an IP.\n\n<!-- End of code generated from the comments of the BootConfig struct in builder/vsphere/common/step_boot_command.go; -->\n\n\n## Http directory configuration\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\nPacker will create an http server serving `http_directory` when it is set, a\nrandom free port will be selected and the architecture of the directory\nreferenced will be available in your builder.\n\nExample usage from a builder:\n\n```\nwget http://{{ .HTTPIP }}:{{ .HTTPPort }}/foo/bar/preseed.cfg\n```\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n## Optional:\n\n<!-- Code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; DO NOT EDIT MANUALLY -->\n\n- `http_directory` (string) - Path to a directory to serve using an HTTP server. The files in this\n  directory will be available over HTTP that will be requestable from the\n  virtual machine. This is useful for hosting kickstart files and so on.\n  By default this is an empty string, which means no HTTP server will be\n  started. The address and port of the HTTP server will be available as\n  variables in `boot_command`. This is covered in more detail below.\n\n- `http_content` (map[string]string) - Key/Values to serve using an HTTP server. `http_content` works like and\n  conflicts with `http_directory`. The keys represent the paths and the\n  values contents, the keys must start with a slash, ex: `/path/to/file`.\n  `http_content` is useful for hosting kickstart files and so on. By\n  default this is empty, which means no HTTP server will be started. The\n  address and port of the HTTP server will be available as variables in\n  `boot_command`. This is covered in more detail below.\n  Example:\n  ```hcl\n    http_content = {\n      \"/a/b\"     = file(\"http/b\")\n      \"/foo/bar\" = templatefile(\"${path.root}/preseed.cfg\", { packages = [\"nginx\"] })\n    }\n  ```\n\n- `http_port_min` (int) - These are the minimum and maximum port to use for the HTTP server\n  started to serve the `http_directory`. Because Packer often runs in\n  parallel, Packer will choose a randomly available port in this range to\n  run the HTTP server. If you want to force the HTTP server to be on one\n  port, make this minimum and maximum port the same. By default the values\n  are `8000` and `9000`, respectively.\n\n- `http_port_max` (int) - HTTP Port Max\n\n- `http_bind_address` (string) - This is the bind address for the HTTP server. Defaults to 0.0.0.0 so that\n  it will work with any network interface.\n\n<!-- End of code generated from the comments of the HTTPConfig struct in multistep/commonsteps/http_config.go; -->\n\n\n## Floppy configuration\n\n<!-- Code generated from the comments of the FloppyConfig struct in builder/vsphere/common/step_add_floppy.go; DO NOT EDIT MANUALLY -->\n\n- `floppy_img_path` (string) - Datastore path to a floppy image that will be mounted to the VM.\n  Example: `[datastore1] ISO/pvscsi-Windows8.flp`.\n\n- `floppy_files` ([]string) - List of local files to be mounted to the VM floppy drive. Can be used to\n  make Debian preseed or RHEL kickstart files available to the VM.\n\n- `floppy_dirs` ([]string) - List of directories to copy files from.\n\n- `floppy_content` (map[string]string) - Key/Values to add to the floppy disk. The keys represent the paths, and\n  the values contents. It can be used alongside `floppy_files` or\n  `floppy_dirs`, which is useful to add large files without loading them\n  into memory. If any paths are specified by both, the contents in\n  `floppy_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  floppy_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  ```\n\n- `floppy_label` (string) - The label to use for the floppy disk that\n  is attached when the VM is booted. This is most useful for cloud-init,\n  Kickstart or other early initialization tools, which can benefit from labelled floppy disks.\n  By default, the floppy label will be 'packer'.\n\n<!-- End of code generated from the comments of the FloppyConfig struct in builder/vsphere/common/step_add_floppy.go; -->\n\n\n## Connection Configuration\n\n<!-- Code generated from the comments of the ConnectConfig struct in builder/vsphere/common/step_connect.go; DO NOT EDIT MANUALLY -->\n\n- `vcenter_server` (string) - vCenter Server hostname.\n\n- `username` (string) - vSphere username.\n\n- `password` (string) - vSphere password.\n\n- `insecure_connection` (bool) - Do not validate the vCenter Server TLS certificate. Defaults to `false`.\n\n- `datacenter` (string) - vSphere datacenter name. Required if there is more than one datacenter in the vSphere inventory.\n\n<!-- End of code generated from the comments of the ConnectConfig struct in builder/vsphere/common/step_connect.go; -->\n\n\n## Hardware Configuration\n\n<!-- Code generated from the comments of the HardwareConfig struct in builder/vsphere/common/step_hardware.go; DO NOT EDIT MANUALLY -->\n\n- `CPUs` (int32) - Number of CPU cores.\n\n- `cpu_cores` (int32) - Number of CPU cores per socket.\n\n- `CPU_reservation` (int64) - Amount of reserved CPU resources in MHz.\n\n- `CPU_limit` (int64) - Upper limit of available CPU resources in MHz.\n\n- `CPU_hot_plug` (bool) - Enable CPU hot plug setting for virtual machine. Defaults to `false`.\n\n- `RAM` (int64) - Amount of RAM in MB.\n\n- `RAM_reservation` (int64) - Amount of reserved RAM in MB.\n\n- `RAM_reserve_all` (bool) - Reserve all available RAM. Defaults to `false`. Cannot be used together\n  with `RAM_reservation`.\n\n- `RAM_hot_plug` (bool) - Enable RAM hot plug setting for virtual machine. Defaults to `false`.\n\n- `video_ram` (int64) - Amount of video memory in KB. See [vSphere documentation](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-789C3913-1053-4850-A0F0-E29C3D32B6DA.html)\n  for supported maximums. Defaults to 4096 KB.\n\n- `displays` (int32) - Number of video displays. See [vSphere documentation](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-789C3913-1053-4850-A0F0-E29C3D32B6DA.html)\n  for supported maximums. Defaults to 1.\n\n- `vgpu_profile` (string) - vGPU profile for accelerated graphics. See [NVIDIA GRID vGPU documentation](https://docs.nvidia.com/grid/latest/grid-vgpu-user-guide/index.html#configure-vmware-vsphere-vm-with-vgpu)\n  for examples of profile names. Defaults to none.\n\n- `NestedHV` (bool) - Enable nested hardware virtualization for VM. Defaults to `false`.\n\n- `firmware` (string) - Set the Firmware for virtual machine. Supported values: `bios`, `efi` or `efi-secure`. Defaults to `bios`.\n\n- `force_bios_setup` (bool) - During the boot, force entry into the BIOS setup screen. Defaults to `false`.\n\n- `vTPM` (bool) - Add virtual TPM device for virtual machine. Defaults to `false`.\n\n- `precision_clock` (string) - Add a precision clock device for virtual machine. Defaults to `none`.\n\n<!-- End of code generated from the comments of the HardwareConfig struct in builder/vsphere/common/step_hardware.go; -->\n\n\n## Location Configuration\n\n<!-- Code generated from the comments of the LocationConfig struct in builder/vsphere/common/config_location.go; DO NOT EDIT MANUALLY -->\n\n- `vm_name` (string) - Name of the virtual machine.\n\n- `folder` (string) - VM folder where the virtual machine is created.\n\n- `cluster` (string) - vSphere cluster where the virtual machine is created. See the\n  [Working With Clusters And Hosts](#working-with-clusters-and-hosts)\n  section above for more details.\n\n- `host` (string) - ESXi host where the virtual machine is created. A full path must be\n  specified if the host is in a folder. For example `folder/host`. See the\n  [Working With Clusters And Hosts](#working-with-clusters-and-hosts)\n  section above for more details.\n\n- `resource_pool` (string) - vSphere resource pool where the virtual machine is created.\n  If this is not specified, the root resource pool associated with the\n  `host` or `cluster` is used.\n  Note that the full path to the resource pool must be provided.\n  For example, a simple resource pool path might resemble `rp-packer` and\n  a nested path might resemble 'rp-packer/rp-linux-images'.\n\n- `datastore` (string) - vSphere datastore where the virtual machine is created.\n  Required if `host` is a cluster, or if `host` has multiple datastores.\n\n- `set_host_for_datastore_uploads` (bool) - Specifies that the host is used for uploading files to the datastore.\n  Defaults to false.\n\n<!-- End of code generated from the comments of the LocationConfig struct in builder/vsphere/common/config_location.go; -->\n\n\n## Run Configuration\n\n<!-- Code generated from the comments of the RunConfig struct in builder/vsphere/common/step_run.go; DO NOT EDIT MANUALLY -->\n\n- `boot_order` (string) - Priority of boot devices. Defaults to `disk,cdrom`\n\n<!-- End of code generated from the comments of the RunConfig struct in builder/vsphere/common/step_run.go; -->\n\n\n## Shutdown Configuration\n\n<!-- Code generated from the comments of the ShutdownConfig struct in builder/vsphere/common/step_shutdown.go; DO NOT EDIT MANUALLY -->\n\n- `shutdown_command` (string) - Specify a VM guest shutdown command. This command will be executed using\n  the `communicator`. Otherwise, the VMware Tools are used to gracefully shutdown\n  the VM.\n\n- `shutdown_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for graceful VM shutdown.\n  Defaults to 5m or five minutes.\n  This will likely need to be modified if the `communicator` is 'none'.\n\n- `disable_shutdown` (bool) - Packer normally halts the virtual machine after all provisioners have\n  run when no `shutdown_command` is defined. If this is set to `true`, Packer\n  *will not* halt the virtual machine but will assume that you will send the stop\n  signal yourself through a preseed.cfg, a script or the final provisioner.\n  Packer will wait for a default of five minutes until the virtual machine is shutdown.\n  The timeout can be changed using `shutdown_timeout` option.\n\n<!-- End of code generated from the comments of the ShutdownConfig struct in builder/vsphere/common/step_shutdown.go; -->\n\n\n## Wait Configuration\n\n<!-- Code generated from the comments of the WaitIpConfig struct in builder/vsphere/common/step_wait_for_ip.go; DO NOT EDIT MANUALLY -->\n\n- `ip_wait_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for VM's IP, similar to 'ssh_timeout'.\n  Defaults to 30m (30 minutes). See the Golang\n  [ParseDuration](https://golang.org/pkg/time/#ParseDuration) documentation\n  for full details.\n\n- `ip_settle_timeout` (duration string | ex: \"1h5m2s\") - Amount of time to wait for VM's IP to settle down, sometimes VM may\n  report incorrect IP initially, then its recommended to set that\n  parameter to apx. 2 minutes. Examples 45s and 10m. Defaults to\n  5s(5 seconds). See the Golang\n  [ParseDuration](https://golang.org/pkg/time/#ParseDuration) documentation\n   for full details.\n\n- `ip_wait_address` (\\*string) - Set this to a CIDR address to cause the service to wait for an address that is contained in\n  this network range. Defaults to \"0.0.0.0/0\" for any ipv4 address. Examples include:\n  \n  * empty string (\"\") - remove all filters\n  * `0:0:0:0:0:0:0:0/0` - allow only ipv6 addresses\n  * `192.168.1.0/24` - only allow ipv4 addresses from 192.168.1.1 to 192.168.1.254\n\n<!-- End of code generated from the comments of the WaitIpConfig struct in builder/vsphere/common/step_wait_for_ip.go; -->\n\n\n## ISO Configuration\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\nBy default, Packer will symlink, download or copy image files to the Packer\ncache into a \"`hash($iso_url+$iso_checksum).$iso_target_extension`\" file.\nPacker uses [hashicorp/go-getter](https://github.com/hashicorp/go-getter) in\nfile mode in order to perform a download.\n\ngo-getter supports the following protocols:\n\n* Local files\n* Git\n* Mercurial\n* HTTP\n* Amazon S3\n\nExamples:\ngo-getter can guess the checksum type based on `iso_checksum` length, and it is\nalso possible to specify the checksum type.\n\nIn JSON:\n\n```json\n\n\t\"iso_checksum\": \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file://./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```json\n\n\t\"iso_checksum\": \"file:./shasums.txt\",\n\t\"iso_url\": \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\nIn HCL2:\n\n```hcl\n\n\tiso_checksum = \"946a6077af6f5f95a51f82fdc44051c7aa19f9cfc5f737954845a6050543d7c2\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:ubuntu.org/..../ubuntu-14.04.1-server-amd64.iso.sum\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file://./shasums.txt\"\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n```hcl\n\n\tiso_checksum = \"file:./shasums.txt\",\n\tiso_url = \"ubuntu.org/.../ubuntu-14.04.1-server-amd64.iso\"\n\n```\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n## Required:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_checksum` (string) - The checksum for the ISO file or virtual hard drive file. The type of\n  the checksum is specified within the checksum field as a prefix, ex:\n  \"md5:{$checksum}\". The type of the checksum can also be omitted and\n  Packer will try to infer it based on string length. Valid values are\n  \"none\", \"{$checksum}\", \"md5:{$checksum}\", \"sha1:{$checksum}\",\n  \"sha256:{$checksum}\", \"sha512:{$checksum}\" or \"file:{$path}\". Here is a\n  list of valid checksum values:\n   * md5:090992ba9fd140077b0661cb75f7ce13\n   * 090992ba9fd140077b0661cb75f7ce13\n   * sha1:ebfb681885ddf1234c18094a45bbeafd91467911\n   * ebfb681885ddf1234c18094a45bbeafd91467911\n   * sha256:ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * ed363350696a726b7932db864dda019bd2017365c9e299627830f06954643f93\n   * file:http://releases.ubuntu.com/20.04/SHA256SUMS\n   * file:file://./local/path/file.sum\n   * file:./local/path/file.sum\n   * none\n  Although the checksum will not be verified when it is set to \"none\",\n  this is not recommended since these files can be very large and\n  corruption does happen from time to time.\n\n- `iso_url` (string) - A URL to the ISO containing the installation image or virtual hard drive\n  (VHD or VHDX) file to clone.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n## Optional:\n\n<!-- Code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `iso_urls` ([]string) - Multiple URLs for the ISO to download. Packer will try these in order.\n  If anything goes wrong attempting to download or while downloading a\n  single URL, it will move on to the next. All URLs must point to the same\n  file (same checksum). By default this is empty and `iso_url` is used.\n  Only one of `iso_url` or `iso_urls` can be specified.\n\n- `iso_target_path` (string) - The path where the iso should be saved after download. By default will\n  go in the packer cache, with a hash of the original filename and\n  checksum as its name.\n\n- `iso_target_extension` (string) - The extension of the iso file after download. This defaults to `iso`.\n\n<!-- End of code generated from the comments of the ISOConfig struct in multistep/commonsteps/iso_config.go; -->\n\n\n## CDRom Configuration\n\nEach iso defined in the CDRom Configuration adds a new drive. If the \"iso_url\" is defined in\naddition to the \"iso_paths\", the \"iso_url\" is added to the VM first. This keeps the \"iso_url\" first in\nthe boot order by default allowing the boot iso being defined by the iso_url and the vmware tools iso added\nfrom the datastore. Example:\n\n**JSON**\n\n```json\n\"iso_urls\": [\n  \"win10.iso\",\n  \"http://example.org/isos/win10.iso\"\n],\n\"iso_paths\": [\n    \"[] /usr/lib/vmware/isoimages/windows.iso\"\n],\n```\n\n**HCL2**\n\n```hcl\niso_urls = [\n  \"win10.iso\",\n  \"http://example.org/isos/win10.iso\"\n]\n\niso_paths = [\n    \"[] /usr/lib/vmware/isoimages/windows.iso\"\n]\n```\n\n\n<!-- Code generated from the comments of the CDRomConfig struct in builder/vsphere/common/step_add_cdrom.go; DO NOT EDIT MANUALLY -->\n\n- `cdrom_type` (string) - Which controller to use. Example: `sata`. Defaults to `ide`.\n\n- `iso_paths` ([]string) - A list of paths to ISO files in either a datastore or a content library that will be mounted to the VM.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  iso_paths = [\n    \"[nfs] iso/ubuntu-server-amd64.iso\",\n    \"Packer/ubuntu-server-amd64/ubuntu-server-amd64.iso\"\n  ]\n  ```\n  \n  Two ISOs are referenced:\n  1. An ISO in the \"_iso_\" folder of the \"_nfs_\" datastore with the file name of \"_ubuntu-server-amd64.iso_\".\n  2. An ISO in the \"_Packer_\" content library with the item name of \"_ubuntu-server-amd64_\".\n  \n  -> **Note:** All files in a content library have an associated item name.\n  To determine the file name, view the datastore backing the content library or use the `govc` vSphere CLI.\n\n<!-- End of code generated from the comments of the CDRomConfig struct in builder/vsphere/common/step_add_cdrom.go; -->\n\n\n<!-- Code generated from the comments of the RemoveCDRomConfig struct in builder/vsphere/common/step_remove_cdrom.go; DO NOT EDIT MANUALLY -->\n\n- `remove_cdrom` (bool) - Remove CD-ROM devices from template. Defaults to `false`.\n\n<!-- End of code generated from the comments of the RemoveCDRomConfig struct in builder/vsphere/common/step_remove_cdrom.go; -->\n\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\nAn iso (CD) containing custom files can be made available for your build.\n\nBy default, no extra CD will be attached. All files listed in this setting\nget placed into the root directory of the CD and the CD is attached as the\nsecond CD device.\n\nThis config exists to work around modern operating systems that have no\nway to mount floppy disks, which was our previous go-to for adding files at\nboot time.\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n## Optional:\n\n<!-- Code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; DO NOT EDIT MANUALLY -->\n\n- `cd_files` ([]string) - A list of files to place onto a CD that is attached when the VM is\n  booted. This can include either files or directories; any directories\n  will be copied onto the CD recursively, preserving directory structure\n  hierarchy. Symlinks will have the link's target copied into the directory\n  tree on the CD where the symlink was. File globbing is allowed.\n  \n  Usage example (JSON):\n  \n  ```json\n  \"cd_files\": [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"],\n  \"cd_label\": \"cidata\",\n  ```\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"./somedirectory/meta-data\", \"./somedirectory/user-data\"]\n  cd_label = \"cidata\"\n  ```\n  \n  The above will create a CD with two files, user-data and meta-data in the\n  CD root. This specific example is how you would create a CD that can be\n  used for an Ubuntu 20.04 autoinstall.\n  \n  Since globbing is also supported,\n  \n  ```hcl\n  cd_files = [\"./somedirectory/*\"]\n  cd_label = \"cidata\"\n  ```\n  \n  Would also be an acceptable way to define the above cd. The difference\n  between providing the directory with or without the glob is whether the\n  directory itself or its contents will be at the CD root.\n  \n  Use of this option assumes that you have a command line tool installed\n  that can handle the iso creation. Packer will use one of the following\n  tools:\n  \n    * xorriso\n    * mkisofs\n    * hdiutil (normally found in macOS)\n    * oscdimg (normally found in Windows as part of the Windows ADK)\n\n- `cd_content` (map[string]string) - Key/Values to add to the CD. The keys represent the paths, and the values\n  contents. It can be used alongside `cd_files`, which is useful to add large\n  files without loading them into memory. If any paths are specified by both,\n  the contents in `cd_content` will take precedence.\n  \n  Usage example (HCL):\n  \n  ```hcl\n  cd_files = [\"vendor-data\"]\n  cd_content = {\n    \"meta-data\" = jsonencode(local.instance_data)\n    \"user-data\" = templatefile(\"user-data\", { packages = [\"nginx\"] })\n  }\n  cd_label = \"cidata\"\n  ```\n\n- `cd_label` (string) - CD Label\n\n<!-- End of code generated from the comments of the CDConfig struct in multistep/commonsteps/extra_iso_config.go; -->\n\n\n## Create Configuration\n\n<!-- Code generated from the comments of the CreateConfig struct in builder/vsphere/iso/step_create.go; DO NOT EDIT MANUALLY -->\n\n- `vm_version` (uint) - Specifies the virtual machine hardware version. Defaults to the most current virtual machine\n  hardware version supported by the ESXi host.\n  Refer to [VMware KB article 1003746](https://kb.vmware.com/s/article/1003746) for the list\n  of supported virtual machine hardware versions.\n\n- `guest_os_type` (string) - Specifies the guest operating system identifier for the virtual machine.\n  If not specified, the setting defaults to `otherGuest`.\n  \n  To get a list of supported guest operating system identifiers for your ESXi host,\n  run the following PowerShell command using `VMware.PowerCLI`:\n  \n  ```powershell\n  Connect-VIServer -Server \"vc.example.com\" -User \"administrator@vsphere\" -Password \"password\"\n  $esxiHost = Get-VMHost -Name \"esxi.example.com\"\n  $environmentBrowser = Get-View -Id $esxiHost.ExtensionData.Parent.ExtensionData.ConfigManager.EnvironmentBrowser\n  $vmxVersion = ($environmentBrowser.QueryConfigOptionDescriptor() | Where-Object DefaultConfigOption).Key\n  $osDescriptor = $environmentBrowser.QueryConfigOption($vmxVersion, $null).GuestOSDescriptor\n  $osDescriptor | Select-Object Id, Fullname\n  ```\n\n- `network_adapters` ([]NIC) - Specifies the network adapters for the virtual machine.\n  If no network adapter is defined, all network-related operations will be skipped.\n\n- `usb_controller` ([]string) - Specifies the USB controllers for the virtual machine. Use `usb` for a USB 2.0 controller and\n  `xhci`` for a USB 3.0 controller.\n  -> **Note:** Maximum of one controller of each type.\n\n- `notes` (string) - Specifies the annotations for the virtual machine.\n\n- `destroy` (bool) - Specifies whether to destroy the virtual machine after the build is complete.\n\n<!-- End of code generated from the comments of the CreateConfig struct in builder/vsphere/iso/step_create.go; -->\n\n\n<!-- Code generated from the comments of the StorageConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_controller_type` ([]string) - Set VM disk controller type. Example `lsilogic`, `lsilogic-sas`, `pvscsi`, `nvme`, or `scsi`. Use a list to define additional controllers.\n  Defaults to `lsilogic`. See\n  [SCSI, SATA, and NVMe Storage Controller Conditions, Limitations, and Compatibility](https://docs.vmware.com/en/VMware-vSphere/8.0/vsphere-vm-administration/GUID-5872D173-A076-42FE-8D0B-9DB0EB0E7362.html)\n  for additional details.\n\n- `storage` ([]DiskConfig) - Configures a collection of one or more disks to be provisioned along with the VM. See the [Storage Configuration](#storage-configuration).\n\n<!-- End of code generated from the comments of the StorageConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n## Network Adapter Configuration\n\n<!-- Code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; DO NOT EDIT MANUALLY -->\n\nDefines a Network Adapter\nIf no adapter is defined, network tasks (communicators, most provisioners) won't work, so it's advised to define one.\n\nExample that creates two network adapters:\n\nIn JSON:\n```json\n\n\t\"network_adapters\": [\n\t  {\n\t    \"network\": \"VM Network\",\n\t    \"network_card\": \"vmxnet3\"\n\t  },\n\t  {\n\t    \"network\": \"OtherNetwork\",\n\t    \"network_card\": \"vmxnet3\"\n\t  }\n\t],\n\n```\nIn HCL2:\n```hcl\n\n\tnetwork_adapters {\n\t    network = \"VM Network\"\n\t    network_card = \"vmxnet3\"\n\t}\n\tnetwork_adapters {\n\t    network = \"OtherNetwork\"\n\t    network_card = \"vmxnet3\"\n\t}\n\n```\n\n<!-- End of code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; -->\n\n\n<!-- Code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; DO NOT EDIT MANUALLY -->\n\n- `network_card` (string) - Specifies the virtual machine network card type. For example `vmxnet3`.\n\n<!-- End of code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; -->\n\n\n## Optional\n\n<!-- Code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; DO NOT EDIT MANUALLY -->\n\n- `network` (string) - Specifies the network to which the virtual machine will connect. If no network is specified,\n  provide 'host' to allow Packer to search for an available network. For networks placed\n  within a network folder vCenter Server, provider the object path to the network.\n  For example, `network = \"/<DatacenterName>/<FolderName>/<NetworkName>\"`.\n\n- `mac_address` (string) - Specifies the network card MAC address. For example `00:50:56:00:00:00`.\n\n- `passthrough` (\\*bool) - Specifies whether to enable DirectPath I/O passthrough for the network device.\n\n<!-- End of code generated from the comments of the NIC struct in builder/vsphere/iso/step_create.go; -->\n\n\n## Storage Configuration\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\nDefines the disk storage for a VM.\n\nExample that will create a 15GB and a 20GB disk on the VM. The second disk will be thin provisioned:\n\nIn JSON:\n```json\n\n\t\"storage\": [\n\t  {\n\t    \"disk_size\": 15000\n\t  },\n\t  {\n\t    \"disk_size\": 20000,\n\t    \"disk_thin_provisioned\": true\n\t  }\n\t],\n\n```\nIn HCL2:\n```hcl\n\n\tstorage {\n\t    disk_size = 15000\n\t}\n\tstorage {\n\t    disk_size = 20000\n\t    disk_thin_provisioned = true\n\t}\n\n```\n\nExample that creates 2 pvscsi controllers and adds 2 disks to each one:\n\nIn JSON:\n```json\n\n\t\"disk_controller_type\": [\"pvscsi\", \"pvscsi\"],\n\t\"storage\": [\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 0\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 0\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 1\n\t  },\n\t  {\n\t    \"disk_size\": 15000,\n\t    \"disk_controller_index\": 1\n\t  }\n\t],\n\n```\n\nIn HCL2:\n```hcl\n\n\tdisk_controller_type = [\"pvscsi\", \"pvscsi\"]\n\tstorage {\n\t   disk_size = 15000,\n\t   disk_controller_index = 0\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 0\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 1\n\t}\n\tstorage {\n\t   disk_size = 15000\n\t   disk_controller_index = 1\n\t}\n\n```\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_size` (int64) - The size of the disk in MiB.\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n## Optional\n\n<!-- Code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; DO NOT EDIT MANUALLY -->\n\n- `disk_thin_provisioned` (bool) - Enable VMDK thin provisioning for VM. Defaults to `false`.\n\n- `disk_eagerly_scrub` (bool) - Enable VMDK eager scrubbing for VM. Defaults to `false`.\n\n- `disk_controller_index` (int) - The assigned disk controller. Defaults to the first one (0).\n\n<!-- End of code generated from the comments of the DiskConfig struct in builder/vsphere/common/storage_config.go; -->\n\n\n## Export Configuration\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; DO NOT EDIT MANUALLY -->\n\nYou can export an image in Open Virtualization Format (OVF) to the Packer host.\n\nExample usage:\n\nIn JSON:\n```json\n...\n\n\t\"vm_name\": \"example-ubuntu\",\n\n...\n\n\t\"export\": {\n\t  \"force\": true,\n\t  \"output_directory\": \"./output-artifacts\"\n\t},\n\n```\nIn HCL2:\n```hcl\n\n\t# ...\n\tvm_name = \"example-ubuntu\"\n\t# ...\n\texport {\n\t  force = true\n\t  output_directory = \"./output-artifacts\"\n\t}\n\n```\nThe above configuration would create the following files:\n\n```text\n./output-artifacts/example-ubuntu-disk-0.vmdk\n./output-artifacts/example-ubuntu.mf\n./output-artifacts/example-ubuntu.ovf\n```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; -->\n\n\n## Optional:\n\n<!-- Code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; DO NOT EDIT MANUALLY -->\n\n- `name` (string) - Name of the exported image in Open Virtualization Format (OVF).\n  The name of the virtual machine with the `.ovf` extension is used if this option is not specified.\n\n- `force` (bool) - Forces the export to overwrite existing files. Defaults to false.\n  If set to false, the export will fail if the files already exists.\n\n- `image_files` (bool) - Include additional image files that are that are associated with the virtual machine. Defaults to false.\n  For example, `.nvram` and `.log` files.\n\n- `manifest` (string) - Generate a manifest file with the specified hash algorithm. Defaults to `sha256`.\n  Available options include `none`, `sha1`, `sha256`, and `sha512`. Use `none` for no manifest.\n\n- `options` ([]string) - Advanced image export options. Options can include:\n  * mac - MAC address is exported for each Ethernet device.\n  * uuid - UUID is exported for the virtual machine.\n  * extraconfig - Extra configuration options are exported for the virtual machine.\n  * nodevicesubtypes - Resource subtypes for CD/DVD drives, floppy drives, and serial and parallel ports are not exported.\n  \n  For example, adding the following export config option outputs the MAC addresses for each Ethernet device in the OVF descriptor:\n  \n  In JSON:\n  ```json\n  ...\n    \"export\": {\n      \"options\": [\"mac\"]\n    },\n  ```\n  In HCL2:\n  ```hcl\n  ...\n    export {\n      options = [\"mac\"]\n    }\n  ```\n\n<!-- End of code generated from the comments of the ExportConfig struct in builder/vsphere/common/step_export.go; -->\n\n\n## Output Configuration:\n\n<!-- Code generated from the comments of the OutputConfig struct in builder/vsphere/common/output_config.go; DO NOT EDIT MANUALLY -->\n\n- `output_directory` (string) - This setting specifies the directory that\n  artifacts from the build, such as the virtual machine files and disks,\n  will be output to. The path to the directory may be relative or\n  absolute. If relative, the path is relative to the working directory\n  packer is executed from. This directory must not exist or, if\n  created, must be empty prior to running the builder. By default this is\n  \"output-BUILDNAME\" where \"BUILDNAME\" is the name of the build.\n\n- `directory_permission` (os.FileMode) - The permissions to apply to the \"output_directory\", and to any parent\n  directories that get created for output_directory.  By default this is\n  \"0750\". You should express the permission as quoted string with a\n  leading zero such as \"0755\" in JSON file, because JSON does not support\n  octal value. In Unix-like OS, the actual permission may differ from\n  this value because of umask.\n\n<!-- End of code generated from the comments of the OutputConfig struct in builder/vsphere/common/output_config.go; -->\n\n\n## Content Library Import Configuration\n\n<!-- Code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; DO NOT EDIT MANUALLY -->\n\nWith this configuration Packer creates a library item in a content library whose content is a VM template\nor an OVF template created from the just built VM.\nThe template is stored in a existing or newly created library item.\n\n<!-- End of code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; -->\n\n\n<!-- Code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; DO NOT EDIT MANUALLY -->\n\n- `library` (string) - Name of the library in which the new library item containing the template should be created/updated.\n  The Content Library should be of type Local to allow deploying virtual machines.\n\n- `name` (string) - Name of the library item that will be created or updated.\n  For VM templates, the name of the item should be different from [vm_name](#vm_name) and\n  the default is [vm_name](#vm_name) + timestamp when not set. VM templates will be always imported to a new library item.\n  For OVF templates, the name defaults to [vm_name](#vm_name) when not set, and if an item with the same name already\n  exists it will be then updated with the new OVF template, otherwise a new item will be created.\n  \n  ~> **Note**: It's not possible to update existing library items with a new VM template. If updating an existing library\n  item is necessary, use an OVF template instead by setting the [ovf](#ovf) option as `true`.\n\n- `description` (string) - Description of the library item that will be created.\n  Defaults to \"Packer imported [vm_name](#vm_name) VM template\".\n\n- `cluster` (string) - Cluster onto which the virtual machine template should be placed.\n  If cluster and resource_pool are both specified, resource_pool must belong to cluster.\n  If cluster and host are both specified, host must be a member of cluster.\n  This option is not used when importing OVF templates.\n  Defaults to [cluster](#cluster).\n\n- `folder` (string) - Virtual machine folder into which the virtual machine template should be placed.\n  This option is not used when importing OVF templates.\n  Defaults to the same folder as the source virtual machine.\n\n- `host` (string) - Host onto which the virtual machine template should be placed.\n  If host and resource_pool are both specified, resource_pool must belong to host.\n  If host and cluster are both specified, host must be a member of cluster.\n  This option is not used when importing OVF templates.\n  Defaults to [host](#host).\n\n- `resource_pool` (string) - Resource pool into which the virtual machine template should be placed.\n  Defaults to [resource_pool](#resource_pool). if [resource_pool](#resource_pool) is also unset,\n  the system will attempt to choose a suitable resource pool for the virtual machine template.\n\n- `datastore` (string) - The datastore for the virtual machine template's configuration and log files.\n  This option is not used when importing OVF templates.\n  Defaults to the storage backing associated with the library specified by library.\n\n- `destroy` (bool) - If set to true, the VM will be destroyed after deploying the template to the Content Library.\n  Defaults to `false`.\n\n- `ovf` (bool) - When set to true, Packer will import and OVF template to the content library item. Defaults to `false`.\n\n- `skip_import` (bool) - When set to true, the VM won't be imported to the content library item. Useful for setting to `true` during a build test stage. Defaults to `false`.\n\n- `ovf_flags` ([]string) - Flags to use for OVF package creation. The supported flags can be obtained using ExportFlag.list. If unset, no flags will be used. Known values: EXTRA_CONFIG, PRESERVE_MAC\n\n<!-- End of code generated from the comments of the ContentLibraryDestinationConfig struct in builder/vsphere/common/step_import_to_content_library.go; -->\n\n\nMinimal example of usage to import a VM template:\n\n**JSON**\n\n```json\n\t\"content_library_destination\" : {\n\t    \"library\": \"Packer Library Test\"\n\t}\n```\n\n**HCL2**\n\n```hcl\n\tcontent_library_destination {\n\t\t\tlibrary = \"Packer Library Test\"\n\t}\n```\n\n\nMinimal example of usage to import a OVF template:\n\n**JSON**\n\n```json\n\t\"content_library_destination\" : {\n\t    \"library\": \"Packer Library Test\",\n\t    \"ovf\": true\n\t}\n```\n\n**HCL2**\n\n```hcl\n\tcontent_library_destination {\n\t\t\tlibrary = \"Packer Library Test\"\n\t\t\tovf = true\n\t}\n```\n\n\n## Extra Configuration Parameters\n\n<!-- Code generated from the comments of the ConfigParamsConfig struct in builder/vsphere/common/step_config_params.go; DO NOT EDIT MANUALLY -->\n\n- `configuration_parameters` (map[string]string) - configuration_parameters is a direct passthrough to the vSphere API's\n  ConfigSpec: https://vdc-download.vmware.com/vmwb-repository/dcr-public/bf660c0a-f060-46e8-a94d-4b5e6ffc77ad/208bc706-e281-49b6-a0ce-b402ec19ef82/SDK/vsphere-ws/docs/ReferenceGuide/vim.vm.ConfigSpec.html\n\n- `tools_sync_time` (bool) - Enables time synchronization with the host. Defaults to false.\n\n- `tools_upgrade_policy` (bool) - If sets to true, vSphere will automatically check and upgrade VMware Tools upon a system power cycle.\n  If not set, defaults to manual upgrade.\n\n<!-- End of code generated from the comments of the ConfigParamsConfig struct in builder/vsphere/common/step_config_params.go; -->\n\n\n## Communicator configuration\n\n## Optional common fields:\n\n<!-- Code generated from the comments of the Config struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `communicator` (string) - Packer currently supports three kinds of communicators:\n  \n  -   `none` - No communicator will be used. If this is set, most\n      provisioners also can't be used.\n  \n  -   `ssh` - An SSH connection will be established to the machine. This\n      is usually the default.\n  \n  -   `winrm` - A WinRM connection will be established.\n  \n  In addition to the above, some builders have custom communicators they\n  can use. For example, the Docker builder has a \"docker\" communicator\n  that uses `docker exec` and `docker cp` to execute scripts and copy\n  files.\n\n- `pause_before_connecting` (duration string | ex: \"1h5m2s\") - We recommend that you enable SSH or WinRM as the very last step in your\n  guest's bootstrap script, but sometimes you may have a race condition\n  where you need Packer to wait before attempting to connect to your\n  guest.\n  \n  If you end up in this situation, you can use the template option\n  `pause_before_connecting`. By default, there is no pause. For example if\n  you set `pause_before_connecting` to `10m` Packer will check whether it\n  can connect, as normal. But once a connection attempt is successful, it\n  will disconnect and then wait 10 minutes before connecting to the guest\n  and beginning provisioning.\n\n<!-- End of code generated from the comments of the Config struct in communicator/config.go; -->\n\n\n## Optional SSH fields:\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n- `ssh_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the home directory\n  of current user.\n\n\n## Optional WinRM fields:\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n## Working With Clusters And Hosts\n\n### Standalone Hosts\n\nOnly use the `host` option. Optionally specify a `resource_pool`:\n\n**JSON**\n\n```json\n\"host\": \"esxi-01.example.com\",\n\"resource_pool\": \"pool1\",\n```\n\n**HCL2**\n\n```hcl\nhost = \"\"esxi-01.example.com\"\"\nresource_pool = \"pool1\"\n```\n\n\n### Clusters Without DRS\n\nUse the `cluster` and `host`parameters:\n\n**JSON**\n\n```json\n\"cluster\": \"cluster1\",\n\"host\": \"esxi-02.example.com\",\n```\n\n**HCL2**\n\n```hcl\ncluster = \"cluster1\"\nhost = \"esxi-02.example.com\"\n```\n\n\n### Clusters With DRS\n\nOnly use the `cluster` option. Optionally specify a `resource_pool`:\n\n**JSON**\n\n```json\n\"cluster\": \"cluster2\",\n\"resource_pool\": \"pool1\",\n```\n\n**HCL2**\n\n```hcl\ncluster = \"cluster2\"\nresource_pool = \"pool1\"\n```\n\n\n## Required vSphere Privileges\n\nIt is recommended to create a custom vSphere role with the required privileges to integrate Packer with vSphere. Accounts or groups can be added to the role to ensure that Packer has **_the least privileged_** access to the infrastructure. For example, a named service account (_e.g._ svc-packer-vsphere@example.com).\n\nClone the default **Read-Only** vSphere role and add the following privileges, which are based on the capabilities of the `vsphere-iso` plugin:\n\nCategory        | Privilege                                           | Reference\n----------------|-----------------------------------------------------|---------\nContent Library | Add library item                                    | `ContentLibrary.AddLibraryItem`\n ...            | Update Library Item                                 | `ContentLibrary.UpdateLibraryItem`\nDatastore       | Allocate space                                      | `Datastore.AllocateSpace`\n...             | Browse datastore                                    | `Datastore.Browse`\n...             | Low level file operations                           | `Datastore.FileManagement`\nNetwork         | Assign network                                      | `Network.Assign`\nResource        | Assign virtual machine to resource pool             | `Resource.AssignVMToPool`\nvApp            | Export                                              | `vApp.Export`\nVirtual Machine | Configuration > Add new disk                        | `VirtualMachine.Config.AddNewDisk`\n...             | Configuration > Add or remove device                | `VirtualMachine.Config.AddRemoveDevice`\n...             | Configuration > Advanced configuration              | `VirtualMachine.Config.AdvancedConfig`\n...             | Configuration > Change CPU count                    | `VirtualMachine.Config.CPUCount`\n...             | Configuration > Change memory                       | `VirtualMachine.Config.Memory`\n...             | Configuration > Change settings                     | `VirtualMachine.Config.Settings`\n...             | Configuration > Change Resource                     | `VirtualMachine.Config.Resource`\n...             | Configuration > Set annotation                      | `VirtualMachine.Config.Annotation`\n...             | Edit Inventory > Create from existing               | `VirtualMachine.Inventory.CreateFromExisting`\n...             | Edit Inventory > Create new                         | `VirtualMachine.Inventory.Create`\n...             | Edit Inventory > Remove                             | `VirtualMachine.Inventory.Delete`\n...             | Interaction > Configure CD media                    | `VirtualMachine.Interact.SetCDMedia`\n...             | Interaction > Configure floppy media                | `VirtualMachine.Interact.SetFloppyMedia`\n...             | Interaction > Connect devices                       | `VirtualMachine.Interact.DeviceConnection`\n...             | Interaction > Inject USB HID scan codes             | `VirtualMachine.Interact.PutUsbScanCodes`\n...             | Interaction > Power off                             | `VirtualMachine.Interact.PowerOff`\n...             | Interaction > Power on                              | `VirtualMachine.Interact.PowerOn`\n...             | Provisioning > Create template from virtual machine | `VirtualMachine.Provisioning.CreateTemplateFromVM`\n...             | Provisioning > Mark as template                     | `VirtualMachine.Provisioning.MarkAsTemplate`\n...             | Provisioning > Mark as virtual machine              | `VirtualMachine.Provisioning.MarkAsVM`\n...             | State > Create snapshot                             | `VirtualMachine.State.CreateSnapshot`\n\nGlobal permissions **[are required](https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.security.doc/GUID-03B36057-B38C-479C-BD78-341CD83A0584.html)** for the content library based on the hierarchical inheritance of permissions. Once the custom vSphere role is created, assign **Global Permissions** in vSphere to the accounts or groups used for the Packer to vSphere integration, if using the content library.\n\nFor example:\n\n1. Log in to the vCenter Server at _https://<management_vcenter_server_fqdn>/ui_ as `administrator@vsphere.local`.\n2. Select **Menu** > **Administration**.\n3. In the left pane, select **Access control** > **Global permissions** and click the **Add permissions** icon.\n4. In the **Add permissions** dialog box, enter the service account (_e.g._ svc-packer-vsphere@example.com), select the custom role (_e.g._ Packer to vSphere Integration Role) and the **Propagate to children** check box, and click OK.\n\nIn an environment with many vCenter Server instances, such as management and workload, in enhanced linked-mode, you may wish to further reduce the scope of access across the vSphere infrastructure. For example, if you do not want Packer to have access to the management vCenter Server instance, but only allow access to workload vCenter Server instances:\n\n1. From the **Hosts and clusters** inventory, select management vCenter Server to restrict scope, and click the **Permissions** tab.\n2. Select the service account with the custom role assigned and click the **Change role** icon.\n3. In the **Change role** dialog box, from the **Role** drop-down menu, select **No Access**, select the **Propagate to children** check box, and click **OK**.\n","created_at":"2024-03-07T20:36:33.747Z","updated_at":"2024-03-07T20:36:33.747Z","name":"vSphere ISO","slug":"vsphere-iso","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"d4cf2bd7-76a0-4bcb-ae01-138db835517c","integration_release_id":"fc4ff907-7d36-426e-a167-df93b93f00f5","component_id":"36076511-3ced-4faf-addf-101fce0405ff","readme":"Type: `vsphere-supervisor`\nArtifact BuilderId: `vsphere.supervisor`\n\nThis builder deploys and publishes new VMs to a vSphere Supervisor cluster using VM Service.\nIf you are new to VM Service, please refer to [Deploying and Managing Virtual Machines in vSphere with Tanzu\n](https://docs.vmware.com/en/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-F81E3535-C275-4DDE-B35F-CE759EA3B4A0.html) for more information.\n\n- It uses a kubeconfig file to connect to the vSphere Supervisor cluster.\n- It uses the [VM-Operator API](https://vm-operator.readthedocs.io/en/latest/concepts/) to deploy and configure the source VM.\n- It uses the Packer provisioners to customize the VM after establishing a successful connection.\n- It publishes the customized VM as a new VM image to the designated content library in vSphere.\n- The builder supports versions following the VMware Product Lifecycle Matrix\n  from General Availability to End of General Support. Builds on versions that\n  are end of support may work, but configuration options may throw errors if\n  they do not exist in the vSphere API for those versions.\n\n## Examples\n\nExample Packer template:\n\n**HCL2**\n\n```hcl\nsource \"vsphere-supervisor\" \"example-vm\" {\n  image_name = \"<Image name of the source VM, e.g. 'ubuntu-impish-21.10-cloudimg'>\"\n  class_name = \"<VM class that describes the virtual hardware settings, e.g. 'best-effort-large'>\"\n  storage_class = \"<Storage class that provides the backing storage for volume, e.g. 'wcplocal-storage-profile'>\"\n  bootstrap_provider = \"<CloudInit, Sysprep, or vAppConfig to customize the guest OS>\"\n  bootstrap_data_file = \"<Path to the file containing the bootstrap data for guest OS customization>\"\n}\n\nbuild {\n  sources = [\"source.vsphere-supervisor.example-vm\"]\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vsphere-supervisor\",\n      \"image_name\": \"<Image name of the source VM, e.g. 'ubuntu-impish-21.10-cloudimg'>\",\n      \"class_name\": \"<VM class that describes the virtual hardware settings, e.g. 'best-effort-large'>\",\n      \"storage_class\": \"<Storage class that provides the backing storage for volume, e.g. 'wcplocal-storage-profile'>\",\n      \"bootstrap_provider\": \"<CloudInit, Sysprep, or vAppConfig to customize the guest OS>\",\n      \"bootstrap_data_file\": \"<Path to the file containing the bootstrap data for guest OS customization>\"\n    }\n  ]\n}\n```\n\n\nRefer to the [examples/supervisor directory](https://github.com/hashicorp/packer-plugin-vsphere/tree/main/builder/vsphere/examples/supervisor) within the GitHub repository for more complete examples.\n\n## Configuration Reference\nThere are various configuration options available for each step in this builder. The _required_ items are listed below as well as the _optional_ configs further down the page.\n\n### Required\n\n<!-- Code generated from the comments of the CreateSourceConfig struct in builder/vsphere/supervisor/step_create_source.go; DO NOT EDIT MANUALLY -->\n\n- `image_name` (string) - Name of the source virtual machine (VM) image.\n\n- `class_name` (string) - Name of the VM class that describes virtual hardware settings.\n\n- `storage_class` (string) - Name of the storage class that configures storage-related attributes.\n\n<!-- End of code generated from the comments of the CreateSourceConfig struct in builder/vsphere/supervisor/step_create_source.go; -->\n\n\n### Optional\n\n#### Supervisor Connection\n\n<!-- Code generated from the comments of the ConnectSupervisorConfig struct in builder/vsphere/supervisor/step_connect_supervisor.go; DO NOT EDIT MANUALLY -->\n\n- `kubeconfig_path` (string) - The path to kubeconfig file for accessing to the vSphere Supervisor cluster. Defaults to the value of `KUBECONFIG` envvar or `$HOME/.kube/config` if the envvar is not set.\n\n- `supervisor_namespace` (string) - The Supervisor namespace to deploy the source VM. Defaults to the current context's namespace in kubeconfig.\n\n<!-- End of code generated from the comments of the ConnectSupervisorConfig struct in builder/vsphere/supervisor/step_connect_supervisor.go; -->\n\n\n#### Source VM Creation\n\n<!-- Code generated from the comments of the CreateSourceConfig struct in builder/vsphere/supervisor/step_create_source.go; DO NOT EDIT MANUALLY -->\n\n- `source_name` (string) - Name of the source VM. Defaults to `packer-vsphere-supervisor-<random-suffix>`.\n\n- `network_type` (string) - Name of the network type to attach to the source VM's network interface. Defaults to empty.\n\n- `network_name` (string) - Name of the network to attach to the source VM's network interface. Defaults to empty.\n\n- `keep_input_artifact` (bool) - Preserve all the created objects in Supervisor cluster after the build finishes. Defaults to `false`.\n\n- `bootstrap_provider` (string) - Name of the bootstrap provider to use for configuring the source VM.\n  Supported values are `CloudInit`, `Sysprep`, and `vAppConfig`. Defaults to `CloudInit`.\n\n- `bootstrap_data_file` (string) - Path to a file with bootstrap configuration data. Required if `bootstrap_provider` is not set to `CloudInit`.\n  Defaults to a basic cloud config that sets up the user account from the SSH communicator config.\n\n<!-- End of code generated from the comments of the CreateSourceConfig struct in builder/vsphere/supervisor/step_create_source.go; -->\n\n\n#### Source VM Watching\n\n<!-- Code generated from the comments of the WatchSourceConfig struct in builder/vsphere/supervisor/step_watch_source.go; DO NOT EDIT MANUALLY -->\n\n- `watch_source_timeout_sec` (int) - The timeout in seconds to wait for the source VM to be ready. Defaults to `1800`.\n\n<!-- End of code generated from the comments of the WatchSourceConfig struct in builder/vsphere/supervisor/step_watch_source.go; -->\n\n\n#### Source VM Publishing\n\n<!-- Code generated from the comments of the PublishSourceConfig struct in builder/vsphere/supervisor/step_publish_source.go; DO NOT EDIT MANUALLY -->\n\n- `publish_image_name` (string) - The name of the published VM image. If not specified, the vm-operator API will set a default name.\n\n- `watch_publish_timeout_sec` (int) - The timeout in seconds to wait for the VM to be published. Defaults to `600`.\n\n<!-- End of code generated from the comments of the PublishSourceConfig struct in builder/vsphere/supervisor/step_publish_source.go; -->\n\n\n#### Communicator Configuration\n\n<!-- Code generated from the comments of the SSH struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `ssh_host` (string) - The address to SSH to. This usually is automatically configured by the\n  builder.\n\n- `ssh_port` (int) - The port to connect to SSH. This defaults to `22`.\n\n- `ssh_username` (string) - The username to connect to SSH with. Required if using SSH.\n\n- `ssh_password` (string) - A plaintext password to use to authenticate with SSH.\n\n- `ssh_ciphers` ([]string) - This overrides the value of ciphers supported by default by Golang.\n  The default value is [\n    \"aes128-gcm@openssh.com\",\n    \"chacha20-poly1305@openssh.com\",\n    \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\",\n  ]\n  \n  Valid options for ciphers include:\n  \"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-gcm@openssh.com\",\n  \"chacha20-poly1305@openssh.com\",\n  \"arcfour256\", \"arcfour128\", \"arcfour\", \"aes128-cbc\", \"3des-cbc\",\n\n- `ssh_clear_authorized_keys` (bool) - If true, Packer will attempt to remove its temporary key from\n  `~/.ssh/authorized_keys` and `/root/.ssh/authorized_keys`. This is a\n  mostly cosmetic option, since Packer will delete the temporary private\n  key from the host system regardless of whether this is set to true\n  (unless the user has set the `-debug` flag). Defaults to \"false\";\n  currently only works on guests with `sed` installed.\n\n- `ssh_key_exchange_algorithms` ([]string) - If set, Packer will override the value of key exchange (kex) algorithms\n  supported by default by Golang. Acceptable values include:\n  \"curve25519-sha256@libssh.org\", \"ecdh-sha2-nistp256\",\n  \"ecdh-sha2-nistp384\", \"ecdh-sha2-nistp521\",\n  \"diffie-hellman-group14-sha1\", and \"diffie-hellman-group1-sha1\".\n\n- `ssh_certificate_file` (string) - Path to user certificate used to authenticate with SSH.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_pty` (bool) - If `true`, a PTY will be requested for the SSH connection. This defaults\n  to `false`.\n\n- `ssh_timeout` (duration string | ex: \"1h5m2s\") - The time to wait for SSH to become available. Packer uses this to\n  determine when the machine has booted so this is usually quite long.\n  Example value: `10m`.\n  This defaults to `5m`, unless `ssh_handshake_attempts` is set.\n\n- `ssh_disable_agent_forwarding` (bool) - If true, SSH agent forwarding will be disabled. Defaults to `false`.\n\n- `ssh_handshake_attempts` (int) - The number of handshakes to attempt with SSH once it can connect.\n  This defaults to `10`, unless a `ssh_timeout` is set.\n\n- `ssh_bastion_host` (string) - A bastion host to use for the actual SSH connection.\n\n- `ssh_bastion_port` (int) - The port of the bastion host. Defaults to `22`.\n\n- `ssh_bastion_agent_auth` (bool) - If `true`, the local SSH agent will be used to authenticate with the\n  bastion host. Defaults to `false`.\n\n- `ssh_bastion_username` (string) - The username to connect to the bastion host.\n\n- `ssh_bastion_password` (string) - The password to use to authenticate with the bastion host.\n\n- `ssh_bastion_interactive` (bool) - If `true`, the keyboard-interactive used to authenticate with bastion host.\n\n- `ssh_bastion_private_key_file` (string) - Path to a PEM encoded private key file to use to authenticate with the\n  bastion host. The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_bastion_certificate_file` (string) - Path to user certificate used to authenticate with bastion host.\n  The `~` can be used in path and will be expanded to the\n  home directory of current user.\n\n- `ssh_file_transfer_method` (string) - `scp` or `sftp` - How to transfer files, Secure copy (default) or SSH\n  File Transfer Protocol.\n  \n  **NOTE**: Guests using Windows with Win32-OpenSSH v9.1.0.0p1-Beta, scp\n  (the default protocol for copying data) returns a a non-zero error code since the MOTW\n  cannot be set, which cause any file transfer to fail. As a workaround you can override the transfer protocol\n  with SFTP instead `ssh_file_transfer_protocol = \"sftp\"`.\n\n- `ssh_proxy_host` (string) - A SOCKS proxy host to use for SSH connection\n\n- `ssh_proxy_port` (int) - A port of the SOCKS proxy. Defaults to `1080`.\n\n- `ssh_proxy_username` (string) - The optional username to authenticate with the proxy server.\n\n- `ssh_proxy_password` (string) - The optional password to use to authenticate with the proxy server.\n\n- `ssh_keep_alive_interval` (duration string | ex: \"1h5m2s\") - How often to send \"keep alive\" messages to the server. Set to a negative\n  value (`-1s`) to disable. Example value: `10s`. Defaults to `5s`.\n\n- `ssh_read_write_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for a remote command to end. This might be\n  useful if, for example, packer hangs on a connection after a reboot.\n  Example: `5m`. Disabled by default.\n\n- `ssh_remote_tunnels` ([]string) - \n\n- `ssh_local_tunnels` ([]string) - \n\n<!-- End of code generated from the comments of the SSH struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `temporary_key_pair_type` (string) - `dsa` | `ecdsa` | `ed25519` | `rsa` ( the default )\n  \n  Specifies the type of key to create. The possible values are 'dsa',\n  'ecdsa', 'ed25519', or 'rsa'.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure, please\n  consider other alternatives like RSA or ED25519.\n\n- `temporary_key_pair_bits` (int) - Specifies the number of bits in the key to create. For RSA keys, the\n  minimum size is 1024 bits and the default is 4096 bits. Generally, 3072\n  bits is considered sufficient. DSA keys must be exactly 1024 bits as\n  specified by FIPS 186-2. For ECDSA keys, bits determines the key length\n  by selecting from one of three elliptic curve sizes: 256, 384 or 521\n  bits. Attempting to use bit lengths other than these three values for\n  ECDSA keys will fail. Ed25519 keys have a fixed length and bits will be\n  ignored.\n  \n  NOTE: DSA is deprecated and no longer recognized as secure as specified\n  by FIPS 186-5, please consider other alternatives like RSA or ED25519.\n\n<!-- End of code generated from the comments of the SSHTemporaryKeyPair struct in communicator/config.go; -->\n\n\n<!-- Code generated from the comments of the WinRM struct in communicator/config.go; DO NOT EDIT MANUALLY -->\n\n- `winrm_username` (string) - The username to use to connect to WinRM.\n\n- `winrm_password` (string) - The password to use to connect to WinRM.\n\n- `winrm_host` (string) - The address for WinRM to connect to.\n  \n  NOTE: If using an Amazon EBS builder, you can specify the interface\n  WinRM connects to via\n  [`ssh_interface`](/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#ssh_interface)\n\n- `winrm_no_proxy` (bool) - Setting this to `true` adds the remote\n  `host:port` to the `NO_PROXY` environment variable. This has the effect of\n  bypassing any configured proxies when connecting to the remote host.\n  Default to `false`.\n\n- `winrm_port` (int) - The WinRM port to connect to. This defaults to `5985` for plain\n  unencrypted connection and `5986` for SSL when `winrm_use_ssl` is set to\n  true.\n\n- `winrm_timeout` (duration string | ex: \"1h5m2s\") - The amount of time to wait for WinRM to become available. This defaults\n  to `30m` since setting up a Windows machine generally takes a long time.\n\n- `winrm_use_ssl` (bool) - If `true`, use HTTPS for WinRM.\n\n- `winrm_insecure` (bool) - If `true`, do not check server certificate chain and host name.\n\n- `winrm_use_ntlm` (bool) - If `true`, NTLMv2 authentication (with session security) will be used\n  for WinRM, rather than default (basic authentication), removing the\n  requirement for basic authentication to be enabled within the target\n  guest. Further reading for remote connection authentication can be found\n  [here](https://msdn.microsoft.com/en-us/library/aa384295(v=vs.85).aspx).\n\n<!-- End of code generated from the comments of the WinRM struct in communicator/config.go; -->\n\n\n## Deprovisioning Tasks\n\nIf you would like to clean up the VM after the build is complete, you could use the Ansible\nprovisioner to run the following tasks to delete machine-specific files and data.\n\n**HCL2**\n\n```hcl\nbuild {\n  sources = [\"source.vsphere-supervisor.vm\"]\n\n  provisioner \"ansible\" {\n    playbook_file = \"cleanup-playbook.yml\"\n  }\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"vsphere-supervisor\"\n    }\n  ],\n  \"provisioners\": [\n    {\n      \"type\": \"ansible\",\n      \"playbook_file\": \"./cleanup-playbook.yml\"\n    }\n  ]\n}\n```\n\n\nContent of `cleanup-playbook.yml`:\n\n```yaml\n---\n# cleanup-playbook.yml\n- name: Clean up source VM\n  hosts: default\n  become: true\n  tasks:\n    - name: Truncate machine id\n      file:\n        state: \"{{ item.state }}\"\n        path: \"{{ item.path }}\"\n        owner: root\n        group: root\n        mode: \"{{ item.mode }}\"\n      loop:\n      - { path: /etc/machine-id, state: absent, mode: \"0644\" }\n      - { path: /etc/machine-id, state: touch,  mode: \"0644\" }\n\n    - name: Truncate audit logs\n      file:\n        state: \"{{ item.state }}\"\n        path: \"{{ item.path }}\"\n        owner: root\n        group: utmp\n        mode: \"{{ item.mode }}\"\n      loop:\n      - { path: /var/log/wtmp,    state: absent, mode: \"0664\" }\n      - { path: /var/log/lastlog, state: absent, mode: \"0644\" }\n      - { path: /var/log/wtmp,    state: touch,  mode: \"0664\" }\n      - { path: /var/log/lastlog, state: touch,  mode: \"0644\" }\n\n    - name: Remove cloud-init lib dir and logs\n      file:\n        state: absent\n        path: \"{{ item }}\"\n      loop:\n      - /var/lib/cloud\n      - /var/log/cloud-init.log\n      - /var/log/cloud-init-output.log\n      - /var/run/cloud-init\n\n    - name: Truncate all remaining log files in /var/log\n      shell:\n        cmd: |\n          find /var/log -type f -iname '*.log' | xargs truncate -s 0\n\n    - name: Delete all logrotated log zips\n      shell:\n        cmd: |\n          find /var/log -type f -name '*.gz' -exec rm {} +\n\n    - name: Find temp files\n      find:\n        depth: 1\n        file_type: any\n        paths:\n        - /tmp\n        - /var/tmp\n        pattern: '*'\n      register: temp_files\n\n    - name: Reset temp space\n      file:\n        state: absent\n        path: \"{{ item.path }}\"\n      loop: \"{{ temp_files.files }}\"\n\n    - name: Truncate shell history\n      file:\n        state: absent\n        path: \"{{ item.path }}\"\n      loop:\n      - { path: /root/.bash_history }\n      - { path: \"/home/{{ ansible_env.SUDO_USER | default(ansible_user_id) }}/.bash_history\" }\n```\n","created_at":"2024-03-07T20:36:34.177Z","updated_at":"2024-03-07T20:36:34.177Z","name":"vSphere Supervisor","slug":"vsphere-supervisor","component":{"id":"36076511-3ced-4faf-addf-101fce0405ff","slug":"builder","name":"Builder","plural_name":"Builders","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:30.937Z","updated_at":"2022-11-09T22:56:30.937Z"},"variable_groups":[]},{"id":"51c14b0a-1c5e-4524-9783-01b8cfa96261","integration_release_id":"fc4ff907-7d36-426e-a167-df93b93f00f5","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":"Type: `vsphere`\nArtifact BuilderId: `packer.post-processor.vsphere`\n\nThe Packer vSphere post-processor takes an artifact and uploads it to a vSphere endpoint.\nThe artifact must have a vmx/ova/ovf image.\n\n## Configuration\n\nThere are many configuration options available for the post-processor. They are\nsegmented below into two categories: required and optional parameters. Within\neach category, the available configuration keys are alphabetized.\n\nRequired:\n\n- `cluster` (string) - The vSphere cluster or ESXi host to upload the VM. This can be\n  either the name of the vSphere cluster or the FQDN/IP address of an ESXi host.\n\n- `datacenter` (string) - The name of the datacenter within the vSphere environemnt\n   to add the VM.\n\n- `datastore` (string) - The name of the datastore to place the VM. This is\n  _not required_ if `resource_pool` is specified.\n\n- `host` (string) - The vSphere endpoint that will be contacted to perform\n  the VM upload.\n\n- `password` (string) - The password to use to authenticate to the endpoint.\n\n- `username` (string) - The username to use to authenticate to the endpoint.\n\n- `vm_name` (string) - The name of the VM after upload.\n\nOptional:\n\n- `esxi_host` (string) - Target ESXi host. Used to assign specific ESXi\n  host to upload the resulting VM, when a vCenter Server is used as\n  `host`. Can be either an FQDN (e.g., \"esxi-01.example.com\", requires proper DNS\n  setup and/or correct DNS search domain setting) or an IPv4 address.\n\n- `disk_mode` (string) - Target disk format. See `ovftool` manual for\n  available options. Default: `thick`.\n\n- `insecure` (boolean) - Whether or not the connection can be done\n  over an insecure connection. Default: `false`\n\n- `keep_input_artifact` (boolean) - When `true`, preserve the local VM files,\n  even after importing them to the vSphere endpoint. Default: `false`.\n\n- `resource_pool` (string) - The resource pool in which to upload the VM.\n\n- `vm_folder` (string) - The folder within the datastore to place the VM.\n\n- `vm_network` (string) - The name of the network in which to place the VM.\n\n- `overwrite` (boolean) - If `true`, force the system to overwrite the\n  existing files instead create new ones. Default: `false`\n\n- `hardware_version` (string) - This option sets the maximum virtual hardware version\n  for the deployed VM. It does not upgrade the virtual hardware version of the source VM.\n  Instead, it limits the virtual hardware version of the deployed VM to the specified\n  version. If the source VM's hardware version is higher than the specified version,\n  the deployed VM's hardware version will be downgraded to the specified version.\n  If the source VM's hardware version is lower than or equal to the specified version,\n  the deployed VM's hardware version will be the same as the source VM's.\n  This option is useful when deploying to a vSphere / ESXi host whose version is different\n  than the one used to create the artifact.\n  \n  See [VMware KB 1003746](https://kb.vmware.com/s/article/1003746) for more information\n  on the virtual hardware versions supported for each vSphere / ESXi version.\n\n- `options` (array of strings) - Custom options to add in `ovftool`. See\n  `ovftool --help` to list all the options\n\n# Example\n\nThe following is an example of the vSphere post-processor being used in\nconjunction with the null builder to upload a vmx to a vSphere cluster.\n\nYou can also use this post-processor with the vmx artifact from a build.\n\n**HCL2**\n\n```hcl\nsource \"null\" \"example\" {\n    communicator = \"none\"\n}\n\nbuild {\n    sources = [\n        \"source.null.example\"\n    ]\n\n    post-processors {\n      post-processor \"vsphere\"{\n          vm_name             = \"packer\"\n          host                = \"vcenter.example.com\"\n          username            = \"administrator@vsphere.local\"\n          password            = \"VMw@re1!\"\n          datacenter          = \"dc-01\"   \n          cluster             = \"cluster-01\"\n          datastore           = \"datastore-01\"\n          vm_network          = \"VM Network\"\n          keep_input_artifact = true\n      }\n    }\n}\n```\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"null\",\n      \"communicator\": \"none\"\n    }\n  ],\n  \"post-processors\": [\n    [\n      {\n        \"type\": \"vsphere\",\n        \"vm_name\": \"packer\",\n        \"host\": \"vcenter.example.com\",\n        \"username\": \"administrator@vsphere.local\",\n        \"password\": \"VMw@re1!\",\n        \"datacenter\": \"dc-01\",\n        \"cluster\": \"cluster-01\",\n        \"datastore\": \"datastore-01\",\n        \"vm_network\": \"VM Network\",\n        \"keep_input_artifact\": true,\n      }\n    ]\n  ]\n}\n```\n\n\n# Privileges\n\nThe post-processor uses `ovftool` and therefore needs the same privileges\nas `ovftool`. Rather than giving full administrator access, you can create a role\nto give the post-processor the permissions necessary to run. Below is an example\nrole. Please note that this is a user-supplied list so there may be a few\nextraneous permissions that are not strictly required.\n\nFor vSphere the role needs the following privileges:\n\n    Datastore.AllocateSpace\n    Host.Config.AdvancedConfig\n    Host.Config.NetService\n    Host.Config.Network\n    Network.Assign\n    System.Anonymous\n    System.Read\n    System.View\n    VApp.Import\n    VirtualMachine.Config.AddNewDisk\n    VirtualMachine.Config.AdvancedConfig\n    VirtualMachine.Inventory.Delete\n\nAnd this role must be authorized on the:\n\n    Cluster of the host\n    The destination folder (not on Datastore, on the vSphere logical view)\n    The network to be assigned\n    The destination datastore.\n","created_at":"2024-03-07T20:36:34.303Z","updated_at":"2024-03-07T20:36:34.303Z","name":"vSphere","slug":"vsphere","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]},{"id":"adb750f6-33d2-440b-bed6-6f52c0e3b838","integration_release_id":"fc4ff907-7d36-426e-a167-df93b93f00f5","component_id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","readme":"Type: `vsphere-template`\nArtifact BuilderId: `packer.post-processor.vsphere`\n\nThe Packer vSphere Template post-processor takes an artifact from the\n`vmware-iso` builder, built on ESXi (i.e. remote) or an artifact from the\n[vSphere](/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere) post-processor, marks the VM as a\ntemplate, and places it in the path of your choice.\n\n## Configuration\n\nThere are many configuration options available for the post-processor. They are\nprovided below in two categories: required and optional parameters.\n\nRequired:\n\n- `host` (string) - The vSphere endpoint that contains the VM built by the\n  `vmware-iso` builder.\n\n- `password` (string) - Password to use to authenticate to the vSphere\n  endpoint.\n\n- `username` (string) - The username to use to authenticate to the vSphere\n  endpoint.\n\nOptional:\n\n- `datacenter` (string) - If you have more than one, you will need to specify\n  which one the ESXi host used.\n\n- `folder` (string) - Target path where the template will be created.\n\n- `insecure` (boolean) - If `true`, skips the verification of the server\n  certificate. Default is `false`.\n\n- `keep_input_artifact` (boolean) - Unlike most post-processors, this option\n  has no effect for `vsphere-template`. This is because in order for a template\n  to work, you can't delete the vm that you generate the template from. The\n  vSphere Template post-processor will therefore always preserve the original\n  VM.\n\n- `snapshot_enable` (boolean) - Create a snapshot before marking as a\n  template. Default is `false`.\n\n- `snapshot_name` (string) - Name for the snapshot. Required when\n  `snapshot_enable` is `true`.\n\n- `snapshot_description` (string) - Description for the snapshot. Required\n  when `snapshot_enable` is `true`.\n\n- `reregister_vm` (boolean) - Use the method of unregister VM and reregister\n  as a template, rather than using the `markAsTemplate` method.\n\n  NOTE: If you are getting permission denied errors when trying to mark as a\n  template, but it works fine in the vSphere UI, try setting this to `false`.\n  Default is `true`.\n\n## Example\n\nAn example is shown below, showing only the post-processor configuration:\n\n**HCL2**\n\n```hcl\nsource \"null\" \"example\" {\n    communicator = \"none\"\n}\n\nbuild {\n    sources = [\n        \"source.null.example\"\n    ]\n\n    post-processors {\n      post-processor \"vsphere-template\"{\n          host                = \"vcenter.example.com\"\n          insecure            = false\n          username            = \"administrator@vsphere.local\"\n          password            = \"VMw@re1!\"\n          datacenter          = \"dc-01\"   \n          folder              = \"/templates/os/distro\"\n      }\n    }\n}\n```\n\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"null\",\n      \"communicator\": \"none\"\n    }\n  ],\n  \"post-processors\": [\n    [\n      {\n        \"type\": \"vsphere-template\",\n        \"host\": \"vcenter.example.com\",\n        \"insecure\": true,\n        \"username\": \"administrator@vsphere.local\",\n        \"password\": \"VMw@re1!\",\n        \"datacenter\": \"dc-01\",\n        \"folder\": \"/templates/os/distro\"\n      }\n    ]\n  ]\n}\n```\n\n\n## Using the vSphere Template with local builders\n\nOnce the [vSphere](/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere) post-processor takes an\nartifact from the builder and uploads it to a vSphere endpoint, you may want\nthe VM to be marked as a template. Packer can do this for you automatically\nusing a sequence definition (a collection of post-processors that are treated\nas as single pipeline, see [Post-Processors](/packer/docs/templates/legacy_json_templates/post-processors)\nfor more information):\n\n**HCL2**\n\n```hcl\nbuild {\n    sources = [\n        \"source.null.example\"\n    ]\n\n  post-processors {\n    post-processor \"vsphere\" {\n      # ...\n    }\n\n    post-processor \"vsphere-template\" {\n      # ...\n    }\n  }\n}\n```\n\n\n**JSON**\n\n```json\n{\n  \"builders\": [\n    {\n      \"type\": \"null\",\n      \"communicator\": \"none\"\n    }\n  ],\n  \"post-processors\": [\n    [\n      {\n        \"type\": \"vsphere\",\n         ...\n      },\n      {\n        \"type\": \"vsphere-template\",\n         ...\n      }\n    ],\n    {\n      \"type\": \"...\",\n      ...\n    }\n  ]\n}\n\n\n```\n\n\nIn the example above, the result of each builder is passed through the defined\nsequence of post-processors starting with the `vsphere` post-processor which\nwill upload the artifact to a vSphere endpoint. The resulting artifact is then\npassed on to the `vsphere-template` post-processor which handles marking a VM\nas a template. In JSON, note that the `vsphere` and `vsphere-template`\npost-processors can be paired together in their own array.\n\n## Permissions\n\nThe vSphere post processor needs several privileges to be able to mark the\nvm as a template. Rather than giving full administrator access, you can create\na role to give the post-processor the privileges necessary to run. Here is an\nexample role that will work. Please note that this is a user-supplied list so\nthere may be a few extraneous privilegess that are not strictly required.\n\nFor vSphere, the role needs the following privileges:\n\n    `Datastore.AllocateSpace`\n    `Host.Config.AdvancedConfig`\n    `Host.Config.NetService`\n    `Host.Config.Network`\n    `Network.Assign`\n    `System.Anonymous`\n    `System.Read`\n    `System.View`\n    `VApp.Import`\n    `VirtualMachine.Config.AddNewDisk`\n    `VirtualMachine.Config.AdvancedConfig`\n    `VirtualMachine.Inventory.Delete`\n\nand either (if `reregister_vm` is `false`):\n\n    `VirtualMachine.Provisioning.MarkAsTemplate`\n\nor (if `reregister_vm` is `true` or unset):\n\n    `VirtualMachine.Inventory.Register`\n    `VirtualMachine.Inventory.Unregister`\n\nThe role must be authorized on the:\n\n    `Cluster of the host`\n    `The destination folder`\n    `The destination datastore`\n    `The network to be assigned`\n\n# Troubleshooting\n\nSome users have reported that vSphere templates created from local vSphere builds\nget their boot order reset to cdrom only instead of the original boot order\ndefined by the template. If this issue affects you, the solution is to set\n`\"bios.hddOrder\": \"scsi0:0\"` in your builder's `vmx_data`.\n\nPacker doesn't automatically do this for you because it causes strange upload\nbehavior in certain versions of `ovftool`.\n","created_at":"2024-03-07T20:36:34.443Z","updated_at":"2024-03-07T20:36:34.443Z","name":"vSphere Template","slug":"vsphere-template","component":{"id":"73965f1c-ad56-4f38-a31b-dc17d08c0ba6","slug":"post-processor","name":"Post-Processor","plural_name":"Post-Processors","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.157Z","updated_at":"2023-07-26T17:26:54.831Z"},"variable_groups":[]}]},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"VMware vSphere","url":"/packer/integrations/hashicorp/vsphere","isCurrentPage":true}],"anchorLinks":[{"id":"installation","level":3,"title":"Installation"},{"id":"components","level":3,"title":"Components"},{"id":"builders:","level":4,"title":"Builders:"},{"id":"post-processors","level":4,"title":"Post-Processors"}],"serializedREADME":{"compiledSource":"var m=Object.defineProperty,h=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var i=(a,s,t)=>s in a?m(a,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[s]=t,e=(a,s)=>{for(var t in s||(s={}))p.call(s,t)&&i(a,t,s[t]);if(o)for(var t of o(s))r.call(s,t)&&i(a,t,s[t]);return a},l=(a,s)=>h(a,u(s));var c=(a,s)=>{var t={};for(var n in a)p.call(a,n)&&s.indexOf(n)<0&&(t[n]=a[n]);if(a!=null&&o)for(var n of o(a))s.indexOf(n)<0&&r.call(a,n)&&(t[n]=a[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:a}=n,s=c(n,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),s),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The vSphere plugin is able to create vSphere virtual machines for use with any VMware product.\nTo achieve this, the plugin comes with three builders, and two post-processors\nto build the VM depending on the strategy you want to use.`),mdx(\"h3\",e({},{id:\"user-content-installation\",\"data-text-content\":\"Installation\",className:\"g-type-display-4\"}),\"Installation\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"To install this plugin add this code into your Packer configuration and run \",mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/docs/commands/init\"}),\"packer init\")),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"packer\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token keyword\"}),\"required_plugins\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"vsphere\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"version\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"~> 1\"'),`\n`,\"      \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"source\"),\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"github.com/hashicorp/vsphere\"'),`\n`,\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Alternatively, you can use \",mdx(\"inlineCode\",{parentName:\"p\"},\"packer plugins install\"),\" to manage installation of this plugin.\"),mdx(\"pre\",e({},{className:\"language-sh\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),\"packer plugins install github.com/hashicorp/vsphere\",`\n`)),mdx(\"h3\",e({},{id:\"user-content-components\",\"data-text-content\":\"Components\",className:\"g-type-display-4\"}),\"Components\"),mdx(\"h4\",e({},{id:\"user-content-builders:\",\"data-text-content\":\"Builders\",className:\"g-type-display-5\"}),\"Builders:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-iso\"}),\"vsphere-iso\"),` - This builder starts from an\nISO file and utilizes the vSphere API to build on a remote esx instance.\nThis allows you to build vms even if you do not have SSH access to your vSphere cluster.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-clone\"}),\"vsphere-clone\"),` - This builder clones a\nvm from an existing template, then modifies it and saves it as a new\ntemplate. It uses the vSphere API to build on a remote esx instance.\nThis allows you to build vms even if you do not have SSH access to your vSphere cluster.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/builder/vsphere-supervisor\"}),\"vsphere-supervisor\"),` - This builder deploys a\nvm to a vSphere Supervisor cluster, using the VM-Service API. This allows you to build\nvms without spec yaml files and configure them after using the Packer provisioners.`))),mdx(\"h4\",e({},{id:\"user-content-post-processors\",\"data-text-content\":\"Post-Processors\",className:\"g-type-display-5\"}),\"Post-Processors\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere\"}),\"vsphere\"),` - The Packer vSphere post-processor takes an artifact\nand uploads it to a vSphere endpoint.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere-template\"}),\"vsphere-template\"),` - The Packer vSphere Template post-processor takes an\nartifact from the vmware-iso builder, built on an ESXi host (i.e. remote) or an artifact from the\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/packer/integrations/hashicorp/vsphere/latest/components/post-processor/vsphere\"}),\"vSphere\"),` post-processor, marks the VM as a template, and leaves it in the path of\nyour choice.`))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}