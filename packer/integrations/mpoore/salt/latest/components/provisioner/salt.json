{"pageProps":{"metadata":{"title":"Salt Provisioner | Integrations"},"product":{"name":"Packer","slug":"packer","algoliaConfig":{"indexName":"product_PACKER","searchOnlyApiKey":"4e1ea7f4bf4335ac43d9f28463e42148"},"analyticsConfig":{"includedDomains":"packer.io www.packer.io","segmentWriteKey":"AjXdfmTTk1I9q9dfyePuDFHBrz1tCO3l"},"datoToken":"88b4984480dad56295a8aadae6caad","metadata":{"title":"Packer by HashiCorp","description":"Packer helps you create golden images for multiple platforms from a single source configuration.","image":"https://www.packer.io/packer-public/img/og-image.png","icon":[{"href":"/packer-public/_favicon.ico"}]},"alertBannerActive":true,"alertBanner":{"tag":"HashiDays","url":"https://hashicorp.com/conferences/hashidays","text":"One conference. Three cities.","linkText":"Find a city near you","expirationDate":"2024-06-14T00:00:00-08:00"},"version":"1.7.10","basePaths":["docs","guides","intro","downloads"],"rootDocsPaths":[{"iconName":"docs","name":"Documentation","path":"docs"},{"iconName":"guide","name":"Guides","path":"guides"}],"integrationsConfig":{"description":"A curated collection of official, partner, and community Packer Integrations."}},"integration":{"id":"bf01aa86-331b-4608-ae4a-384e12f686bf","slug":"salt","name":"Salt","description":"The Salt plugin enables users to apply Salt states to their Packer-built images for the purpose of further customizing them using Salt's powerful desired state automation.","license_type":null,"license_url":null,"external_only":false,"external_url":null,"tier":"community","repo_url":"https://github.com/mpoore/packer-plugin-salt","subdirectory":"/.web-docs","created_at":"2024-06-24T18:17:02.960Z","updated_at":"2024-06-25T17:40:42.488Z","hide_versions":false,"organization":{"id":"12f31569-3e20-4a41-bd1c-cc752d802f80","slug":"mpoore","created_at":"2024-06-24T18:17:02.824Z","updated_at":"2024-06-24T18:17:02.824Z"},"product":{"id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","slug":"packer","name":"Packer","created_at":"2022-11-09T22:56:29.896Z","updated_at":"2022-11-09T22:56:29.896Z"},"versions":["0.1.2"],"components":[{"id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","slug":"provisioner","name":"Provisioner","plural_name":"Provisioners"}],"flags":[],"integration_type":null},"activeRelease":{"id":"567105fd-2453-4ede-a21b-c9b64e6649fe","integration_id":"bf01aa86-331b-4608-ae4a-384e12f686bf","version":"0.1.2","readme":"The `Salt` plugin enables users to customize image builds using [Salt](https://saltproject.io) states by offering a provisioner dedicated to that purpose.\n\n### Installation\n\nTo install this plugin, copy and paste this code into your Packer configuration, then run [`packer init`](https://www.packer.io/docs/commands/init).\n\n```hcl\npacker {\n  required_plugins {\n    salt = {\n      # source represents the GitHub URI to the plugin repository without the `packer-plugin-` prefix.\n      source  = \"github.com/mpoore/salt\"\n      version = \">=0.1.2\"\n    }\n  }\n}\n```\n\nAlternatively, you can use `packer plugins install` to manage installation of this plugin.\n\n```sh\n$ packer plugins install github.com/mpoore/salt\n```\n\n### Components\n\n**Note:** The current version of this plugin does **not** automatically install the required `salt-minion` package. It is assumed when calling this provisioner that installation of the Salt Minion has already taken place. Commonly users may employ the shell provisioner (or similar) to install the Salt Minion or include the necessary steps within their KickStart or seed file for their build. Instructions for installing the Salt Minion are be located on the [SaltProject website](https://docs.saltproject.io/salt/install-guide/en/latest/).\n\n**Note:** The Salt Minion package need only be installed, it does not need to be enabled as a service or configured with a Salt Master.\n\n#### Provisioners\n\n- [salt](https://developer.hashicorp.com/packer/integrations/mpoore/salt/latest/components/provisioner/salt) - The Packer provisioner will transfer Salt state files to the target guest operating system and execute `Salt` to apply the configured desired state.","created_at":"2024-06-25T17:40:42.750Z","updated_at":"2024-06-25T17:40:42.750Z","components":[{"id":"d13c51ba-db96-4920-8ba1-9804b68f63e8","integration_release_id":"567105fd-2453-4ede-a21b-c9b64e6649fe","component_id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","readme":"Type: `salt`\n\nThe Salt Packer provisioner executes Salt's \"masterless\" or \"local\"\nmode on the guest operating system of the image that Packer is building.\nSalt state files that exist on the guest operating system are used to customize\nthe image to meet a defined desired state. This means the Salt Minion package\nmust be installed on the guest operating system.\nState files can be uploaded from your local build machine (the one running\nPacker) by this plugin. Salt is then invoked on the guest machine in [masterless\nmode](https://docs.saltproject.io/en/latest/topics/tutorials/quickstart.html)\nvia the `salt-call` command.\n\n-> **Note:** The current version of this plugin does **not** automatically install the required `salt-minion` package. It is assumed when calling this provisioner that installation of the Salt Minion has already taken place. Commonly users may employ the [shell provisioner](/packer/docs/provisioner/shell) (or similar) to install the Salt Minion or include the necessary steps within their KickStart or seed file for their build. Instructions for installing the Salt Minion are be located on the [SaltProject website](https://docs.saltproject.io/salt/install-guide/en/latest/).\n\n-> **Note:** The `salt-minion` package need only be installed, it does not need to be enabled as a service or configured with a Salt Master.\n\n## Basic Example\n\nThe example below is fully functional.\n\n**HCL2**\n\n```hcl\npacker {\n  required_plugins {\n    salt = {\n      version = \">= 0.1.2\"\n      source  = \"github.com/mpoore/salt\"\n    }\n  }\n}\n\nvariable \"topping\" {\n  type    = string\n  default = \"mushroom\"\n}\n\nsource \"docker\" \"example\" {\n  image       = \"mpoore/salt-example:latest\"\n  export_path = \"packer_example\"\n  run_command = [\"-d\", \"-i\", \"-t\", \"--entrypoint=/bin/bash\", \"{{.Image}}\"]\n}\n\nbuild {\n  sources = [\n    \"source.docker.example\"\n  ]\n\n  provisioner \"salt\" {\n    state_files      = [ \"example.sls\" ]\n    environment_vars = [ \"TOPPINGS=${ var.topping }\" ]\n  }\n}\n```\n\nwhere example.sls contains\n\n```\necho_toppings:\n  cmd.run:\n    - name: 'echo $TOPPINGS'\n```\n\n## Configuration Reference\n\nThe reference of available configuration options is listed below.\n\nRequired (one, not both, of):\n\n- `state_files` (array of strings) - The individual state files to be applied by Salt. These files must exist on\n\tyour local system where Packer is executing. State files are applied in the order\n\tin which they appear in the `state_files` parameter.\n\n- `state_tree` (array of strings) - A path to the complete Salt State Tree on your local system to be copied to the remote machine.\n  The structure of the State Tree is flexible, however the use of this option assumes\n\tthat a `top.sls` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\n\tthe `top.sls` file and match expressions to determine which individual states should be applied. This action\n\tis referred to as a \"highstate\".\n\nOptional:\n\n<!-- Code generated from the comments of the Config struct in provisioner/salt/provisioner.go; DO NOT EDIT MANUALLY -->\n\n- `target_os` (string) - The target OS that the workload is using. This value is used to determine whether a\n  Windows or Linux OS is in use. If not specified, this value defaults to `linux`.\n  Supported values for the selection are:\n  \n  `linux` - This denotes that the target runs a Linux or Unix operating system.\n  `windows` - This denotes that the target runs a Windows operating system.\n  \n  Presently this option determines some of the defaults used by the provisioner.\n\n- `state_files` ([]string) - The individual state files to be applied by Salt. These files must exist on\n  your local system where Packer is executing. State files are applied in the order\n  in which they appear in the parameter. This option is exclusive\n  with `state_tree`.\n\n- `state_tree` (string) - A path to the complete Salt State Tree on your local system to be copied to the remote machine as the\n  `staging_directory`. The structure of the State Tree is flexible, however the use of this option assumes\n  that a `top.sls` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\n  the `top.sls` file and match expressions to determine which individual states should be applied. This action\n  is referred to as a \"highstate\". This option is exclusive with `state_files`.\n  \n  For more details about states and highstates, refer to the [Salt documentation](https://docs.saltproject.io/en/latest/topics/tutorials/starting_states.html).\n\n- `staging_directory` (string) - The directory where files will be uploaded to on the target system. Packer requires write\n  permissions in this directory. Default values are used if this option is not set.\n  The default value used will depend on the value of `target_os`. The default for Linux systems is:\n  \n  ```\n  /tmp/packer-provisioner-salt\n  ```\n  \n  For Windows systems the default is:\n  \n  ```\n  C:/Windows/Temp/packer-provisioner-salt\n  ```\n  \n  Windows paths are recommended to be set using `/` as the delimiter owing to more conventional\n  characters causing issues when this plugin is executed on a Linux system.\n\n- `clean` (bool) - If set to `true`, the contents uploaded to the target system will be removed after\n  applying Salt states. By default this is set to `false`.\n\n- `environment_vars` ([]string) - A collection of environment variables that will be made available to the Salt process\n  when it is executed. The intended purpose of this facility is to enable secrets or\n  environment-specific information to be consumed when applying Salt states.\n  \n  For example:\n  \n  ```hcl\n  environment_vars = [ \"SECRET_VALUE=${ var.build_secret }\",\n                       \"CONFIG_VALUE=${ var.config_value }\" ]\n  ```\n  This would expose the environment variables `SECRET_VALUE` and `CONFIG_VALUE` to the Salt process.\n  These environment variables can then be consumed within Salt states, for example:\n  \n  ```text\n  {% set secret_value = salt['environ.get']('SECRET_VALUE', 'default_value') %}\n  {% set config_value = salt['environ.get']('CONFIG_VALUE', 'default_value') %}\n  # Echo config value\n  echo config value:\n  cmd.run:\n   - name: echo {{ config_value }}\n  ```\n\n- `env_var_format` (string) - An advanced option used to customize the format of the `environment_vars` supplied to the Salt process.\n  The default format for environment variables is:\n  \n  ```\n  \"VARNAME='VARVALUE' \"\n  ```\n  \n  **Note:** There is a trailing space in the default value that is required to separate environment varables from each other.\n\n<!-- End of code generated from the comments of the Config struct in provisioner/salt/provisioner.go; -->\n\n\nParameters common to all provisioners:\n\n- `pause_before` (duration) - Sleep for duration before execution.\n\n- `max_retries` (int) - Max times the provisioner will retry in case of failure. Defaults to zero (0). Zero means an error will not be retried.\n\n- `only` (array of string) - Only run the provisioner for listed builder(s)\n  by name.\n\n- `override` (object) - Override the builder with different settings for a\n  specific builder, eg :\n\n  In HCL2:\n\n  ```hcl\n  source \"null\" \"example1\" {\n    communicator = \"none\"\n  }\n\n  source \"null\" \"example2\" {\n    communicator = \"none\"\n  }\n\n  build {\n    sources = [\"source.null.example1\", \"source.null.example2\"]\n    provisioner \"shell-local\" {\n      inline = [\"echo not overridden\"]\n      override = {\n        example1 = {\n          inline = [\"echo yes overridden\"]\n        }\n      }\n    }\n  }\n  ```\n\n  In JSON:\n\n  ```json\n  {\n    \"builders\": [\n      {\n        \"type\": \"null\",\n        \"name\": \"example1\",\n        \"communicator\": \"none\"\n      },\n      {\n        \"type\": \"null\",\n        \"name\": \"example2\",\n        \"communicator\": \"none\"\n      }\n    ],\n    \"provisioners\": [\n      {\n        \"type\": \"shell-local\",\n        \"inline\": [\"echo not overridden\"],\n        \"override\": {\n          \"example1\": {\n            \"inline\": [\"echo yes overridden\"]\n          }\n        }\n      }\n    ]\n  }\n  ```\n\n- `timeout` (duration) - If the provisioner takes more than for example\n  `1h10m1s` or `10m` to finish, the provisioner will timeout and fail.\n","created_at":"2024-06-25T17:40:42.984Z","updated_at":"2024-06-25T17:40:42.984Z","name":"Salt","slug":"salt","component":{"id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","slug":"provisioner","name":"Provisioner","plural_name":"Provisioners","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.054Z","updated_at":"2022-11-09T22:56:31.054Z"},"variable_groups":[]}]},"component":{"id":"d13c51ba-db96-4920-8ba1-9804b68f63e8","integration_release_id":"567105fd-2453-4ede-a21b-c9b64e6649fe","component_id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","readme":"Type: `salt`\n\nThe Salt Packer provisioner executes Salt's \"masterless\" or \"local\"\nmode on the guest operating system of the image that Packer is building.\nSalt state files that exist on the guest operating system are used to customize\nthe image to meet a defined desired state. This means the Salt Minion package\nmust be installed on the guest operating system.\nState files can be uploaded from your local build machine (the one running\nPacker) by this plugin. Salt is then invoked on the guest machine in [masterless\nmode](https://docs.saltproject.io/en/latest/topics/tutorials/quickstart.html)\nvia the `salt-call` command.\n\n-> **Note:** The current version of this plugin does **not** automatically install the required `salt-minion` package. It is assumed when calling this provisioner that installation of the Salt Minion has already taken place. Commonly users may employ the [shell provisioner](/packer/docs/provisioner/shell) (or similar) to install the Salt Minion or include the necessary steps within their KickStart or seed file for their build. Instructions for installing the Salt Minion are be located on the [SaltProject website](https://docs.saltproject.io/salt/install-guide/en/latest/).\n\n-> **Note:** The `salt-minion` package need only be installed, it does not need to be enabled as a service or configured with a Salt Master.\n\n## Basic Example\n\nThe example below is fully functional.\n\n**HCL2**\n\n```hcl\npacker {\n  required_plugins {\n    salt = {\n      version = \">= 0.1.2\"\n      source  = \"github.com/mpoore/salt\"\n    }\n  }\n}\n\nvariable \"topping\" {\n  type    = string\n  default = \"mushroom\"\n}\n\nsource \"docker\" \"example\" {\n  image       = \"mpoore/salt-example:latest\"\n  export_path = \"packer_example\"\n  run_command = [\"-d\", \"-i\", \"-t\", \"--entrypoint=/bin/bash\", \"{{.Image}}\"]\n}\n\nbuild {\n  sources = [\n    \"source.docker.example\"\n  ]\n\n  provisioner \"salt\" {\n    state_files      = [ \"example.sls\" ]\n    environment_vars = [ \"TOPPINGS=${ var.topping }\" ]\n  }\n}\n```\n\nwhere example.sls contains\n\n```\necho_toppings:\n  cmd.run:\n    - name: 'echo $TOPPINGS'\n```\n\n## Configuration Reference\n\nThe reference of available configuration options is listed below.\n\nRequired (one, not both, of):\n\n- `state_files` (array of strings) - The individual state files to be applied by Salt. These files must exist on\n\tyour local system where Packer is executing. State files are applied in the order\n\tin which they appear in the `state_files` parameter.\n\n- `state_tree` (array of strings) - A path to the complete Salt State Tree on your local system to be copied to the remote machine.\n  The structure of the State Tree is flexible, however the use of this option assumes\n\tthat a `top.sls` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\n\tthe `top.sls` file and match expressions to determine which individual states should be applied. This action\n\tis referred to as a \"highstate\".\n\nOptional:\n\n<!-- Code generated from the comments of the Config struct in provisioner/salt/provisioner.go; DO NOT EDIT MANUALLY -->\n\n- `target_os` (string) - The target OS that the workload is using. This value is used to determine whether a\n  Windows or Linux OS is in use. If not specified, this value defaults to `linux`.\n  Supported values for the selection are:\n  \n  `linux` - This denotes that the target runs a Linux or Unix operating system.\n  `windows` - This denotes that the target runs a Windows operating system.\n  \n  Presently this option determines some of the defaults used by the provisioner.\n\n- `state_files` ([]string) - The individual state files to be applied by Salt. These files must exist on\n  your local system where Packer is executing. State files are applied in the order\n  in which they appear in the parameter. This option is exclusive\n  with `state_tree`.\n\n- `state_tree` (string) - A path to the complete Salt State Tree on your local system to be copied to the remote machine as the\n  `staging_directory`. The structure of the State Tree is flexible, however the use of this option assumes\n  that a `top.sls` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\n  the `top.sls` file and match expressions to determine which individual states should be applied. This action\n  is referred to as a \"highstate\". This option is exclusive with `state_files`.\n  \n  For more details about states and highstates, refer to the [Salt documentation](https://docs.saltproject.io/en/latest/topics/tutorials/starting_states.html).\n\n- `staging_directory` (string) - The directory where files will be uploaded to on the target system. Packer requires write\n  permissions in this directory. Default values are used if this option is not set.\n  The default value used will depend on the value of `target_os`. The default for Linux systems is:\n  \n  ```\n  /tmp/packer-provisioner-salt\n  ```\n  \n  For Windows systems the default is:\n  \n  ```\n  C:/Windows/Temp/packer-provisioner-salt\n  ```\n  \n  Windows paths are recommended to be set using `/` as the delimiter owing to more conventional\n  characters causing issues when this plugin is executed on a Linux system.\n\n- `clean` (bool) - If set to `true`, the contents uploaded to the target system will be removed after\n  applying Salt states. By default this is set to `false`.\n\n- `environment_vars` ([]string) - A collection of environment variables that will be made available to the Salt process\n  when it is executed. The intended purpose of this facility is to enable secrets or\n  environment-specific information to be consumed when applying Salt states.\n  \n  For example:\n  \n  ```hcl\n  environment_vars = [ \"SECRET_VALUE=${ var.build_secret }\",\n                       \"CONFIG_VALUE=${ var.config_value }\" ]\n  ```\n  This would expose the environment variables `SECRET_VALUE` and `CONFIG_VALUE` to the Salt process.\n  These environment variables can then be consumed within Salt states, for example:\n  \n  ```text\n  {% set secret_value = salt['environ.get']('SECRET_VALUE', 'default_value') %}\n  {% set config_value = salt['environ.get']('CONFIG_VALUE', 'default_value') %}\n  # Echo config value\n  echo config value:\n  cmd.run:\n   - name: echo {{ config_value }}\n  ```\n\n- `env_var_format` (string) - An advanced option used to customize the format of the `environment_vars` supplied to the Salt process.\n  The default format for environment variables is:\n  \n  ```\n  \"VARNAME='VARVALUE' \"\n  ```\n  \n  **Note:** There is a trailing space in the default value that is required to separate environment varables from each other.\n\n<!-- End of code generated from the comments of the Config struct in provisioner/salt/provisioner.go; -->\n\n\nParameters common to all provisioners:\n\n- `pause_before` (duration) - Sleep for duration before execution.\n\n- `max_retries` (int) - Max times the provisioner will retry in case of failure. Defaults to zero (0). Zero means an error will not be retried.\n\n- `only` (array of string) - Only run the provisioner for listed builder(s)\n  by name.\n\n- `override` (object) - Override the builder with different settings for a\n  specific builder, eg :\n\n  In HCL2:\n\n  ```hcl\n  source \"null\" \"example1\" {\n    communicator = \"none\"\n  }\n\n  source \"null\" \"example2\" {\n    communicator = \"none\"\n  }\n\n  build {\n    sources = [\"source.null.example1\", \"source.null.example2\"]\n    provisioner \"shell-local\" {\n      inline = [\"echo not overridden\"]\n      override = {\n        example1 = {\n          inline = [\"echo yes overridden\"]\n        }\n      }\n    }\n  }\n  ```\n\n  In JSON:\n\n  ```json\n  {\n    \"builders\": [\n      {\n        \"type\": \"null\",\n        \"name\": \"example1\",\n        \"communicator\": \"none\"\n      },\n      {\n        \"type\": \"null\",\n        \"name\": \"example2\",\n        \"communicator\": \"none\"\n      }\n    ],\n    \"provisioners\": [\n      {\n        \"type\": \"shell-local\",\n        \"inline\": [\"echo not overridden\"],\n        \"override\": {\n          \"example1\": {\n            \"inline\": [\"echo yes overridden\"]\n          }\n        }\n      }\n    ]\n  }\n  ```\n\n- `timeout` (duration) - If the provisioner takes more than for example\n  `1h10m1s` or `10m` to finish, the provisioner will timeout and fail.\n","created_at":"2024-06-25T17:40:42.984Z","updated_at":"2024-06-25T17:40:42.984Z","name":"Salt","slug":"salt","component":{"id":"418417de-2c71-46a1-8dbc-7e9ae777a22e","slug":"provisioner","name":"Provisioner","plural_name":"Provisioners","product_id":"4c2b00c6-7cc1-4e4c-b596-4ab57e319f21","created_at":"2022-11-09T22:56:31.054Z","updated_at":"2022-11-09T22:56:31.054Z"},"variable_groups":[]},"processedVariablesMarkdown":{},"anchorLinks":[{"id":"basic-example","level":2,"title":"Basic Example"},{"id":"configuration-reference","level":2,"title":"Configuration Reference"}],"serializedREADME":{"compiledSource":"const layoutProps={};const MDXLayout=\"wrapper\";function MDXContent({components,...props}){return mdx(MDXLayout,{...layoutProps,...props,components:components,mdxType:\"MDXLayout\"},mdx(\"p\",{\"className\":\"g-type-long-body\"},`Type: `,mdx(\"inlineCode\",{parentName:\"p\"},`salt`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The Salt Packer provisioner executes Salt's \"masterless\" or \"local\"\nmode on the guest operating system of the image that Packer is building.\nSalt state files that exist on the guest operating system are used to customize\nthe image to meet a defined desired state. This means the Salt Minion package\nmust be installed on the guest operating system.\nState files can be uploaded from your local build machine (the one running\nPacker) by this plugin. Salt is then invoked on the guest machine in `,mdx(\"a\",{parentName:\"p\",\"href\":\"https://docs.saltproject.io/en/latest/topics/tutorials/quickstart.html\"},`masterless\nmode`),`\nvia the `,mdx(\"inlineCode\",{parentName:\"p\"},`salt-call`),` command.`),mdx(\"div\",{\"className\":\"alert alert-info g-type-body\"},mdx(\"p\",{parentName:\"div\",\"className\":\"g-type-long-body\"},``,mdx(\"strong\",{parentName:\"p\"},`Note:`),` The current version of this plugin does `,mdx(\"strong\",{parentName:\"p\"},`not`),` automatically install the required `,mdx(\"inlineCode\",{parentName:\"p\"},`salt-minion`),` package. It is assumed when calling this provisioner that installation of the Salt Minion has already taken place. Commonly users may employ the `,mdx(\"a\",{parentName:\"p\",\"href\":\"/packer/docs/provisioner/shell\"},`shell provisioner`),` (or similar) to install the Salt Minion or include the necessary steps within their KickStart or seed file for their build. Instructions for installing the Salt Minion are be located on the `,mdx(\"a\",{parentName:\"p\",\"href\":\"https://docs.saltproject.io/salt/install-guide/en/latest/\"},`SaltProject website`),`.`)),mdx(\"div\",{\"className\":\"alert alert-info g-type-body\"},mdx(\"p\",{parentName:\"div\",\"className\":\"g-type-long-body\"},``,mdx(\"strong\",{parentName:\"p\"},`Note:`),` The `,mdx(\"inlineCode\",{parentName:\"p\"},`salt-minion`),` package need only be installed, it does not need to be enabled as a service or configured with a Salt Master.`)),mdx(\"h2\",{\"id\":\"user-content-basic-example\",\"data-text-content\":\"Basic Example\",\"className\":\"g-type-display-3\"},`Basic Example`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The example below is fully functional.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},mdx(\"strong\",{parentName:\"p\"},`HCL2`)),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`packer`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`  required_plugins`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    salt `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`      version `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \">= 0.1.2\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`      source  `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"github.com/mpoore/salt\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`variable`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"topping\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  type    `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},` string`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  default `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"mushroom\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`source`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"docker\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"example\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  image       `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"mpoore/salt-example:latest\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  export_path `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"packer_example\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  run_command `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"-d\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"-i\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"-t\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"--entrypoint=/bin/bash\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"{{.Image}}\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`build`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  sources `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`    \"source.docker.example\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  ]`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`  provisioner`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"salt\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    state_files      `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [ `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"example.sls\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` ]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    environment_vars `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [ `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"TOPPINGS=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`\\${`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` var`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`.`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`topping `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`}`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` ]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`)),mdx(\"p\",{\"className\":\"g-type-long-body\"},`where example.sls contains`),mdx(\"pre\",null,mdx(\"code\",{parentName:\"pre\"},`echo_toppings:\n  cmd.run:\n    - name: 'echo $TOPPINGS'\n`)),mdx(\"h2\",{\"id\":\"user-content-configuration-reference\",\"data-text-content\":\"Configuration Reference\",\"className\":\"g-type-display-3\"},`Configuration Reference`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`The reference of available configuration options is listed below.`),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Required (one, not both, of):`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`state_files`),` (array of strings) - The individual state files to be applied by Salt. These files must exist on\nyour local system where Packer is executing. State files are applied in the order\nin which they appear in the `,mdx(\"inlineCode\",{parentName:\"p\"},`state_files`),` parameter.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`state_tree`),` (array of strings) - A path to the complete Salt State Tree on your local system to be copied to the remote machine.\nThe structure of the State Tree is flexible, however the use of this option assumes\nthat a `,mdx(\"inlineCode\",{parentName:\"p\"},`top.sls`),` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},`top.sls`),` file and match expressions to determine which individual states should be applied. This action\nis referred to as a \"highstate\".`))),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Optional:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`target_os`),` (string) - The target OS that the workload is using. This value is used to determine whether a\nWindows or Linux OS is in use. If not specified, this value defaults to `,mdx(\"inlineCode\",{parentName:\"p\"},`linux`),`.\nSupported values for the selection are:`),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`linux`),` - This denotes that the target runs a Linux or Unix operating system.\n`,mdx(\"inlineCode\",{parentName:\"p\"},`windows`),` - This denotes that the target runs a Windows operating system.`),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`Presently this option determines some of the defaults used by the provisioner.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`state_files`),` ([]string) - The individual state files to be applied by Salt. These files must exist on\nyour local system where Packer is executing. State files are applied in the order\nin which they appear in the parameter. This option is exclusive\nwith `,mdx(\"inlineCode\",{parentName:\"p\"},`state_tree`),`.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`state_tree`),` (string) - A path to the complete Salt State Tree on your local system to be copied to the remote machine as the\n`,mdx(\"inlineCode\",{parentName:\"p\"},`staging_directory`),`. The structure of the State Tree is flexible, however the use of this option assumes\nthat a `,mdx(\"inlineCode\",{parentName:\"p\"},`top.sls`),` file is present at the top of the State Tree. The plugin assumes that Salt will evaluate\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},`top.sls`),` file and match expressions to determine which individual states should be applied. This action\nis referred to as a \"highstate\". This option is exclusive with `,mdx(\"inlineCode\",{parentName:\"p\"},`state_files`),`.`),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`For more details about states and highstates, refer to the `,mdx(\"a\",{parentName:\"p\",\"href\":\"https://docs.saltproject.io/en/latest/topics/tutorials/starting_states.html\"},`Salt documentation`),`.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`staging_directory`),` (string) - The directory where files will be uploaded to on the target system. Packer requires write\npermissions in this directory. Default values are used if this option is not set.\nThe default value used will depend on the value of `,mdx(\"inlineCode\",{parentName:\"p\"},`target_os`),`. The default for Linux systems is:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},`/tmp/packer-provisioner-salt\n`)),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`For Windows systems the default is:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},`C:/Windows/Temp/packer-provisioner-salt\n`)),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`Windows paths are recommended to be set using `,mdx(\"inlineCode\",{parentName:\"p\"},`/`),` as the delimiter owing to more conventional\ncharacters causing issues when this plugin is executed on a Linux system.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`clean`),` (bool) - If set to `,mdx(\"inlineCode\",{parentName:\"p\"},`true`),`, the contents uploaded to the target system will be removed after\napplying Salt states. By default this is set to `,mdx(\"inlineCode\",{parentName:\"p\"},`false`),`.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`environment_vars`),` ([]string) - A collection of environment variables that will be made available to the Salt process\nwhen it is executed. The intended purpose of this facility is to enable secrets or\nenvironment-specific information to be consumed when applying Salt states.`),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`For example:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`environment_vars `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [ `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"SECRET_VALUE=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`\\${`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` var`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`.`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`build_secret `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`}`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`                     \"CONFIG_VALUE=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`\\${`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` var`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`.`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`config_value `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`}`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` ]`)),`\n`)),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`This would expose the environment variables `,mdx(\"inlineCode\",{parentName:\"p\"},`SECRET_VALUE`),` and `,mdx(\"inlineCode\",{parentName:\"p\"},`CONFIG_VALUE`),` to the Salt process.\nThese environment variables can then be consumed within Salt states, for example:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},`{% set secret_value = salt['environ.get']('SECRET_VALUE', 'default_value') %}`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},`{% set config_value = salt['environ.get']('CONFIG_VALUE', 'default_value') %}`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},`# Echo config value`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},`echo config value:`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},`cmd.run:`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\"},` - name: echo {{ config_value }}`)),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`env_var_format`),` (string) - An advanced option used to customize the format of the `,mdx(\"inlineCode\",{parentName:\"p\"},`environment_vars`),` supplied to the Salt process.\nThe default format for environment variables is:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},`\"VARNAME='VARVALUE' \"\n`)),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"strong\",{parentName:\"p\"},`Note:`),` There is a trailing space in the default value that is required to separate environment varables from each other.`))),mdx(\"p\",{\"className\":\"g-type-long-body\"},`Parameters common to all provisioners:`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`pause_before`),` (duration) - Sleep for duration before execution.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`max_retries`),` (int) - Max times the provisioner will retry in case of failure. Defaults to zero (0). Zero means an error will not be retried.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`only`),` (array of string) - Only run the provisioner for listed builder(s)\nby name.`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`override`),` (object) - Override the builder with different settings for a\nspecific builder, eg :`),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`In HCL2:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`source`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"null\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"example1\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  communicator `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"none\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`source`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"null\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"example2\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  communicator `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"none\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`,`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`build`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  sources `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"source.null.example1\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"source.null.example2\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-function)\"}},`  provisioner`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-constant)\"}},` \"shell-local\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    inline `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"echo not overridden\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    override `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`      example1 `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`        inline `),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`=`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"echo yes overridden\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`      }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`)),mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},`In JSON:`),mdx(\"pre\",{parentName:\"li\"},mdx(\"code\",{parentName:\"pre\"},mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`{`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`  \"builders\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"type\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"null\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"name\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"example1\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"communicator\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"none\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    }`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"type\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"null\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"name\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"example2\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"communicator\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"none\"`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  ]`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`  \"provisioners\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"type\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},` \"shell-local\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"inline\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"echo not overridden\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`,`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`      \"override\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`        \"example1\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` {`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-keyword)\"}},`          \"inline\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-punctuation)\"}},`:`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},` [`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-string)\"}},`\"echo yes overridden\"`),mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`        }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`      }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`    }`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`  ]`)),`\n`,mdx(\"span\",{parentName:\"code\"},mdx(\"span\",{parentName:\"span\",\"style\":{\"color\":\"var(--hds-code-block-color-token)\"}},`}`)),`\n`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\",\"className\":\"g-type-long-body\"},mdx(\"inlineCode\",{parentName:\"p\"},`timeout`),` (duration) - If the provisioner takes more than for example\n`,mdx(\"inlineCode\",{parentName:\"p\"},`1h10m1s`),` or `,mdx(\"inlineCode\",{parentName:\"p\"},`10m`),` to finish, the provisioner will timeout and fail.`))))};MDXContent.isMDXComponent=true;","scope":{}},"breadcrumbLinks":[{"title":"Developer","url":"/"},{"title":"Packer","url":"/packer"},{"title":"Integrations","url":"/packer/integrations"},{"title":"Salt","url":"/packer/integrations/mpoore/salt","isCurrentPage":false},{"title":"v0.1.2","url":"/packer/integrations/mpoore/salt/v0.1.2","isCurrentPage":false},{"title":"Components"},{"title":"Provisioner"},{"title":"Salt","url":"/packer/integrations/mpoore/salt/latest/components/provisioner/salt","isCurrentPage":true}]},"__N_SSG":true}